
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model UserLocation
 * 
 */
export type UserLocation = $Result.DefaultSelection<Prisma.$UserLocationPayload>
/**
 * Model Agent
 * 
 */
export type Agent = $Result.DefaultSelection<Prisma.$AgentPayload>
/**
 * Model DepartmentMunicipalAdmin
 * 
 */
export type DepartmentMunicipalAdmin = $Result.DefaultSelection<Prisma.$DepartmentMunicipalAdminPayload>
/**
 * Model SuperMunicipalAdmin
 * 
 */
export type SuperMunicipalAdmin = $Result.DefaultSelection<Prisma.$SuperMunicipalAdminPayload>
/**
 * Model DepartmentStateAdmin
 * 
 */
export type DepartmentStateAdmin = $Result.DefaultSelection<Prisma.$DepartmentStateAdminPayload>
/**
 * Model SuperStateAdmin
 * 
 */
export type SuperStateAdmin = $Result.DefaultSelection<Prisma.$SuperStateAdminPayload>
/**
 * Model SuperAdmin
 * 
 */
export type SuperAdmin = $Result.DefaultSelection<Prisma.$SuperAdminPayload>
/**
 * Model Category
 * 
 */
export type Category = $Result.DefaultSelection<Prisma.$CategoryPayload>
/**
 * Model Complaint
 * 
 */
export type Complaint = $Result.DefaultSelection<Prisma.$ComplaintPayload>
/**
 * Model ComplaintLocation
 * 
 */
export type ComplaintLocation = $Result.DefaultSelection<Prisma.$ComplaintLocationPayload>
/**
 * Model Upvote
 * 
 */
export type Upvote = $Result.DefaultSelection<Prisma.$UpvotePayload>
/**
 * Model NewsUpdate
 * 
 */
export type NewsUpdate = $Result.DefaultSelection<Prisma.$NewsUpdatePayload>
/**
 * Model AuditLog
 * 
 */
export type AuditLog = $Result.DefaultSelection<Prisma.$AuditLogPayload>
/**
 * Model RegionalWorkflow
 * 
 */
export type RegionalWorkflow = $Result.DefaultSelection<Prisma.$RegionalWorkflowPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const ComplaintStatus: {
  REGISTERED: 'REGISTERED',
  UNDER_PROCESSING: 'UNDER_PROCESSING',
  FORWARDED: 'FORWARDED',
  ON_HOLD: 'ON_HOLD',
  COMPLETED: 'COMPLETED',
  REJECTED: 'REJECTED'
};

export type ComplaintStatus = (typeof ComplaintStatus)[keyof typeof ComplaintStatus]


export const ComplaintUrgency: {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  CRITICAL: 'CRITICAL'
};

export type ComplaintUrgency = (typeof ComplaintUrgency)[keyof typeof ComplaintUrgency]

}

export type ComplaintStatus = $Enums.ComplaintStatus

export const ComplaintStatus: typeof $Enums.ComplaintStatus

export type ComplaintUrgency = $Enums.ComplaintUrgency

export const ComplaintUrgency: typeof $Enums.ComplaintUrgency

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userLocation`: Exposes CRUD operations for the **UserLocation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserLocations
    * const userLocations = await prisma.userLocation.findMany()
    * ```
    */
  get userLocation(): Prisma.UserLocationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.agent`: Exposes CRUD operations for the **Agent** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Agents
    * const agents = await prisma.agent.findMany()
    * ```
    */
  get agent(): Prisma.AgentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.departmentMunicipalAdmin`: Exposes CRUD operations for the **DepartmentMunicipalAdmin** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DepartmentMunicipalAdmins
    * const departmentMunicipalAdmins = await prisma.departmentMunicipalAdmin.findMany()
    * ```
    */
  get departmentMunicipalAdmin(): Prisma.DepartmentMunicipalAdminDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.superMunicipalAdmin`: Exposes CRUD operations for the **SuperMunicipalAdmin** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SuperMunicipalAdmins
    * const superMunicipalAdmins = await prisma.superMunicipalAdmin.findMany()
    * ```
    */
  get superMunicipalAdmin(): Prisma.SuperMunicipalAdminDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.departmentStateAdmin`: Exposes CRUD operations for the **DepartmentStateAdmin** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DepartmentStateAdmins
    * const departmentStateAdmins = await prisma.departmentStateAdmin.findMany()
    * ```
    */
  get departmentStateAdmin(): Prisma.DepartmentStateAdminDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.superStateAdmin`: Exposes CRUD operations for the **SuperStateAdmin** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SuperStateAdmins
    * const superStateAdmins = await prisma.superStateAdmin.findMany()
    * ```
    */
  get superStateAdmin(): Prisma.SuperStateAdminDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.superAdmin`: Exposes CRUD operations for the **SuperAdmin** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SuperAdmins
    * const superAdmins = await prisma.superAdmin.findMany()
    * ```
    */
  get superAdmin(): Prisma.SuperAdminDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.category`: Exposes CRUD operations for the **Category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.CategoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.complaint`: Exposes CRUD operations for the **Complaint** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Complaints
    * const complaints = await prisma.complaint.findMany()
    * ```
    */
  get complaint(): Prisma.ComplaintDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.complaintLocation`: Exposes CRUD operations for the **ComplaintLocation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ComplaintLocations
    * const complaintLocations = await prisma.complaintLocation.findMany()
    * ```
    */
  get complaintLocation(): Prisma.ComplaintLocationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.upvote`: Exposes CRUD operations for the **Upvote** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Upvotes
    * const upvotes = await prisma.upvote.findMany()
    * ```
    */
  get upvote(): Prisma.UpvoteDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.newsUpdate`: Exposes CRUD operations for the **NewsUpdate** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more NewsUpdates
    * const newsUpdates = await prisma.newsUpdate.findMany()
    * ```
    */
  get newsUpdate(): Prisma.NewsUpdateDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.auditLog`: Exposes CRUD operations for the **AuditLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AuditLogs
    * const auditLogs = await prisma.auditLog.findMany()
    * ```
    */
  get auditLog(): Prisma.AuditLogDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.regionalWorkflow`: Exposes CRUD operations for the **RegionalWorkflow** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RegionalWorkflows
    * const regionalWorkflows = await prisma.regionalWorkflow.findMany()
    * ```
    */
  get regionalWorkflow(): Prisma.RegionalWorkflowDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.8.2
   * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    UserLocation: 'UserLocation',
    Agent: 'Agent',
    DepartmentMunicipalAdmin: 'DepartmentMunicipalAdmin',
    SuperMunicipalAdmin: 'SuperMunicipalAdmin',
    DepartmentStateAdmin: 'DepartmentStateAdmin',
    SuperStateAdmin: 'SuperStateAdmin',
    SuperAdmin: 'SuperAdmin',
    Category: 'Category',
    Complaint: 'Complaint',
    ComplaintLocation: 'ComplaintLocation',
    Upvote: 'Upvote',
    NewsUpdate: 'NewsUpdate',
    AuditLog: 'AuditLog',
    RegionalWorkflow: 'RegionalWorkflow'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "userLocation" | "agent" | "departmentMunicipalAdmin" | "superMunicipalAdmin" | "departmentStateAdmin" | "superStateAdmin" | "superAdmin" | "category" | "complaint" | "complaintLocation" | "upvote" | "newsUpdate" | "auditLog" | "regionalWorkflow"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      UserLocation: {
        payload: Prisma.$UserLocationPayload<ExtArgs>
        fields: Prisma.UserLocationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserLocationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLocationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserLocationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLocationPayload>
          }
          findFirst: {
            args: Prisma.UserLocationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLocationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserLocationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLocationPayload>
          }
          findMany: {
            args: Prisma.UserLocationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLocationPayload>[]
          }
          create: {
            args: Prisma.UserLocationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLocationPayload>
          }
          createMany: {
            args: Prisma.UserLocationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserLocationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLocationPayload>[]
          }
          delete: {
            args: Prisma.UserLocationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLocationPayload>
          }
          update: {
            args: Prisma.UserLocationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLocationPayload>
          }
          deleteMany: {
            args: Prisma.UserLocationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserLocationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserLocationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLocationPayload>[]
          }
          upsert: {
            args: Prisma.UserLocationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLocationPayload>
          }
          aggregate: {
            args: Prisma.UserLocationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserLocation>
          }
          groupBy: {
            args: Prisma.UserLocationGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserLocationGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserLocationCountArgs<ExtArgs>
            result: $Utils.Optional<UserLocationCountAggregateOutputType> | number
          }
        }
      }
      Agent: {
        payload: Prisma.$AgentPayload<ExtArgs>
        fields: Prisma.AgentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AgentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AgentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentPayload>
          }
          findFirst: {
            args: Prisma.AgentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AgentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentPayload>
          }
          findMany: {
            args: Prisma.AgentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentPayload>[]
          }
          create: {
            args: Prisma.AgentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentPayload>
          }
          createMany: {
            args: Prisma.AgentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AgentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentPayload>[]
          }
          delete: {
            args: Prisma.AgentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentPayload>
          }
          update: {
            args: Prisma.AgentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentPayload>
          }
          deleteMany: {
            args: Prisma.AgentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AgentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AgentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentPayload>[]
          }
          upsert: {
            args: Prisma.AgentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentPayload>
          }
          aggregate: {
            args: Prisma.AgentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAgent>
          }
          groupBy: {
            args: Prisma.AgentGroupByArgs<ExtArgs>
            result: $Utils.Optional<AgentGroupByOutputType>[]
          }
          count: {
            args: Prisma.AgentCountArgs<ExtArgs>
            result: $Utils.Optional<AgentCountAggregateOutputType> | number
          }
        }
      }
      DepartmentMunicipalAdmin: {
        payload: Prisma.$DepartmentMunicipalAdminPayload<ExtArgs>
        fields: Prisma.DepartmentMunicipalAdminFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DepartmentMunicipalAdminFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentMunicipalAdminPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DepartmentMunicipalAdminFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentMunicipalAdminPayload>
          }
          findFirst: {
            args: Prisma.DepartmentMunicipalAdminFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentMunicipalAdminPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DepartmentMunicipalAdminFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentMunicipalAdminPayload>
          }
          findMany: {
            args: Prisma.DepartmentMunicipalAdminFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentMunicipalAdminPayload>[]
          }
          create: {
            args: Prisma.DepartmentMunicipalAdminCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentMunicipalAdminPayload>
          }
          createMany: {
            args: Prisma.DepartmentMunicipalAdminCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DepartmentMunicipalAdminCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentMunicipalAdminPayload>[]
          }
          delete: {
            args: Prisma.DepartmentMunicipalAdminDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentMunicipalAdminPayload>
          }
          update: {
            args: Prisma.DepartmentMunicipalAdminUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentMunicipalAdminPayload>
          }
          deleteMany: {
            args: Prisma.DepartmentMunicipalAdminDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DepartmentMunicipalAdminUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DepartmentMunicipalAdminUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentMunicipalAdminPayload>[]
          }
          upsert: {
            args: Prisma.DepartmentMunicipalAdminUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentMunicipalAdminPayload>
          }
          aggregate: {
            args: Prisma.DepartmentMunicipalAdminAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDepartmentMunicipalAdmin>
          }
          groupBy: {
            args: Prisma.DepartmentMunicipalAdminGroupByArgs<ExtArgs>
            result: $Utils.Optional<DepartmentMunicipalAdminGroupByOutputType>[]
          }
          count: {
            args: Prisma.DepartmentMunicipalAdminCountArgs<ExtArgs>
            result: $Utils.Optional<DepartmentMunicipalAdminCountAggregateOutputType> | number
          }
        }
      }
      SuperMunicipalAdmin: {
        payload: Prisma.$SuperMunicipalAdminPayload<ExtArgs>
        fields: Prisma.SuperMunicipalAdminFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SuperMunicipalAdminFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SuperMunicipalAdminPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SuperMunicipalAdminFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SuperMunicipalAdminPayload>
          }
          findFirst: {
            args: Prisma.SuperMunicipalAdminFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SuperMunicipalAdminPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SuperMunicipalAdminFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SuperMunicipalAdminPayload>
          }
          findMany: {
            args: Prisma.SuperMunicipalAdminFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SuperMunicipalAdminPayload>[]
          }
          create: {
            args: Prisma.SuperMunicipalAdminCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SuperMunicipalAdminPayload>
          }
          createMany: {
            args: Prisma.SuperMunicipalAdminCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SuperMunicipalAdminCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SuperMunicipalAdminPayload>[]
          }
          delete: {
            args: Prisma.SuperMunicipalAdminDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SuperMunicipalAdminPayload>
          }
          update: {
            args: Prisma.SuperMunicipalAdminUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SuperMunicipalAdminPayload>
          }
          deleteMany: {
            args: Prisma.SuperMunicipalAdminDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SuperMunicipalAdminUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SuperMunicipalAdminUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SuperMunicipalAdminPayload>[]
          }
          upsert: {
            args: Prisma.SuperMunicipalAdminUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SuperMunicipalAdminPayload>
          }
          aggregate: {
            args: Prisma.SuperMunicipalAdminAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSuperMunicipalAdmin>
          }
          groupBy: {
            args: Prisma.SuperMunicipalAdminGroupByArgs<ExtArgs>
            result: $Utils.Optional<SuperMunicipalAdminGroupByOutputType>[]
          }
          count: {
            args: Prisma.SuperMunicipalAdminCountArgs<ExtArgs>
            result: $Utils.Optional<SuperMunicipalAdminCountAggregateOutputType> | number
          }
        }
      }
      DepartmentStateAdmin: {
        payload: Prisma.$DepartmentStateAdminPayload<ExtArgs>
        fields: Prisma.DepartmentStateAdminFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DepartmentStateAdminFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentStateAdminPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DepartmentStateAdminFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentStateAdminPayload>
          }
          findFirst: {
            args: Prisma.DepartmentStateAdminFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentStateAdminPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DepartmentStateAdminFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentStateAdminPayload>
          }
          findMany: {
            args: Prisma.DepartmentStateAdminFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentStateAdminPayload>[]
          }
          create: {
            args: Prisma.DepartmentStateAdminCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentStateAdminPayload>
          }
          createMany: {
            args: Prisma.DepartmentStateAdminCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DepartmentStateAdminCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentStateAdminPayload>[]
          }
          delete: {
            args: Prisma.DepartmentStateAdminDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentStateAdminPayload>
          }
          update: {
            args: Prisma.DepartmentStateAdminUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentStateAdminPayload>
          }
          deleteMany: {
            args: Prisma.DepartmentStateAdminDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DepartmentStateAdminUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DepartmentStateAdminUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentStateAdminPayload>[]
          }
          upsert: {
            args: Prisma.DepartmentStateAdminUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentStateAdminPayload>
          }
          aggregate: {
            args: Prisma.DepartmentStateAdminAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDepartmentStateAdmin>
          }
          groupBy: {
            args: Prisma.DepartmentStateAdminGroupByArgs<ExtArgs>
            result: $Utils.Optional<DepartmentStateAdminGroupByOutputType>[]
          }
          count: {
            args: Prisma.DepartmentStateAdminCountArgs<ExtArgs>
            result: $Utils.Optional<DepartmentStateAdminCountAggregateOutputType> | number
          }
        }
      }
      SuperStateAdmin: {
        payload: Prisma.$SuperStateAdminPayload<ExtArgs>
        fields: Prisma.SuperStateAdminFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SuperStateAdminFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SuperStateAdminPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SuperStateAdminFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SuperStateAdminPayload>
          }
          findFirst: {
            args: Prisma.SuperStateAdminFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SuperStateAdminPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SuperStateAdminFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SuperStateAdminPayload>
          }
          findMany: {
            args: Prisma.SuperStateAdminFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SuperStateAdminPayload>[]
          }
          create: {
            args: Prisma.SuperStateAdminCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SuperStateAdminPayload>
          }
          createMany: {
            args: Prisma.SuperStateAdminCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SuperStateAdminCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SuperStateAdminPayload>[]
          }
          delete: {
            args: Prisma.SuperStateAdminDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SuperStateAdminPayload>
          }
          update: {
            args: Prisma.SuperStateAdminUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SuperStateAdminPayload>
          }
          deleteMany: {
            args: Prisma.SuperStateAdminDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SuperStateAdminUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SuperStateAdminUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SuperStateAdminPayload>[]
          }
          upsert: {
            args: Prisma.SuperStateAdminUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SuperStateAdminPayload>
          }
          aggregate: {
            args: Prisma.SuperStateAdminAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSuperStateAdmin>
          }
          groupBy: {
            args: Prisma.SuperStateAdminGroupByArgs<ExtArgs>
            result: $Utils.Optional<SuperStateAdminGroupByOutputType>[]
          }
          count: {
            args: Prisma.SuperStateAdminCountArgs<ExtArgs>
            result: $Utils.Optional<SuperStateAdminCountAggregateOutputType> | number
          }
        }
      }
      SuperAdmin: {
        payload: Prisma.$SuperAdminPayload<ExtArgs>
        fields: Prisma.SuperAdminFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SuperAdminFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SuperAdminPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SuperAdminFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SuperAdminPayload>
          }
          findFirst: {
            args: Prisma.SuperAdminFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SuperAdminPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SuperAdminFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SuperAdminPayload>
          }
          findMany: {
            args: Prisma.SuperAdminFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SuperAdminPayload>[]
          }
          create: {
            args: Prisma.SuperAdminCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SuperAdminPayload>
          }
          createMany: {
            args: Prisma.SuperAdminCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SuperAdminCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SuperAdminPayload>[]
          }
          delete: {
            args: Prisma.SuperAdminDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SuperAdminPayload>
          }
          update: {
            args: Prisma.SuperAdminUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SuperAdminPayload>
          }
          deleteMany: {
            args: Prisma.SuperAdminDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SuperAdminUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SuperAdminUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SuperAdminPayload>[]
          }
          upsert: {
            args: Prisma.SuperAdminUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SuperAdminPayload>
          }
          aggregate: {
            args: Prisma.SuperAdminAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSuperAdmin>
          }
          groupBy: {
            args: Prisma.SuperAdminGroupByArgs<ExtArgs>
            result: $Utils.Optional<SuperAdminGroupByOutputType>[]
          }
          count: {
            args: Prisma.SuperAdminCountArgs<ExtArgs>
            result: $Utils.Optional<SuperAdminCountAggregateOutputType> | number
          }
        }
      }
      Category: {
        payload: Prisma.$CategoryPayload<ExtArgs>
        fields: Prisma.CategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findFirst: {
            args: Prisma.CategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findMany: {
            args: Prisma.CategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          create: {
            args: Prisma.CategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          createMany: {
            args: Prisma.CategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CategoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          delete: {
            args: Prisma.CategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          update: {
            args: Prisma.CategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          deleteMany: {
            args: Prisma.CategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CategoryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          upsert: {
            args: Prisma.CategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          aggregate: {
            args: Prisma.CategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCategory>
          }
          groupBy: {
            args: Prisma.CategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<CategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.CategoryCountArgs<ExtArgs>
            result: $Utils.Optional<CategoryCountAggregateOutputType> | number
          }
        }
      }
      Complaint: {
        payload: Prisma.$ComplaintPayload<ExtArgs>
        fields: Prisma.ComplaintFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ComplaintFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComplaintPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ComplaintFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComplaintPayload>
          }
          findFirst: {
            args: Prisma.ComplaintFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComplaintPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ComplaintFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComplaintPayload>
          }
          findMany: {
            args: Prisma.ComplaintFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComplaintPayload>[]
          }
          create: {
            args: Prisma.ComplaintCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComplaintPayload>
          }
          createMany: {
            args: Prisma.ComplaintCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ComplaintCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComplaintPayload>[]
          }
          delete: {
            args: Prisma.ComplaintDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComplaintPayload>
          }
          update: {
            args: Prisma.ComplaintUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComplaintPayload>
          }
          deleteMany: {
            args: Prisma.ComplaintDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ComplaintUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ComplaintUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComplaintPayload>[]
          }
          upsert: {
            args: Prisma.ComplaintUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComplaintPayload>
          }
          aggregate: {
            args: Prisma.ComplaintAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateComplaint>
          }
          groupBy: {
            args: Prisma.ComplaintGroupByArgs<ExtArgs>
            result: $Utils.Optional<ComplaintGroupByOutputType>[]
          }
          count: {
            args: Prisma.ComplaintCountArgs<ExtArgs>
            result: $Utils.Optional<ComplaintCountAggregateOutputType> | number
          }
        }
      }
      ComplaintLocation: {
        payload: Prisma.$ComplaintLocationPayload<ExtArgs>
        fields: Prisma.ComplaintLocationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ComplaintLocationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComplaintLocationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ComplaintLocationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComplaintLocationPayload>
          }
          findFirst: {
            args: Prisma.ComplaintLocationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComplaintLocationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ComplaintLocationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComplaintLocationPayload>
          }
          findMany: {
            args: Prisma.ComplaintLocationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComplaintLocationPayload>[]
          }
          create: {
            args: Prisma.ComplaintLocationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComplaintLocationPayload>
          }
          createMany: {
            args: Prisma.ComplaintLocationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ComplaintLocationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComplaintLocationPayload>[]
          }
          delete: {
            args: Prisma.ComplaintLocationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComplaintLocationPayload>
          }
          update: {
            args: Prisma.ComplaintLocationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComplaintLocationPayload>
          }
          deleteMany: {
            args: Prisma.ComplaintLocationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ComplaintLocationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ComplaintLocationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComplaintLocationPayload>[]
          }
          upsert: {
            args: Prisma.ComplaintLocationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComplaintLocationPayload>
          }
          aggregate: {
            args: Prisma.ComplaintLocationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateComplaintLocation>
          }
          groupBy: {
            args: Prisma.ComplaintLocationGroupByArgs<ExtArgs>
            result: $Utils.Optional<ComplaintLocationGroupByOutputType>[]
          }
          count: {
            args: Prisma.ComplaintLocationCountArgs<ExtArgs>
            result: $Utils.Optional<ComplaintLocationCountAggregateOutputType> | number
          }
        }
      }
      Upvote: {
        payload: Prisma.$UpvotePayload<ExtArgs>
        fields: Prisma.UpvoteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UpvoteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UpvotePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UpvoteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UpvotePayload>
          }
          findFirst: {
            args: Prisma.UpvoteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UpvotePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UpvoteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UpvotePayload>
          }
          findMany: {
            args: Prisma.UpvoteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UpvotePayload>[]
          }
          create: {
            args: Prisma.UpvoteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UpvotePayload>
          }
          createMany: {
            args: Prisma.UpvoteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UpvoteCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UpvotePayload>[]
          }
          delete: {
            args: Prisma.UpvoteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UpvotePayload>
          }
          update: {
            args: Prisma.UpvoteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UpvotePayload>
          }
          deleteMany: {
            args: Prisma.UpvoteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UpvoteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UpvoteUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UpvotePayload>[]
          }
          upsert: {
            args: Prisma.UpvoteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UpvotePayload>
          }
          aggregate: {
            args: Prisma.UpvoteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUpvote>
          }
          groupBy: {
            args: Prisma.UpvoteGroupByArgs<ExtArgs>
            result: $Utils.Optional<UpvoteGroupByOutputType>[]
          }
          count: {
            args: Prisma.UpvoteCountArgs<ExtArgs>
            result: $Utils.Optional<UpvoteCountAggregateOutputType> | number
          }
        }
      }
      NewsUpdate: {
        payload: Prisma.$NewsUpdatePayload<ExtArgs>
        fields: Prisma.NewsUpdateFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NewsUpdateFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsUpdatePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NewsUpdateFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsUpdatePayload>
          }
          findFirst: {
            args: Prisma.NewsUpdateFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsUpdatePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NewsUpdateFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsUpdatePayload>
          }
          findMany: {
            args: Prisma.NewsUpdateFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsUpdatePayload>[]
          }
          create: {
            args: Prisma.NewsUpdateCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsUpdatePayload>
          }
          createMany: {
            args: Prisma.NewsUpdateCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NewsUpdateCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsUpdatePayload>[]
          }
          delete: {
            args: Prisma.NewsUpdateDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsUpdatePayload>
          }
          update: {
            args: Prisma.NewsUpdateUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsUpdatePayload>
          }
          deleteMany: {
            args: Prisma.NewsUpdateDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NewsUpdateUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.NewsUpdateUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsUpdatePayload>[]
          }
          upsert: {
            args: Prisma.NewsUpdateUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsUpdatePayload>
          }
          aggregate: {
            args: Prisma.NewsUpdateAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNewsUpdate>
          }
          groupBy: {
            args: Prisma.NewsUpdateGroupByArgs<ExtArgs>
            result: $Utils.Optional<NewsUpdateGroupByOutputType>[]
          }
          count: {
            args: Prisma.NewsUpdateCountArgs<ExtArgs>
            result: $Utils.Optional<NewsUpdateCountAggregateOutputType> | number
          }
        }
      }
      AuditLog: {
        payload: Prisma.$AuditLogPayload<ExtArgs>
        fields: Prisma.AuditLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AuditLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AuditLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findFirst: {
            args: Prisma.AuditLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AuditLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findMany: {
            args: Prisma.AuditLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          create: {
            args: Prisma.AuditLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          createMany: {
            args: Prisma.AuditLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AuditLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          delete: {
            args: Prisma.AuditLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          update: {
            args: Prisma.AuditLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          deleteMany: {
            args: Prisma.AuditLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AuditLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AuditLogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          upsert: {
            args: Prisma.AuditLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          aggregate: {
            args: Prisma.AuditLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAuditLog>
          }
          groupBy: {
            args: Prisma.AuditLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<AuditLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.AuditLogCountArgs<ExtArgs>
            result: $Utils.Optional<AuditLogCountAggregateOutputType> | number
          }
        }
      }
      RegionalWorkflow: {
        payload: Prisma.$RegionalWorkflowPayload<ExtArgs>
        fields: Prisma.RegionalWorkflowFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RegionalWorkflowFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionalWorkflowPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RegionalWorkflowFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionalWorkflowPayload>
          }
          findFirst: {
            args: Prisma.RegionalWorkflowFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionalWorkflowPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RegionalWorkflowFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionalWorkflowPayload>
          }
          findMany: {
            args: Prisma.RegionalWorkflowFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionalWorkflowPayload>[]
          }
          create: {
            args: Prisma.RegionalWorkflowCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionalWorkflowPayload>
          }
          createMany: {
            args: Prisma.RegionalWorkflowCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RegionalWorkflowCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionalWorkflowPayload>[]
          }
          delete: {
            args: Prisma.RegionalWorkflowDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionalWorkflowPayload>
          }
          update: {
            args: Prisma.RegionalWorkflowUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionalWorkflowPayload>
          }
          deleteMany: {
            args: Prisma.RegionalWorkflowDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RegionalWorkflowUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RegionalWorkflowUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionalWorkflowPayload>[]
          }
          upsert: {
            args: Prisma.RegionalWorkflowUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionalWorkflowPayload>
          }
          aggregate: {
            args: Prisma.RegionalWorkflowAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRegionalWorkflow>
          }
          groupBy: {
            args: Prisma.RegionalWorkflowGroupByArgs<ExtArgs>
            result: $Utils.Optional<RegionalWorkflowGroupByOutputType>[]
          }
          count: {
            args: Prisma.RegionalWorkflowCountArgs<ExtArgs>
            result: $Utils.Optional<RegionalWorkflowCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    userLocation?: UserLocationOmit
    agent?: AgentOmit
    departmentMunicipalAdmin?: DepartmentMunicipalAdminOmit
    superMunicipalAdmin?: SuperMunicipalAdminOmit
    departmentStateAdmin?: DepartmentStateAdminOmit
    superStateAdmin?: SuperStateAdminOmit
    superAdmin?: SuperAdminOmit
    category?: CategoryOmit
    complaint?: ComplaintOmit
    complaintLocation?: ComplaintLocationOmit
    upvote?: UpvoteOmit
    newsUpdate?: NewsUpdateOmit
    auditLog?: AuditLogOmit
    regionalWorkflow?: RegionalWorkflowOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    complaints: number
    upvotes: number
    auditLogsCreated: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    complaints?: boolean | UserCountOutputTypeCountComplaintsArgs
    upvotes?: boolean | UserCountOutputTypeCountUpvotesArgs
    auditLogsCreated?: boolean | UserCountOutputTypeCountAuditLogsCreatedArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountComplaintsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ComplaintWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUpvotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UpvoteWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAuditLogsCreatedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
  }


  /**
   * Count Type AgentCountOutputType
   */

  export type AgentCountOutputType = {
    assignedComplaints: number
    coAssignedComplaints: number
  }

  export type AgentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignedComplaints?: boolean | AgentCountOutputTypeCountAssignedComplaintsArgs
    coAssignedComplaints?: boolean | AgentCountOutputTypeCountCoAssignedComplaintsArgs
  }

  // Custom InputTypes
  /**
   * AgentCountOutputType without action
   */
  export type AgentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentCountOutputType
     */
    select?: AgentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AgentCountOutputType without action
   */
  export type AgentCountOutputTypeCountAssignedComplaintsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ComplaintWhereInput
  }

  /**
   * AgentCountOutputType without action
   */
  export type AgentCountOutputTypeCountCoAssignedComplaintsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ComplaintWhereInput
  }


  /**
   * Count Type DepartmentMunicipalAdminCountOutputType
   */

  export type DepartmentMunicipalAdminCountOutputType = {
    managedAgents: number
    managedComplaints: number
    communityModeration: number
    newsUpdates: number
  }

  export type DepartmentMunicipalAdminCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    managedAgents?: boolean | DepartmentMunicipalAdminCountOutputTypeCountManagedAgentsArgs
    managedComplaints?: boolean | DepartmentMunicipalAdminCountOutputTypeCountManagedComplaintsArgs
    communityModeration?: boolean | DepartmentMunicipalAdminCountOutputTypeCountCommunityModerationArgs
    newsUpdates?: boolean | DepartmentMunicipalAdminCountOutputTypeCountNewsUpdatesArgs
  }

  // Custom InputTypes
  /**
   * DepartmentMunicipalAdminCountOutputType without action
   */
  export type DepartmentMunicipalAdminCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentMunicipalAdminCountOutputType
     */
    select?: DepartmentMunicipalAdminCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DepartmentMunicipalAdminCountOutputType without action
   */
  export type DepartmentMunicipalAdminCountOutputTypeCountManagedAgentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AgentWhereInput
  }

  /**
   * DepartmentMunicipalAdminCountOutputType without action
   */
  export type DepartmentMunicipalAdminCountOutputTypeCountManagedComplaintsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ComplaintWhereInput
  }

  /**
   * DepartmentMunicipalAdminCountOutputType without action
   */
  export type DepartmentMunicipalAdminCountOutputTypeCountCommunityModerationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ComplaintWhereInput
  }

  /**
   * DepartmentMunicipalAdminCountOutputType without action
   */
  export type DepartmentMunicipalAdminCountOutputTypeCountNewsUpdatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NewsUpdateWhereInput
  }


  /**
   * Count Type SuperMunicipalAdminCountOutputType
   */

  export type SuperMunicipalAdminCountOutputType = {
    managedDepartmentAdmins: number
    crossDepartmentIssues: number
  }

  export type SuperMunicipalAdminCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    managedDepartmentAdmins?: boolean | SuperMunicipalAdminCountOutputTypeCountManagedDepartmentAdminsArgs
    crossDepartmentIssues?: boolean | SuperMunicipalAdminCountOutputTypeCountCrossDepartmentIssuesArgs
  }

  // Custom InputTypes
  /**
   * SuperMunicipalAdminCountOutputType without action
   */
  export type SuperMunicipalAdminCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuperMunicipalAdminCountOutputType
     */
    select?: SuperMunicipalAdminCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SuperMunicipalAdminCountOutputType without action
   */
  export type SuperMunicipalAdminCountOutputTypeCountManagedDepartmentAdminsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepartmentMunicipalAdminWhereInput
  }

  /**
   * SuperMunicipalAdminCountOutputType without action
   */
  export type SuperMunicipalAdminCountOutputTypeCountCrossDepartmentIssuesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ComplaintWhereInput
  }


  /**
   * Count Type DepartmentStateAdminCountOutputType
   */

  export type DepartmentStateAdminCountOutputType = {
    managedMunicipalAdmins: number
    escalatedComplaints: number
    regionalWorkflows: number
    managedCategories: number
  }

  export type DepartmentStateAdminCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    managedMunicipalAdmins?: boolean | DepartmentStateAdminCountOutputTypeCountManagedMunicipalAdminsArgs
    escalatedComplaints?: boolean | DepartmentStateAdminCountOutputTypeCountEscalatedComplaintsArgs
    regionalWorkflows?: boolean | DepartmentStateAdminCountOutputTypeCountRegionalWorkflowsArgs
    managedCategories?: boolean | DepartmentStateAdminCountOutputTypeCountManagedCategoriesArgs
  }

  // Custom InputTypes
  /**
   * DepartmentStateAdminCountOutputType without action
   */
  export type DepartmentStateAdminCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentStateAdminCountOutputType
     */
    select?: DepartmentStateAdminCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DepartmentStateAdminCountOutputType without action
   */
  export type DepartmentStateAdminCountOutputTypeCountManagedMunicipalAdminsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepartmentMunicipalAdminWhereInput
  }

  /**
   * DepartmentStateAdminCountOutputType without action
   */
  export type DepartmentStateAdminCountOutputTypeCountEscalatedComplaintsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ComplaintWhereInput
  }

  /**
   * DepartmentStateAdminCountOutputType without action
   */
  export type DepartmentStateAdminCountOutputTypeCountRegionalWorkflowsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RegionalWorkflowWhereInput
  }

  /**
   * DepartmentStateAdminCountOutputType without action
   */
  export type DepartmentStateAdminCountOutputTypeCountManagedCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
  }


  /**
   * Count Type SuperStateAdminCountOutputType
   */

  export type SuperStateAdminCountOutputType = {
    managedDepartmentAdmins: number
    managedSuperMunicipalAdmins: number
    escalatedComplaints: number
  }

  export type SuperStateAdminCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    managedDepartmentAdmins?: boolean | SuperStateAdminCountOutputTypeCountManagedDepartmentAdminsArgs
    managedSuperMunicipalAdmins?: boolean | SuperStateAdminCountOutputTypeCountManagedSuperMunicipalAdminsArgs
    escalatedComplaints?: boolean | SuperStateAdminCountOutputTypeCountEscalatedComplaintsArgs
  }

  // Custom InputTypes
  /**
   * SuperStateAdminCountOutputType without action
   */
  export type SuperStateAdminCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuperStateAdminCountOutputType
     */
    select?: SuperStateAdminCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SuperStateAdminCountOutputType without action
   */
  export type SuperStateAdminCountOutputTypeCountManagedDepartmentAdminsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepartmentStateAdminWhereInput
  }

  /**
   * SuperStateAdminCountOutputType without action
   */
  export type SuperStateAdminCountOutputTypeCountManagedSuperMunicipalAdminsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SuperMunicipalAdminWhereInput
  }

  /**
   * SuperStateAdminCountOutputType without action
   */
  export type SuperStateAdminCountOutputTypeCountEscalatedComplaintsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ComplaintWhereInput
  }


  /**
   * Count Type SuperAdminCountOutputType
   */

  export type SuperAdminCountOutputType = {
    managedCategories: number
    managedSuperStateAdmins: number
    managedComplaints: number
  }

  export type SuperAdminCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    managedCategories?: boolean | SuperAdminCountOutputTypeCountManagedCategoriesArgs
    managedSuperStateAdmins?: boolean | SuperAdminCountOutputTypeCountManagedSuperStateAdminsArgs
    managedComplaints?: boolean | SuperAdminCountOutputTypeCountManagedComplaintsArgs
  }

  // Custom InputTypes
  /**
   * SuperAdminCountOutputType without action
   */
  export type SuperAdminCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuperAdminCountOutputType
     */
    select?: SuperAdminCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SuperAdminCountOutputType without action
   */
  export type SuperAdminCountOutputTypeCountManagedCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
  }

  /**
   * SuperAdminCountOutputType without action
   */
  export type SuperAdminCountOutputTypeCountManagedSuperStateAdminsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SuperStateAdminWhereInput
  }

  /**
   * SuperAdminCountOutputType without action
   */
  export type SuperAdminCountOutputTypeCountManagedComplaintsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ComplaintWhereInput
  }


  /**
   * Count Type CategoryCountOutputType
   */

  export type CategoryCountOutputType = {
    complaints: number
  }

  export type CategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    complaints?: boolean | CategoryCountOutputTypeCountComplaintsArgs
  }

  // Custom InputTypes
  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryCountOutputType
     */
    select?: CategoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountComplaintsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ComplaintWhereInput
  }


  /**
   * Count Type ComplaintCountOutputType
   */

  export type ComplaintCountOutputType = {
    coAssignedAgents: number
    upvotes: number
    auditLogs: number
  }

  export type ComplaintCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    coAssignedAgents?: boolean | ComplaintCountOutputTypeCountCoAssignedAgentsArgs
    upvotes?: boolean | ComplaintCountOutputTypeCountUpvotesArgs
    auditLogs?: boolean | ComplaintCountOutputTypeCountAuditLogsArgs
  }

  // Custom InputTypes
  /**
   * ComplaintCountOutputType without action
   */
  export type ComplaintCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComplaintCountOutputType
     */
    select?: ComplaintCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ComplaintCountOutputType without action
   */
  export type ComplaintCountOutputTypeCountCoAssignedAgentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AgentWhereInput
  }

  /**
   * ComplaintCountOutputType without action
   */
  export type ComplaintCountOutputTypeCountUpvotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UpvoteWhereInput
  }

  /**
   * ComplaintCountOutputType without action
   */
  export type ComplaintCountOutputTypeCountAuditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    phoneNumber: string | null
    dateOfBirth: Date | null
    password: string | null
    aadhaarId: string | null
    preferredLanguage: string | null
    disability: string | null
    consentDataCollection: boolean | null
    dateOfCreation: Date | null
    lastUpdated: Date | null
    status: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    phoneNumber: string | null
    dateOfBirth: Date | null
    password: string | null
    aadhaarId: string | null
    preferredLanguage: string | null
    disability: string | null
    consentDataCollection: boolean | null
    dateOfCreation: Date | null
    lastUpdated: Date | null
    status: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    name: number
    phoneNumber: number
    dateOfBirth: number
    password: number
    aadhaarId: number
    preferredLanguage: number
    disability: number
    consentDataCollection: number
    dateOfCreation: number
    lastUpdated: number
    status: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    name?: true
    phoneNumber?: true
    dateOfBirth?: true
    password?: true
    aadhaarId?: true
    preferredLanguage?: true
    disability?: true
    consentDataCollection?: true
    dateOfCreation?: true
    lastUpdated?: true
    status?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    name?: true
    phoneNumber?: true
    dateOfBirth?: true
    password?: true
    aadhaarId?: true
    preferredLanguage?: true
    disability?: true
    consentDataCollection?: true
    dateOfCreation?: true
    lastUpdated?: true
    status?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    name?: true
    phoneNumber?: true
    dateOfBirth?: true
    password?: true
    aadhaarId?: true
    preferredLanguage?: true
    disability?: true
    consentDataCollection?: true
    dateOfCreation?: true
    lastUpdated?: true
    status?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    name: string
    phoneNumber: string
    dateOfBirth: Date
    password: string
    aadhaarId: string
    preferredLanguage: string
    disability: string | null
    consentDataCollection: boolean
    dateOfCreation: Date
    lastUpdated: Date
    status: string
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    phoneNumber?: boolean
    dateOfBirth?: boolean
    password?: boolean
    aadhaarId?: boolean
    preferredLanguage?: boolean
    disability?: boolean
    consentDataCollection?: boolean
    dateOfCreation?: boolean
    lastUpdated?: boolean
    status?: boolean
    location?: boolean | User$locationArgs<ExtArgs>
    complaints?: boolean | User$complaintsArgs<ExtArgs>
    upvotes?: boolean | User$upvotesArgs<ExtArgs>
    auditLogsCreated?: boolean | User$auditLogsCreatedArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    phoneNumber?: boolean
    dateOfBirth?: boolean
    password?: boolean
    aadhaarId?: boolean
    preferredLanguage?: boolean
    disability?: boolean
    consentDataCollection?: boolean
    dateOfCreation?: boolean
    lastUpdated?: boolean
    status?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    phoneNumber?: boolean
    dateOfBirth?: boolean
    password?: boolean
    aadhaarId?: boolean
    preferredLanguage?: boolean
    disability?: boolean
    consentDataCollection?: boolean
    dateOfCreation?: boolean
    lastUpdated?: boolean
    status?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    name?: boolean
    phoneNumber?: boolean
    dateOfBirth?: boolean
    password?: boolean
    aadhaarId?: boolean
    preferredLanguage?: boolean
    disability?: boolean
    consentDataCollection?: boolean
    dateOfCreation?: boolean
    lastUpdated?: boolean
    status?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "name" | "phoneNumber" | "dateOfBirth" | "password" | "aadhaarId" | "preferredLanguage" | "disability" | "consentDataCollection" | "dateOfCreation" | "lastUpdated" | "status", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    location?: boolean | User$locationArgs<ExtArgs>
    complaints?: boolean | User$complaintsArgs<ExtArgs>
    upvotes?: boolean | User$upvotesArgs<ExtArgs>
    auditLogsCreated?: boolean | User$auditLogsCreatedArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      location: Prisma.$UserLocationPayload<ExtArgs> | null
      complaints: Prisma.$ComplaintPayload<ExtArgs>[]
      upvotes: Prisma.$UpvotePayload<ExtArgs>[]
      auditLogsCreated: Prisma.$AuditLogPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      name: string
      phoneNumber: string
      dateOfBirth: Date
      password: string
      aadhaarId: string
      preferredLanguage: string
      disability: string | null
      consentDataCollection: boolean
      dateOfCreation: Date
      lastUpdated: Date
      status: string
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    location<T extends User$locationArgs<ExtArgs> = {}>(args?: Subset<T, User$locationArgs<ExtArgs>>): Prisma__UserLocationClient<$Result.GetResult<Prisma.$UserLocationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    complaints<T extends User$complaintsArgs<ExtArgs> = {}>(args?: Subset<T, User$complaintsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComplaintPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    upvotes<T extends User$upvotesArgs<ExtArgs> = {}>(args?: Subset<T, User$upvotesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UpvotePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    auditLogsCreated<T extends User$auditLogsCreatedArgs<ExtArgs> = {}>(args?: Subset<T, User$auditLogsCreatedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly phoneNumber: FieldRef<"User", 'String'>
    readonly dateOfBirth: FieldRef<"User", 'DateTime'>
    readonly password: FieldRef<"User", 'String'>
    readonly aadhaarId: FieldRef<"User", 'String'>
    readonly preferredLanguage: FieldRef<"User", 'String'>
    readonly disability: FieldRef<"User", 'String'>
    readonly consentDataCollection: FieldRef<"User", 'Boolean'>
    readonly dateOfCreation: FieldRef<"User", 'DateTime'>
    readonly lastUpdated: FieldRef<"User", 'DateTime'>
    readonly status: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.location
   */
  export type User$locationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLocation
     */
    select?: UserLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserLocation
     */
    omit?: UserLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLocationInclude<ExtArgs> | null
    where?: UserLocationWhereInput
  }

  /**
   * User.complaints
   */
  export type User$complaintsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Complaint
     */
    select?: ComplaintSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Complaint
     */
    omit?: ComplaintOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintInclude<ExtArgs> | null
    where?: ComplaintWhereInput
    orderBy?: ComplaintOrderByWithRelationInput | ComplaintOrderByWithRelationInput[]
    cursor?: ComplaintWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ComplaintScalarFieldEnum | ComplaintScalarFieldEnum[]
  }

  /**
   * User.upvotes
   */
  export type User$upvotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Upvote
     */
    select?: UpvoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Upvote
     */
    omit?: UpvoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UpvoteInclude<ExtArgs> | null
    where?: UpvoteWhereInput
    orderBy?: UpvoteOrderByWithRelationInput | UpvoteOrderByWithRelationInput[]
    cursor?: UpvoteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UpvoteScalarFieldEnum | UpvoteScalarFieldEnum[]
  }

  /**
   * User.auditLogsCreated
   */
  export type User$auditLogsCreatedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    cursor?: AuditLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model UserLocation
   */

  export type AggregateUserLocation = {
    _count: UserLocationCountAggregateOutputType | null
    _min: UserLocationMinAggregateOutputType | null
    _max: UserLocationMaxAggregateOutputType | null
  }

  export type UserLocationMinAggregateOutputType = {
    id: string | null
    userId: string | null
    pin: string | null
    district: string | null
    city: string | null
    locality: string | null
    street: string | null
    municipal: string | null
  }

  export type UserLocationMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    pin: string | null
    district: string | null
    city: string | null
    locality: string | null
    street: string | null
    municipal: string | null
  }

  export type UserLocationCountAggregateOutputType = {
    id: number
    userId: number
    pin: number
    district: number
    city: number
    locality: number
    street: number
    municipal: number
    _all: number
  }


  export type UserLocationMinAggregateInputType = {
    id?: true
    userId?: true
    pin?: true
    district?: true
    city?: true
    locality?: true
    street?: true
    municipal?: true
  }

  export type UserLocationMaxAggregateInputType = {
    id?: true
    userId?: true
    pin?: true
    district?: true
    city?: true
    locality?: true
    street?: true
    municipal?: true
  }

  export type UserLocationCountAggregateInputType = {
    id?: true
    userId?: true
    pin?: true
    district?: true
    city?: true
    locality?: true
    street?: true
    municipal?: true
    _all?: true
  }

  export type UserLocationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserLocation to aggregate.
     */
    where?: UserLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserLocations to fetch.
     */
    orderBy?: UserLocationOrderByWithRelationInput | UserLocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserLocations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserLocations
    **/
    _count?: true | UserLocationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserLocationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserLocationMaxAggregateInputType
  }

  export type GetUserLocationAggregateType<T extends UserLocationAggregateArgs> = {
        [P in keyof T & keyof AggregateUserLocation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserLocation[P]>
      : GetScalarType<T[P], AggregateUserLocation[P]>
  }




  export type UserLocationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserLocationWhereInput
    orderBy?: UserLocationOrderByWithAggregationInput | UserLocationOrderByWithAggregationInput[]
    by: UserLocationScalarFieldEnum[] | UserLocationScalarFieldEnum
    having?: UserLocationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserLocationCountAggregateInputType | true
    _min?: UserLocationMinAggregateInputType
    _max?: UserLocationMaxAggregateInputType
  }

  export type UserLocationGroupByOutputType = {
    id: string
    userId: string
    pin: string
    district: string
    city: string
    locality: string
    street: string
    municipal: string
    _count: UserLocationCountAggregateOutputType | null
    _min: UserLocationMinAggregateOutputType | null
    _max: UserLocationMaxAggregateOutputType | null
  }

  type GetUserLocationGroupByPayload<T extends UserLocationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserLocationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserLocationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserLocationGroupByOutputType[P]>
            : GetScalarType<T[P], UserLocationGroupByOutputType[P]>
        }
      >
    >


  export type UserLocationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    pin?: boolean
    district?: boolean
    city?: boolean
    locality?: boolean
    street?: boolean
    municipal?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userLocation"]>

  export type UserLocationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    pin?: boolean
    district?: boolean
    city?: boolean
    locality?: boolean
    street?: boolean
    municipal?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userLocation"]>

  export type UserLocationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    pin?: boolean
    district?: boolean
    city?: boolean
    locality?: boolean
    street?: boolean
    municipal?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userLocation"]>

  export type UserLocationSelectScalar = {
    id?: boolean
    userId?: boolean
    pin?: boolean
    district?: boolean
    city?: boolean
    locality?: boolean
    street?: boolean
    municipal?: boolean
  }

  export type UserLocationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "pin" | "district" | "city" | "locality" | "street" | "municipal", ExtArgs["result"]["userLocation"]>
  export type UserLocationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserLocationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserLocationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserLocationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserLocation"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      pin: string
      district: string
      city: string
      locality: string
      street: string
      municipal: string
    }, ExtArgs["result"]["userLocation"]>
    composites: {}
  }

  type UserLocationGetPayload<S extends boolean | null | undefined | UserLocationDefaultArgs> = $Result.GetResult<Prisma.$UserLocationPayload, S>

  type UserLocationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserLocationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserLocationCountAggregateInputType | true
    }

  export interface UserLocationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserLocation'], meta: { name: 'UserLocation' } }
    /**
     * Find zero or one UserLocation that matches the filter.
     * @param {UserLocationFindUniqueArgs} args - Arguments to find a UserLocation
     * @example
     * // Get one UserLocation
     * const userLocation = await prisma.userLocation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserLocationFindUniqueArgs>(args: SelectSubset<T, UserLocationFindUniqueArgs<ExtArgs>>): Prisma__UserLocationClient<$Result.GetResult<Prisma.$UserLocationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserLocation that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserLocationFindUniqueOrThrowArgs} args - Arguments to find a UserLocation
     * @example
     * // Get one UserLocation
     * const userLocation = await prisma.userLocation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserLocationFindUniqueOrThrowArgs>(args: SelectSubset<T, UserLocationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserLocationClient<$Result.GetResult<Prisma.$UserLocationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserLocation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLocationFindFirstArgs} args - Arguments to find a UserLocation
     * @example
     * // Get one UserLocation
     * const userLocation = await prisma.userLocation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserLocationFindFirstArgs>(args?: SelectSubset<T, UserLocationFindFirstArgs<ExtArgs>>): Prisma__UserLocationClient<$Result.GetResult<Prisma.$UserLocationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserLocation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLocationFindFirstOrThrowArgs} args - Arguments to find a UserLocation
     * @example
     * // Get one UserLocation
     * const userLocation = await prisma.userLocation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserLocationFindFirstOrThrowArgs>(args?: SelectSubset<T, UserLocationFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserLocationClient<$Result.GetResult<Prisma.$UserLocationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserLocations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLocationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserLocations
     * const userLocations = await prisma.userLocation.findMany()
     * 
     * // Get first 10 UserLocations
     * const userLocations = await prisma.userLocation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userLocationWithIdOnly = await prisma.userLocation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserLocationFindManyArgs>(args?: SelectSubset<T, UserLocationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserLocationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserLocation.
     * @param {UserLocationCreateArgs} args - Arguments to create a UserLocation.
     * @example
     * // Create one UserLocation
     * const UserLocation = await prisma.userLocation.create({
     *   data: {
     *     // ... data to create a UserLocation
     *   }
     * })
     * 
     */
    create<T extends UserLocationCreateArgs>(args: SelectSubset<T, UserLocationCreateArgs<ExtArgs>>): Prisma__UserLocationClient<$Result.GetResult<Prisma.$UserLocationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserLocations.
     * @param {UserLocationCreateManyArgs} args - Arguments to create many UserLocations.
     * @example
     * // Create many UserLocations
     * const userLocation = await prisma.userLocation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserLocationCreateManyArgs>(args?: SelectSubset<T, UserLocationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserLocations and returns the data saved in the database.
     * @param {UserLocationCreateManyAndReturnArgs} args - Arguments to create many UserLocations.
     * @example
     * // Create many UserLocations
     * const userLocation = await prisma.userLocation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserLocations and only return the `id`
     * const userLocationWithIdOnly = await prisma.userLocation.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserLocationCreateManyAndReturnArgs>(args?: SelectSubset<T, UserLocationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserLocationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserLocation.
     * @param {UserLocationDeleteArgs} args - Arguments to delete one UserLocation.
     * @example
     * // Delete one UserLocation
     * const UserLocation = await prisma.userLocation.delete({
     *   where: {
     *     // ... filter to delete one UserLocation
     *   }
     * })
     * 
     */
    delete<T extends UserLocationDeleteArgs>(args: SelectSubset<T, UserLocationDeleteArgs<ExtArgs>>): Prisma__UserLocationClient<$Result.GetResult<Prisma.$UserLocationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserLocation.
     * @param {UserLocationUpdateArgs} args - Arguments to update one UserLocation.
     * @example
     * // Update one UserLocation
     * const userLocation = await prisma.userLocation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserLocationUpdateArgs>(args: SelectSubset<T, UserLocationUpdateArgs<ExtArgs>>): Prisma__UserLocationClient<$Result.GetResult<Prisma.$UserLocationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserLocations.
     * @param {UserLocationDeleteManyArgs} args - Arguments to filter UserLocations to delete.
     * @example
     * // Delete a few UserLocations
     * const { count } = await prisma.userLocation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserLocationDeleteManyArgs>(args?: SelectSubset<T, UserLocationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserLocations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLocationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserLocations
     * const userLocation = await prisma.userLocation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserLocationUpdateManyArgs>(args: SelectSubset<T, UserLocationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserLocations and returns the data updated in the database.
     * @param {UserLocationUpdateManyAndReturnArgs} args - Arguments to update many UserLocations.
     * @example
     * // Update many UserLocations
     * const userLocation = await prisma.userLocation.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserLocations and only return the `id`
     * const userLocationWithIdOnly = await prisma.userLocation.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserLocationUpdateManyAndReturnArgs>(args: SelectSubset<T, UserLocationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserLocationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserLocation.
     * @param {UserLocationUpsertArgs} args - Arguments to update or create a UserLocation.
     * @example
     * // Update or create a UserLocation
     * const userLocation = await prisma.userLocation.upsert({
     *   create: {
     *     // ... data to create a UserLocation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserLocation we want to update
     *   }
     * })
     */
    upsert<T extends UserLocationUpsertArgs>(args: SelectSubset<T, UserLocationUpsertArgs<ExtArgs>>): Prisma__UserLocationClient<$Result.GetResult<Prisma.$UserLocationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserLocations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLocationCountArgs} args - Arguments to filter UserLocations to count.
     * @example
     * // Count the number of UserLocations
     * const count = await prisma.userLocation.count({
     *   where: {
     *     // ... the filter for the UserLocations we want to count
     *   }
     * })
    **/
    count<T extends UserLocationCountArgs>(
      args?: Subset<T, UserLocationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserLocationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserLocation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLocationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserLocationAggregateArgs>(args: Subset<T, UserLocationAggregateArgs>): Prisma.PrismaPromise<GetUserLocationAggregateType<T>>

    /**
     * Group by UserLocation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLocationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserLocationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserLocationGroupByArgs['orderBy'] }
        : { orderBy?: UserLocationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserLocationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserLocationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserLocation model
   */
  readonly fields: UserLocationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserLocation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserLocationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserLocation model
   */
  interface UserLocationFieldRefs {
    readonly id: FieldRef<"UserLocation", 'String'>
    readonly userId: FieldRef<"UserLocation", 'String'>
    readonly pin: FieldRef<"UserLocation", 'String'>
    readonly district: FieldRef<"UserLocation", 'String'>
    readonly city: FieldRef<"UserLocation", 'String'>
    readonly locality: FieldRef<"UserLocation", 'String'>
    readonly street: FieldRef<"UserLocation", 'String'>
    readonly municipal: FieldRef<"UserLocation", 'String'>
  }
    

  // Custom InputTypes
  /**
   * UserLocation findUnique
   */
  export type UserLocationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLocation
     */
    select?: UserLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserLocation
     */
    omit?: UserLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLocationInclude<ExtArgs> | null
    /**
     * Filter, which UserLocation to fetch.
     */
    where: UserLocationWhereUniqueInput
  }

  /**
   * UserLocation findUniqueOrThrow
   */
  export type UserLocationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLocation
     */
    select?: UserLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserLocation
     */
    omit?: UserLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLocationInclude<ExtArgs> | null
    /**
     * Filter, which UserLocation to fetch.
     */
    where: UserLocationWhereUniqueInput
  }

  /**
   * UserLocation findFirst
   */
  export type UserLocationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLocation
     */
    select?: UserLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserLocation
     */
    omit?: UserLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLocationInclude<ExtArgs> | null
    /**
     * Filter, which UserLocation to fetch.
     */
    where?: UserLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserLocations to fetch.
     */
    orderBy?: UserLocationOrderByWithRelationInput | UserLocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserLocations.
     */
    cursor?: UserLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserLocations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserLocations.
     */
    distinct?: UserLocationScalarFieldEnum | UserLocationScalarFieldEnum[]
  }

  /**
   * UserLocation findFirstOrThrow
   */
  export type UserLocationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLocation
     */
    select?: UserLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserLocation
     */
    omit?: UserLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLocationInclude<ExtArgs> | null
    /**
     * Filter, which UserLocation to fetch.
     */
    where?: UserLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserLocations to fetch.
     */
    orderBy?: UserLocationOrderByWithRelationInput | UserLocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserLocations.
     */
    cursor?: UserLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserLocations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserLocations.
     */
    distinct?: UserLocationScalarFieldEnum | UserLocationScalarFieldEnum[]
  }

  /**
   * UserLocation findMany
   */
  export type UserLocationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLocation
     */
    select?: UserLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserLocation
     */
    omit?: UserLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLocationInclude<ExtArgs> | null
    /**
     * Filter, which UserLocations to fetch.
     */
    where?: UserLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserLocations to fetch.
     */
    orderBy?: UserLocationOrderByWithRelationInput | UserLocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserLocations.
     */
    cursor?: UserLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserLocations.
     */
    skip?: number
    distinct?: UserLocationScalarFieldEnum | UserLocationScalarFieldEnum[]
  }

  /**
   * UserLocation create
   */
  export type UserLocationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLocation
     */
    select?: UserLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserLocation
     */
    omit?: UserLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLocationInclude<ExtArgs> | null
    /**
     * The data needed to create a UserLocation.
     */
    data: XOR<UserLocationCreateInput, UserLocationUncheckedCreateInput>
  }

  /**
   * UserLocation createMany
   */
  export type UserLocationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserLocations.
     */
    data: UserLocationCreateManyInput | UserLocationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserLocation createManyAndReturn
   */
  export type UserLocationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLocation
     */
    select?: UserLocationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserLocation
     */
    omit?: UserLocationOmit<ExtArgs> | null
    /**
     * The data used to create many UserLocations.
     */
    data: UserLocationCreateManyInput | UserLocationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLocationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserLocation update
   */
  export type UserLocationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLocation
     */
    select?: UserLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserLocation
     */
    omit?: UserLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLocationInclude<ExtArgs> | null
    /**
     * The data needed to update a UserLocation.
     */
    data: XOR<UserLocationUpdateInput, UserLocationUncheckedUpdateInput>
    /**
     * Choose, which UserLocation to update.
     */
    where: UserLocationWhereUniqueInput
  }

  /**
   * UserLocation updateMany
   */
  export type UserLocationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserLocations.
     */
    data: XOR<UserLocationUpdateManyMutationInput, UserLocationUncheckedUpdateManyInput>
    /**
     * Filter which UserLocations to update
     */
    where?: UserLocationWhereInput
    /**
     * Limit how many UserLocations to update.
     */
    limit?: number
  }

  /**
   * UserLocation updateManyAndReturn
   */
  export type UserLocationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLocation
     */
    select?: UserLocationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserLocation
     */
    omit?: UserLocationOmit<ExtArgs> | null
    /**
     * The data used to update UserLocations.
     */
    data: XOR<UserLocationUpdateManyMutationInput, UserLocationUncheckedUpdateManyInput>
    /**
     * Filter which UserLocations to update
     */
    where?: UserLocationWhereInput
    /**
     * Limit how many UserLocations to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLocationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserLocation upsert
   */
  export type UserLocationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLocation
     */
    select?: UserLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserLocation
     */
    omit?: UserLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLocationInclude<ExtArgs> | null
    /**
     * The filter to search for the UserLocation to update in case it exists.
     */
    where: UserLocationWhereUniqueInput
    /**
     * In case the UserLocation found by the `where` argument doesn't exist, create a new UserLocation with this data.
     */
    create: XOR<UserLocationCreateInput, UserLocationUncheckedCreateInput>
    /**
     * In case the UserLocation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserLocationUpdateInput, UserLocationUncheckedUpdateInput>
  }

  /**
   * UserLocation delete
   */
  export type UserLocationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLocation
     */
    select?: UserLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserLocation
     */
    omit?: UserLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLocationInclude<ExtArgs> | null
    /**
     * Filter which UserLocation to delete.
     */
    where: UserLocationWhereUniqueInput
  }

  /**
   * UserLocation deleteMany
   */
  export type UserLocationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserLocations to delete
     */
    where?: UserLocationWhereInput
    /**
     * Limit how many UserLocations to delete.
     */
    limit?: number
  }

  /**
   * UserLocation without action
   */
  export type UserLocationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLocation
     */
    select?: UserLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserLocation
     */
    omit?: UserLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLocationInclude<ExtArgs> | null
  }


  /**
   * Model Agent
   */

  export type AggregateAgent = {
    _count: AgentCountAggregateOutputType | null
    _avg: AgentAvgAggregateOutputType | null
    _sum: AgentSumAggregateOutputType | null
    _min: AgentMinAggregateOutputType | null
    _max: AgentMaxAggregateOutputType | null
  }

  export type AgentAvgAggregateOutputType = {
    workloadLimit: number | null
    currentWorkload: number | null
    resolutionRate: number | null
    collaborationMetric: number | null
  }

  export type AgentSumAggregateOutputType = {
    workloadLimit: number | null
    currentWorkload: number | null
    resolutionRate: number | null
    collaborationMetric: number | null
  }

  export type AgentMinAggregateOutputType = {
    id: string | null
    email: string | null
    fullName: string | null
    employeeId: string | null
    password: string | null
    phoneNumber: string | null
    officialEmail: string | null
    department: string | null
    municipality: string | null
    autonomyLevel: string | null
    accessLevel: string | null
    workloadLimit: number | null
    currentWorkload: number | null
    availabilityStatus: string | null
    dateOfCreation: Date | null
    lastUpdated: Date | null
    status: string | null
    lastLogin: Date | null
    resolutionRate: number | null
    avgResolutionTime: string | null
    collaborationMetric: number | null
    managedByMunicipalId: string | null
  }

  export type AgentMaxAggregateOutputType = {
    id: string | null
    email: string | null
    fullName: string | null
    employeeId: string | null
    password: string | null
    phoneNumber: string | null
    officialEmail: string | null
    department: string | null
    municipality: string | null
    autonomyLevel: string | null
    accessLevel: string | null
    workloadLimit: number | null
    currentWorkload: number | null
    availabilityStatus: string | null
    dateOfCreation: Date | null
    lastUpdated: Date | null
    status: string | null
    lastLogin: Date | null
    resolutionRate: number | null
    avgResolutionTime: string | null
    collaborationMetric: number | null
    managedByMunicipalId: string | null
  }

  export type AgentCountAggregateOutputType = {
    id: number
    email: number
    fullName: number
    employeeId: number
    password: number
    phoneNumber: number
    officialEmail: number
    department: number
    municipality: number
    autonomyLevel: number
    accessLevel: number
    workloadLimit: number
    currentWorkload: number
    availabilityStatus: number
    dateOfCreation: number
    lastUpdated: number
    status: number
    lastLogin: number
    resolutionRate: number
    avgResolutionTime: number
    collaborationMetric: number
    managedByMunicipalId: number
    _all: number
  }


  export type AgentAvgAggregateInputType = {
    workloadLimit?: true
    currentWorkload?: true
    resolutionRate?: true
    collaborationMetric?: true
  }

  export type AgentSumAggregateInputType = {
    workloadLimit?: true
    currentWorkload?: true
    resolutionRate?: true
    collaborationMetric?: true
  }

  export type AgentMinAggregateInputType = {
    id?: true
    email?: true
    fullName?: true
    employeeId?: true
    password?: true
    phoneNumber?: true
    officialEmail?: true
    department?: true
    municipality?: true
    autonomyLevel?: true
    accessLevel?: true
    workloadLimit?: true
    currentWorkload?: true
    availabilityStatus?: true
    dateOfCreation?: true
    lastUpdated?: true
    status?: true
    lastLogin?: true
    resolutionRate?: true
    avgResolutionTime?: true
    collaborationMetric?: true
    managedByMunicipalId?: true
  }

  export type AgentMaxAggregateInputType = {
    id?: true
    email?: true
    fullName?: true
    employeeId?: true
    password?: true
    phoneNumber?: true
    officialEmail?: true
    department?: true
    municipality?: true
    autonomyLevel?: true
    accessLevel?: true
    workloadLimit?: true
    currentWorkload?: true
    availabilityStatus?: true
    dateOfCreation?: true
    lastUpdated?: true
    status?: true
    lastLogin?: true
    resolutionRate?: true
    avgResolutionTime?: true
    collaborationMetric?: true
    managedByMunicipalId?: true
  }

  export type AgentCountAggregateInputType = {
    id?: true
    email?: true
    fullName?: true
    employeeId?: true
    password?: true
    phoneNumber?: true
    officialEmail?: true
    department?: true
    municipality?: true
    autonomyLevel?: true
    accessLevel?: true
    workloadLimit?: true
    currentWorkload?: true
    availabilityStatus?: true
    dateOfCreation?: true
    lastUpdated?: true
    status?: true
    lastLogin?: true
    resolutionRate?: true
    avgResolutionTime?: true
    collaborationMetric?: true
    managedByMunicipalId?: true
    _all?: true
  }

  export type AgentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Agent to aggregate.
     */
    where?: AgentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Agents to fetch.
     */
    orderBy?: AgentOrderByWithRelationInput | AgentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AgentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Agents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Agents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Agents
    **/
    _count?: true | AgentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AgentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AgentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AgentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AgentMaxAggregateInputType
  }

  export type GetAgentAggregateType<T extends AgentAggregateArgs> = {
        [P in keyof T & keyof AggregateAgent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAgent[P]>
      : GetScalarType<T[P], AggregateAgent[P]>
  }




  export type AgentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AgentWhereInput
    orderBy?: AgentOrderByWithAggregationInput | AgentOrderByWithAggregationInput[]
    by: AgentScalarFieldEnum[] | AgentScalarFieldEnum
    having?: AgentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AgentCountAggregateInputType | true
    _avg?: AgentAvgAggregateInputType
    _sum?: AgentSumAggregateInputType
    _min?: AgentMinAggregateInputType
    _max?: AgentMaxAggregateInputType
  }

  export type AgentGroupByOutputType = {
    id: string
    email: string
    fullName: string
    employeeId: string
    password: string
    phoneNumber: string
    officialEmail: string
    department: string
    municipality: string
    autonomyLevel: string
    accessLevel: string
    workloadLimit: number
    currentWorkload: number
    availabilityStatus: string
    dateOfCreation: Date
    lastUpdated: Date
    status: string
    lastLogin: Date | null
    resolutionRate: number
    avgResolutionTime: string | null
    collaborationMetric: number
    managedByMunicipalId: string | null
    _count: AgentCountAggregateOutputType | null
    _avg: AgentAvgAggregateOutputType | null
    _sum: AgentSumAggregateOutputType | null
    _min: AgentMinAggregateOutputType | null
    _max: AgentMaxAggregateOutputType | null
  }

  type GetAgentGroupByPayload<T extends AgentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AgentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AgentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AgentGroupByOutputType[P]>
            : GetScalarType<T[P], AgentGroupByOutputType[P]>
        }
      >
    >


  export type AgentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    fullName?: boolean
    employeeId?: boolean
    password?: boolean
    phoneNumber?: boolean
    officialEmail?: boolean
    department?: boolean
    municipality?: boolean
    autonomyLevel?: boolean
    accessLevel?: boolean
    workloadLimit?: boolean
    currentWorkload?: boolean
    availabilityStatus?: boolean
    dateOfCreation?: boolean
    lastUpdated?: boolean
    status?: boolean
    lastLogin?: boolean
    resolutionRate?: boolean
    avgResolutionTime?: boolean
    collaborationMetric?: boolean
    managedByMunicipalId?: boolean
    assignedComplaints?: boolean | Agent$assignedComplaintsArgs<ExtArgs>
    coAssignedComplaints?: boolean | Agent$coAssignedComplaintsArgs<ExtArgs>
    managedByMunicipal?: boolean | Agent$managedByMunicipalArgs<ExtArgs>
    _count?: boolean | AgentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["agent"]>

  export type AgentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    fullName?: boolean
    employeeId?: boolean
    password?: boolean
    phoneNumber?: boolean
    officialEmail?: boolean
    department?: boolean
    municipality?: boolean
    autonomyLevel?: boolean
    accessLevel?: boolean
    workloadLimit?: boolean
    currentWorkload?: boolean
    availabilityStatus?: boolean
    dateOfCreation?: boolean
    lastUpdated?: boolean
    status?: boolean
    lastLogin?: boolean
    resolutionRate?: boolean
    avgResolutionTime?: boolean
    collaborationMetric?: boolean
    managedByMunicipalId?: boolean
    managedByMunicipal?: boolean | Agent$managedByMunicipalArgs<ExtArgs>
  }, ExtArgs["result"]["agent"]>

  export type AgentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    fullName?: boolean
    employeeId?: boolean
    password?: boolean
    phoneNumber?: boolean
    officialEmail?: boolean
    department?: boolean
    municipality?: boolean
    autonomyLevel?: boolean
    accessLevel?: boolean
    workloadLimit?: boolean
    currentWorkload?: boolean
    availabilityStatus?: boolean
    dateOfCreation?: boolean
    lastUpdated?: boolean
    status?: boolean
    lastLogin?: boolean
    resolutionRate?: boolean
    avgResolutionTime?: boolean
    collaborationMetric?: boolean
    managedByMunicipalId?: boolean
    managedByMunicipal?: boolean | Agent$managedByMunicipalArgs<ExtArgs>
  }, ExtArgs["result"]["agent"]>

  export type AgentSelectScalar = {
    id?: boolean
    email?: boolean
    fullName?: boolean
    employeeId?: boolean
    password?: boolean
    phoneNumber?: boolean
    officialEmail?: boolean
    department?: boolean
    municipality?: boolean
    autonomyLevel?: boolean
    accessLevel?: boolean
    workloadLimit?: boolean
    currentWorkload?: boolean
    availabilityStatus?: boolean
    dateOfCreation?: boolean
    lastUpdated?: boolean
    status?: boolean
    lastLogin?: boolean
    resolutionRate?: boolean
    avgResolutionTime?: boolean
    collaborationMetric?: boolean
    managedByMunicipalId?: boolean
  }

  export type AgentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "fullName" | "employeeId" | "password" | "phoneNumber" | "officialEmail" | "department" | "municipality" | "autonomyLevel" | "accessLevel" | "workloadLimit" | "currentWorkload" | "availabilityStatus" | "dateOfCreation" | "lastUpdated" | "status" | "lastLogin" | "resolutionRate" | "avgResolutionTime" | "collaborationMetric" | "managedByMunicipalId", ExtArgs["result"]["agent"]>
  export type AgentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignedComplaints?: boolean | Agent$assignedComplaintsArgs<ExtArgs>
    coAssignedComplaints?: boolean | Agent$coAssignedComplaintsArgs<ExtArgs>
    managedByMunicipal?: boolean | Agent$managedByMunicipalArgs<ExtArgs>
    _count?: boolean | AgentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AgentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    managedByMunicipal?: boolean | Agent$managedByMunicipalArgs<ExtArgs>
  }
  export type AgentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    managedByMunicipal?: boolean | Agent$managedByMunicipalArgs<ExtArgs>
  }

  export type $AgentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Agent"
    objects: {
      assignedComplaints: Prisma.$ComplaintPayload<ExtArgs>[]
      coAssignedComplaints: Prisma.$ComplaintPayload<ExtArgs>[]
      managedByMunicipal: Prisma.$DepartmentMunicipalAdminPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      fullName: string
      employeeId: string
      password: string
      phoneNumber: string
      officialEmail: string
      department: string
      municipality: string
      autonomyLevel: string
      accessLevel: string
      workloadLimit: number
      currentWorkload: number
      availabilityStatus: string
      dateOfCreation: Date
      lastUpdated: Date
      status: string
      lastLogin: Date | null
      resolutionRate: number
      avgResolutionTime: string | null
      collaborationMetric: number
      managedByMunicipalId: string | null
    }, ExtArgs["result"]["agent"]>
    composites: {}
  }

  type AgentGetPayload<S extends boolean | null | undefined | AgentDefaultArgs> = $Result.GetResult<Prisma.$AgentPayload, S>

  type AgentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AgentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AgentCountAggregateInputType | true
    }

  export interface AgentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Agent'], meta: { name: 'Agent' } }
    /**
     * Find zero or one Agent that matches the filter.
     * @param {AgentFindUniqueArgs} args - Arguments to find a Agent
     * @example
     * // Get one Agent
     * const agent = await prisma.agent.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AgentFindUniqueArgs>(args: SelectSubset<T, AgentFindUniqueArgs<ExtArgs>>): Prisma__AgentClient<$Result.GetResult<Prisma.$AgentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Agent that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AgentFindUniqueOrThrowArgs} args - Arguments to find a Agent
     * @example
     * // Get one Agent
     * const agent = await prisma.agent.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AgentFindUniqueOrThrowArgs>(args: SelectSubset<T, AgentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AgentClient<$Result.GetResult<Prisma.$AgentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Agent that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentFindFirstArgs} args - Arguments to find a Agent
     * @example
     * // Get one Agent
     * const agent = await prisma.agent.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AgentFindFirstArgs>(args?: SelectSubset<T, AgentFindFirstArgs<ExtArgs>>): Prisma__AgentClient<$Result.GetResult<Prisma.$AgentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Agent that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentFindFirstOrThrowArgs} args - Arguments to find a Agent
     * @example
     * // Get one Agent
     * const agent = await prisma.agent.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AgentFindFirstOrThrowArgs>(args?: SelectSubset<T, AgentFindFirstOrThrowArgs<ExtArgs>>): Prisma__AgentClient<$Result.GetResult<Prisma.$AgentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Agents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Agents
     * const agents = await prisma.agent.findMany()
     * 
     * // Get first 10 Agents
     * const agents = await prisma.agent.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const agentWithIdOnly = await prisma.agent.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AgentFindManyArgs>(args?: SelectSubset<T, AgentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Agent.
     * @param {AgentCreateArgs} args - Arguments to create a Agent.
     * @example
     * // Create one Agent
     * const Agent = await prisma.agent.create({
     *   data: {
     *     // ... data to create a Agent
     *   }
     * })
     * 
     */
    create<T extends AgentCreateArgs>(args: SelectSubset<T, AgentCreateArgs<ExtArgs>>): Prisma__AgentClient<$Result.GetResult<Prisma.$AgentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Agents.
     * @param {AgentCreateManyArgs} args - Arguments to create many Agents.
     * @example
     * // Create many Agents
     * const agent = await prisma.agent.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AgentCreateManyArgs>(args?: SelectSubset<T, AgentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Agents and returns the data saved in the database.
     * @param {AgentCreateManyAndReturnArgs} args - Arguments to create many Agents.
     * @example
     * // Create many Agents
     * const agent = await prisma.agent.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Agents and only return the `id`
     * const agentWithIdOnly = await prisma.agent.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AgentCreateManyAndReturnArgs>(args?: SelectSubset<T, AgentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Agent.
     * @param {AgentDeleteArgs} args - Arguments to delete one Agent.
     * @example
     * // Delete one Agent
     * const Agent = await prisma.agent.delete({
     *   where: {
     *     // ... filter to delete one Agent
     *   }
     * })
     * 
     */
    delete<T extends AgentDeleteArgs>(args: SelectSubset<T, AgentDeleteArgs<ExtArgs>>): Prisma__AgentClient<$Result.GetResult<Prisma.$AgentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Agent.
     * @param {AgentUpdateArgs} args - Arguments to update one Agent.
     * @example
     * // Update one Agent
     * const agent = await prisma.agent.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AgentUpdateArgs>(args: SelectSubset<T, AgentUpdateArgs<ExtArgs>>): Prisma__AgentClient<$Result.GetResult<Prisma.$AgentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Agents.
     * @param {AgentDeleteManyArgs} args - Arguments to filter Agents to delete.
     * @example
     * // Delete a few Agents
     * const { count } = await prisma.agent.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AgentDeleteManyArgs>(args?: SelectSubset<T, AgentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Agents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Agents
     * const agent = await prisma.agent.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AgentUpdateManyArgs>(args: SelectSubset<T, AgentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Agents and returns the data updated in the database.
     * @param {AgentUpdateManyAndReturnArgs} args - Arguments to update many Agents.
     * @example
     * // Update many Agents
     * const agent = await prisma.agent.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Agents and only return the `id`
     * const agentWithIdOnly = await prisma.agent.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AgentUpdateManyAndReturnArgs>(args: SelectSubset<T, AgentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Agent.
     * @param {AgentUpsertArgs} args - Arguments to update or create a Agent.
     * @example
     * // Update or create a Agent
     * const agent = await prisma.agent.upsert({
     *   create: {
     *     // ... data to create a Agent
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Agent we want to update
     *   }
     * })
     */
    upsert<T extends AgentUpsertArgs>(args: SelectSubset<T, AgentUpsertArgs<ExtArgs>>): Prisma__AgentClient<$Result.GetResult<Prisma.$AgentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Agents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentCountArgs} args - Arguments to filter Agents to count.
     * @example
     * // Count the number of Agents
     * const count = await prisma.agent.count({
     *   where: {
     *     // ... the filter for the Agents we want to count
     *   }
     * })
    **/
    count<T extends AgentCountArgs>(
      args?: Subset<T, AgentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AgentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Agent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AgentAggregateArgs>(args: Subset<T, AgentAggregateArgs>): Prisma.PrismaPromise<GetAgentAggregateType<T>>

    /**
     * Group by Agent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AgentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AgentGroupByArgs['orderBy'] }
        : { orderBy?: AgentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AgentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAgentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Agent model
   */
  readonly fields: AgentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Agent.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AgentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    assignedComplaints<T extends Agent$assignedComplaintsArgs<ExtArgs> = {}>(args?: Subset<T, Agent$assignedComplaintsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComplaintPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    coAssignedComplaints<T extends Agent$coAssignedComplaintsArgs<ExtArgs> = {}>(args?: Subset<T, Agent$coAssignedComplaintsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComplaintPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    managedByMunicipal<T extends Agent$managedByMunicipalArgs<ExtArgs> = {}>(args?: Subset<T, Agent$managedByMunicipalArgs<ExtArgs>>): Prisma__DepartmentMunicipalAdminClient<$Result.GetResult<Prisma.$DepartmentMunicipalAdminPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Agent model
   */
  interface AgentFieldRefs {
    readonly id: FieldRef<"Agent", 'String'>
    readonly email: FieldRef<"Agent", 'String'>
    readonly fullName: FieldRef<"Agent", 'String'>
    readonly employeeId: FieldRef<"Agent", 'String'>
    readonly password: FieldRef<"Agent", 'String'>
    readonly phoneNumber: FieldRef<"Agent", 'String'>
    readonly officialEmail: FieldRef<"Agent", 'String'>
    readonly department: FieldRef<"Agent", 'String'>
    readonly municipality: FieldRef<"Agent", 'String'>
    readonly autonomyLevel: FieldRef<"Agent", 'String'>
    readonly accessLevel: FieldRef<"Agent", 'String'>
    readonly workloadLimit: FieldRef<"Agent", 'Int'>
    readonly currentWorkload: FieldRef<"Agent", 'Int'>
    readonly availabilityStatus: FieldRef<"Agent", 'String'>
    readonly dateOfCreation: FieldRef<"Agent", 'DateTime'>
    readonly lastUpdated: FieldRef<"Agent", 'DateTime'>
    readonly status: FieldRef<"Agent", 'String'>
    readonly lastLogin: FieldRef<"Agent", 'DateTime'>
    readonly resolutionRate: FieldRef<"Agent", 'Float'>
    readonly avgResolutionTime: FieldRef<"Agent", 'String'>
    readonly collaborationMetric: FieldRef<"Agent", 'Int'>
    readonly managedByMunicipalId: FieldRef<"Agent", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Agent findUnique
   */
  export type AgentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agent
     */
    select?: AgentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Agent
     */
    omit?: AgentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentInclude<ExtArgs> | null
    /**
     * Filter, which Agent to fetch.
     */
    where: AgentWhereUniqueInput
  }

  /**
   * Agent findUniqueOrThrow
   */
  export type AgentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agent
     */
    select?: AgentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Agent
     */
    omit?: AgentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentInclude<ExtArgs> | null
    /**
     * Filter, which Agent to fetch.
     */
    where: AgentWhereUniqueInput
  }

  /**
   * Agent findFirst
   */
  export type AgentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agent
     */
    select?: AgentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Agent
     */
    omit?: AgentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentInclude<ExtArgs> | null
    /**
     * Filter, which Agent to fetch.
     */
    where?: AgentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Agents to fetch.
     */
    orderBy?: AgentOrderByWithRelationInput | AgentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Agents.
     */
    cursor?: AgentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Agents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Agents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Agents.
     */
    distinct?: AgentScalarFieldEnum | AgentScalarFieldEnum[]
  }

  /**
   * Agent findFirstOrThrow
   */
  export type AgentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agent
     */
    select?: AgentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Agent
     */
    omit?: AgentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentInclude<ExtArgs> | null
    /**
     * Filter, which Agent to fetch.
     */
    where?: AgentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Agents to fetch.
     */
    orderBy?: AgentOrderByWithRelationInput | AgentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Agents.
     */
    cursor?: AgentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Agents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Agents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Agents.
     */
    distinct?: AgentScalarFieldEnum | AgentScalarFieldEnum[]
  }

  /**
   * Agent findMany
   */
  export type AgentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agent
     */
    select?: AgentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Agent
     */
    omit?: AgentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentInclude<ExtArgs> | null
    /**
     * Filter, which Agents to fetch.
     */
    where?: AgentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Agents to fetch.
     */
    orderBy?: AgentOrderByWithRelationInput | AgentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Agents.
     */
    cursor?: AgentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Agents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Agents.
     */
    skip?: number
    distinct?: AgentScalarFieldEnum | AgentScalarFieldEnum[]
  }

  /**
   * Agent create
   */
  export type AgentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agent
     */
    select?: AgentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Agent
     */
    omit?: AgentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentInclude<ExtArgs> | null
    /**
     * The data needed to create a Agent.
     */
    data: XOR<AgentCreateInput, AgentUncheckedCreateInput>
  }

  /**
   * Agent createMany
   */
  export type AgentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Agents.
     */
    data: AgentCreateManyInput | AgentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Agent createManyAndReturn
   */
  export type AgentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agent
     */
    select?: AgentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Agent
     */
    omit?: AgentOmit<ExtArgs> | null
    /**
     * The data used to create many Agents.
     */
    data: AgentCreateManyInput | AgentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Agent update
   */
  export type AgentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agent
     */
    select?: AgentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Agent
     */
    omit?: AgentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentInclude<ExtArgs> | null
    /**
     * The data needed to update a Agent.
     */
    data: XOR<AgentUpdateInput, AgentUncheckedUpdateInput>
    /**
     * Choose, which Agent to update.
     */
    where: AgentWhereUniqueInput
  }

  /**
   * Agent updateMany
   */
  export type AgentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Agents.
     */
    data: XOR<AgentUpdateManyMutationInput, AgentUncheckedUpdateManyInput>
    /**
     * Filter which Agents to update
     */
    where?: AgentWhereInput
    /**
     * Limit how many Agents to update.
     */
    limit?: number
  }

  /**
   * Agent updateManyAndReturn
   */
  export type AgentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agent
     */
    select?: AgentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Agent
     */
    omit?: AgentOmit<ExtArgs> | null
    /**
     * The data used to update Agents.
     */
    data: XOR<AgentUpdateManyMutationInput, AgentUncheckedUpdateManyInput>
    /**
     * Filter which Agents to update
     */
    where?: AgentWhereInput
    /**
     * Limit how many Agents to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Agent upsert
   */
  export type AgentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agent
     */
    select?: AgentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Agent
     */
    omit?: AgentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentInclude<ExtArgs> | null
    /**
     * The filter to search for the Agent to update in case it exists.
     */
    where: AgentWhereUniqueInput
    /**
     * In case the Agent found by the `where` argument doesn't exist, create a new Agent with this data.
     */
    create: XOR<AgentCreateInput, AgentUncheckedCreateInput>
    /**
     * In case the Agent was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AgentUpdateInput, AgentUncheckedUpdateInput>
  }

  /**
   * Agent delete
   */
  export type AgentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agent
     */
    select?: AgentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Agent
     */
    omit?: AgentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentInclude<ExtArgs> | null
    /**
     * Filter which Agent to delete.
     */
    where: AgentWhereUniqueInput
  }

  /**
   * Agent deleteMany
   */
  export type AgentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Agents to delete
     */
    where?: AgentWhereInput
    /**
     * Limit how many Agents to delete.
     */
    limit?: number
  }

  /**
   * Agent.assignedComplaints
   */
  export type Agent$assignedComplaintsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Complaint
     */
    select?: ComplaintSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Complaint
     */
    omit?: ComplaintOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintInclude<ExtArgs> | null
    where?: ComplaintWhereInput
    orderBy?: ComplaintOrderByWithRelationInput | ComplaintOrderByWithRelationInput[]
    cursor?: ComplaintWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ComplaintScalarFieldEnum | ComplaintScalarFieldEnum[]
  }

  /**
   * Agent.coAssignedComplaints
   */
  export type Agent$coAssignedComplaintsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Complaint
     */
    select?: ComplaintSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Complaint
     */
    omit?: ComplaintOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintInclude<ExtArgs> | null
    where?: ComplaintWhereInput
    orderBy?: ComplaintOrderByWithRelationInput | ComplaintOrderByWithRelationInput[]
    cursor?: ComplaintWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ComplaintScalarFieldEnum | ComplaintScalarFieldEnum[]
  }

  /**
   * Agent.managedByMunicipal
   */
  export type Agent$managedByMunicipalArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentMunicipalAdmin
     */
    select?: DepartmentMunicipalAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepartmentMunicipalAdmin
     */
    omit?: DepartmentMunicipalAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentMunicipalAdminInclude<ExtArgs> | null
    where?: DepartmentMunicipalAdminWhereInput
  }

  /**
   * Agent without action
   */
  export type AgentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agent
     */
    select?: AgentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Agent
     */
    omit?: AgentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentInclude<ExtArgs> | null
  }


  /**
   * Model DepartmentMunicipalAdmin
   */

  export type AggregateDepartmentMunicipalAdmin = {
    _count: DepartmentMunicipalAdminCountAggregateOutputType | null
    _avg: DepartmentMunicipalAdminAvgAggregateOutputType | null
    _sum: DepartmentMunicipalAdminSumAggregateOutputType | null
    _min: DepartmentMunicipalAdminMinAggregateOutputType | null
    _max: DepartmentMunicipalAdminMaxAggregateOutputType | null
  }

  export type DepartmentMunicipalAdminAvgAggregateOutputType = {
    resolutionRate: number | null
    slaComplianceRate: number | null
    escalationCount: number | null
  }

  export type DepartmentMunicipalAdminSumAggregateOutputType = {
    resolutionRate: number | null
    slaComplianceRate: number | null
    escalationCount: number | null
  }

  export type DepartmentMunicipalAdminMinAggregateOutputType = {
    id: string | null
    fullName: string | null
    adminId: string | null
    officialEmail: string | null
    phoneNumber: string | null
    password: string | null
    department: string | null
    municipality: string | null
    accessLevel: string | null
    dateOfCreation: Date | null
    lastUpdated: Date | null
    status: string | null
    lastLogin: Date | null
    resolutionRate: number | null
    slaComplianceRate: number | null
    escalationCount: number | null
    managedByStateAdminId: string | null
    managedBySuperMunicipalId: string | null
  }

  export type DepartmentMunicipalAdminMaxAggregateOutputType = {
    id: string | null
    fullName: string | null
    adminId: string | null
    officialEmail: string | null
    phoneNumber: string | null
    password: string | null
    department: string | null
    municipality: string | null
    accessLevel: string | null
    dateOfCreation: Date | null
    lastUpdated: Date | null
    status: string | null
    lastLogin: Date | null
    resolutionRate: number | null
    slaComplianceRate: number | null
    escalationCount: number | null
    managedByStateAdminId: string | null
    managedBySuperMunicipalId: string | null
  }

  export type DepartmentMunicipalAdminCountAggregateOutputType = {
    id: number
    fullName: number
    adminId: number
    officialEmail: number
    phoneNumber: number
    password: number
    department: number
    municipality: number
    accessLevel: number
    dateOfCreation: number
    lastUpdated: number
    status: number
    lastLogin: number
    resolutionRate: number
    slaComplianceRate: number
    escalationCount: number
    managedByStateAdminId: number
    managedBySuperMunicipalId: number
    _all: number
  }


  export type DepartmentMunicipalAdminAvgAggregateInputType = {
    resolutionRate?: true
    slaComplianceRate?: true
    escalationCount?: true
  }

  export type DepartmentMunicipalAdminSumAggregateInputType = {
    resolutionRate?: true
    slaComplianceRate?: true
    escalationCount?: true
  }

  export type DepartmentMunicipalAdminMinAggregateInputType = {
    id?: true
    fullName?: true
    adminId?: true
    officialEmail?: true
    phoneNumber?: true
    password?: true
    department?: true
    municipality?: true
    accessLevel?: true
    dateOfCreation?: true
    lastUpdated?: true
    status?: true
    lastLogin?: true
    resolutionRate?: true
    slaComplianceRate?: true
    escalationCount?: true
    managedByStateAdminId?: true
    managedBySuperMunicipalId?: true
  }

  export type DepartmentMunicipalAdminMaxAggregateInputType = {
    id?: true
    fullName?: true
    adminId?: true
    officialEmail?: true
    phoneNumber?: true
    password?: true
    department?: true
    municipality?: true
    accessLevel?: true
    dateOfCreation?: true
    lastUpdated?: true
    status?: true
    lastLogin?: true
    resolutionRate?: true
    slaComplianceRate?: true
    escalationCount?: true
    managedByStateAdminId?: true
    managedBySuperMunicipalId?: true
  }

  export type DepartmentMunicipalAdminCountAggregateInputType = {
    id?: true
    fullName?: true
    adminId?: true
    officialEmail?: true
    phoneNumber?: true
    password?: true
    department?: true
    municipality?: true
    accessLevel?: true
    dateOfCreation?: true
    lastUpdated?: true
    status?: true
    lastLogin?: true
    resolutionRate?: true
    slaComplianceRate?: true
    escalationCount?: true
    managedByStateAdminId?: true
    managedBySuperMunicipalId?: true
    _all?: true
  }

  export type DepartmentMunicipalAdminAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DepartmentMunicipalAdmin to aggregate.
     */
    where?: DepartmentMunicipalAdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DepartmentMunicipalAdmins to fetch.
     */
    orderBy?: DepartmentMunicipalAdminOrderByWithRelationInput | DepartmentMunicipalAdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DepartmentMunicipalAdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DepartmentMunicipalAdmins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DepartmentMunicipalAdmins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DepartmentMunicipalAdmins
    **/
    _count?: true | DepartmentMunicipalAdminCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DepartmentMunicipalAdminAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DepartmentMunicipalAdminSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DepartmentMunicipalAdminMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DepartmentMunicipalAdminMaxAggregateInputType
  }

  export type GetDepartmentMunicipalAdminAggregateType<T extends DepartmentMunicipalAdminAggregateArgs> = {
        [P in keyof T & keyof AggregateDepartmentMunicipalAdmin]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDepartmentMunicipalAdmin[P]>
      : GetScalarType<T[P], AggregateDepartmentMunicipalAdmin[P]>
  }




  export type DepartmentMunicipalAdminGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepartmentMunicipalAdminWhereInput
    orderBy?: DepartmentMunicipalAdminOrderByWithAggregationInput | DepartmentMunicipalAdminOrderByWithAggregationInput[]
    by: DepartmentMunicipalAdminScalarFieldEnum[] | DepartmentMunicipalAdminScalarFieldEnum
    having?: DepartmentMunicipalAdminScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DepartmentMunicipalAdminCountAggregateInputType | true
    _avg?: DepartmentMunicipalAdminAvgAggregateInputType
    _sum?: DepartmentMunicipalAdminSumAggregateInputType
    _min?: DepartmentMunicipalAdminMinAggregateInputType
    _max?: DepartmentMunicipalAdminMaxAggregateInputType
  }

  export type DepartmentMunicipalAdminGroupByOutputType = {
    id: string
    fullName: string
    adminId: string
    officialEmail: string
    phoneNumber: string
    password: string
    department: string
    municipality: string
    accessLevel: string
    dateOfCreation: Date
    lastUpdated: Date
    status: string
    lastLogin: Date | null
    resolutionRate: number
    slaComplianceRate: number | null
    escalationCount: number
    managedByStateAdminId: string | null
    managedBySuperMunicipalId: string | null
    _count: DepartmentMunicipalAdminCountAggregateOutputType | null
    _avg: DepartmentMunicipalAdminAvgAggregateOutputType | null
    _sum: DepartmentMunicipalAdminSumAggregateOutputType | null
    _min: DepartmentMunicipalAdminMinAggregateOutputType | null
    _max: DepartmentMunicipalAdminMaxAggregateOutputType | null
  }

  type GetDepartmentMunicipalAdminGroupByPayload<T extends DepartmentMunicipalAdminGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DepartmentMunicipalAdminGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DepartmentMunicipalAdminGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DepartmentMunicipalAdminGroupByOutputType[P]>
            : GetScalarType<T[P], DepartmentMunicipalAdminGroupByOutputType[P]>
        }
      >
    >


  export type DepartmentMunicipalAdminSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fullName?: boolean
    adminId?: boolean
    officialEmail?: boolean
    phoneNumber?: boolean
    password?: boolean
    department?: boolean
    municipality?: boolean
    accessLevel?: boolean
    dateOfCreation?: boolean
    lastUpdated?: boolean
    status?: boolean
    lastLogin?: boolean
    resolutionRate?: boolean
    slaComplianceRate?: boolean
    escalationCount?: boolean
    managedByStateAdminId?: boolean
    managedBySuperMunicipalId?: boolean
    managedAgents?: boolean | DepartmentMunicipalAdmin$managedAgentsArgs<ExtArgs>
    managedComplaints?: boolean | DepartmentMunicipalAdmin$managedComplaintsArgs<ExtArgs>
    communityModeration?: boolean | DepartmentMunicipalAdmin$communityModerationArgs<ExtArgs>
    newsUpdates?: boolean | DepartmentMunicipalAdmin$newsUpdatesArgs<ExtArgs>
    managedByStateAdmin?: boolean | DepartmentMunicipalAdmin$managedByStateAdminArgs<ExtArgs>
    managedBySuperMunicipal?: boolean | DepartmentMunicipalAdmin$managedBySuperMunicipalArgs<ExtArgs>
    _count?: boolean | DepartmentMunicipalAdminCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["departmentMunicipalAdmin"]>

  export type DepartmentMunicipalAdminSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fullName?: boolean
    adminId?: boolean
    officialEmail?: boolean
    phoneNumber?: boolean
    password?: boolean
    department?: boolean
    municipality?: boolean
    accessLevel?: boolean
    dateOfCreation?: boolean
    lastUpdated?: boolean
    status?: boolean
    lastLogin?: boolean
    resolutionRate?: boolean
    slaComplianceRate?: boolean
    escalationCount?: boolean
    managedByStateAdminId?: boolean
    managedBySuperMunicipalId?: boolean
    managedByStateAdmin?: boolean | DepartmentMunicipalAdmin$managedByStateAdminArgs<ExtArgs>
    managedBySuperMunicipal?: boolean | DepartmentMunicipalAdmin$managedBySuperMunicipalArgs<ExtArgs>
  }, ExtArgs["result"]["departmentMunicipalAdmin"]>

  export type DepartmentMunicipalAdminSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fullName?: boolean
    adminId?: boolean
    officialEmail?: boolean
    phoneNumber?: boolean
    password?: boolean
    department?: boolean
    municipality?: boolean
    accessLevel?: boolean
    dateOfCreation?: boolean
    lastUpdated?: boolean
    status?: boolean
    lastLogin?: boolean
    resolutionRate?: boolean
    slaComplianceRate?: boolean
    escalationCount?: boolean
    managedByStateAdminId?: boolean
    managedBySuperMunicipalId?: boolean
    managedByStateAdmin?: boolean | DepartmentMunicipalAdmin$managedByStateAdminArgs<ExtArgs>
    managedBySuperMunicipal?: boolean | DepartmentMunicipalAdmin$managedBySuperMunicipalArgs<ExtArgs>
  }, ExtArgs["result"]["departmentMunicipalAdmin"]>

  export type DepartmentMunicipalAdminSelectScalar = {
    id?: boolean
    fullName?: boolean
    adminId?: boolean
    officialEmail?: boolean
    phoneNumber?: boolean
    password?: boolean
    department?: boolean
    municipality?: boolean
    accessLevel?: boolean
    dateOfCreation?: boolean
    lastUpdated?: boolean
    status?: boolean
    lastLogin?: boolean
    resolutionRate?: boolean
    slaComplianceRate?: boolean
    escalationCount?: boolean
    managedByStateAdminId?: boolean
    managedBySuperMunicipalId?: boolean
  }

  export type DepartmentMunicipalAdminOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "fullName" | "adminId" | "officialEmail" | "phoneNumber" | "password" | "department" | "municipality" | "accessLevel" | "dateOfCreation" | "lastUpdated" | "status" | "lastLogin" | "resolutionRate" | "slaComplianceRate" | "escalationCount" | "managedByStateAdminId" | "managedBySuperMunicipalId", ExtArgs["result"]["departmentMunicipalAdmin"]>
  export type DepartmentMunicipalAdminInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    managedAgents?: boolean | DepartmentMunicipalAdmin$managedAgentsArgs<ExtArgs>
    managedComplaints?: boolean | DepartmentMunicipalAdmin$managedComplaintsArgs<ExtArgs>
    communityModeration?: boolean | DepartmentMunicipalAdmin$communityModerationArgs<ExtArgs>
    newsUpdates?: boolean | DepartmentMunicipalAdmin$newsUpdatesArgs<ExtArgs>
    managedByStateAdmin?: boolean | DepartmentMunicipalAdmin$managedByStateAdminArgs<ExtArgs>
    managedBySuperMunicipal?: boolean | DepartmentMunicipalAdmin$managedBySuperMunicipalArgs<ExtArgs>
    _count?: boolean | DepartmentMunicipalAdminCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DepartmentMunicipalAdminIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    managedByStateAdmin?: boolean | DepartmentMunicipalAdmin$managedByStateAdminArgs<ExtArgs>
    managedBySuperMunicipal?: boolean | DepartmentMunicipalAdmin$managedBySuperMunicipalArgs<ExtArgs>
  }
  export type DepartmentMunicipalAdminIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    managedByStateAdmin?: boolean | DepartmentMunicipalAdmin$managedByStateAdminArgs<ExtArgs>
    managedBySuperMunicipal?: boolean | DepartmentMunicipalAdmin$managedBySuperMunicipalArgs<ExtArgs>
  }

  export type $DepartmentMunicipalAdminPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DepartmentMunicipalAdmin"
    objects: {
      managedAgents: Prisma.$AgentPayload<ExtArgs>[]
      managedComplaints: Prisma.$ComplaintPayload<ExtArgs>[]
      communityModeration: Prisma.$ComplaintPayload<ExtArgs>[]
      newsUpdates: Prisma.$NewsUpdatePayload<ExtArgs>[]
      managedByStateAdmin: Prisma.$DepartmentStateAdminPayload<ExtArgs> | null
      managedBySuperMunicipal: Prisma.$SuperMunicipalAdminPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      fullName: string
      adminId: string
      officialEmail: string
      phoneNumber: string
      password: string
      department: string
      municipality: string
      accessLevel: string
      dateOfCreation: Date
      lastUpdated: Date
      status: string
      lastLogin: Date | null
      resolutionRate: number
      slaComplianceRate: number | null
      escalationCount: number
      managedByStateAdminId: string | null
      managedBySuperMunicipalId: string | null
    }, ExtArgs["result"]["departmentMunicipalAdmin"]>
    composites: {}
  }

  type DepartmentMunicipalAdminGetPayload<S extends boolean | null | undefined | DepartmentMunicipalAdminDefaultArgs> = $Result.GetResult<Prisma.$DepartmentMunicipalAdminPayload, S>

  type DepartmentMunicipalAdminCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DepartmentMunicipalAdminFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DepartmentMunicipalAdminCountAggregateInputType | true
    }

  export interface DepartmentMunicipalAdminDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DepartmentMunicipalAdmin'], meta: { name: 'DepartmentMunicipalAdmin' } }
    /**
     * Find zero or one DepartmentMunicipalAdmin that matches the filter.
     * @param {DepartmentMunicipalAdminFindUniqueArgs} args - Arguments to find a DepartmentMunicipalAdmin
     * @example
     * // Get one DepartmentMunicipalAdmin
     * const departmentMunicipalAdmin = await prisma.departmentMunicipalAdmin.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DepartmentMunicipalAdminFindUniqueArgs>(args: SelectSubset<T, DepartmentMunicipalAdminFindUniqueArgs<ExtArgs>>): Prisma__DepartmentMunicipalAdminClient<$Result.GetResult<Prisma.$DepartmentMunicipalAdminPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one DepartmentMunicipalAdmin that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DepartmentMunicipalAdminFindUniqueOrThrowArgs} args - Arguments to find a DepartmentMunicipalAdmin
     * @example
     * // Get one DepartmentMunicipalAdmin
     * const departmentMunicipalAdmin = await prisma.departmentMunicipalAdmin.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DepartmentMunicipalAdminFindUniqueOrThrowArgs>(args: SelectSubset<T, DepartmentMunicipalAdminFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DepartmentMunicipalAdminClient<$Result.GetResult<Prisma.$DepartmentMunicipalAdminPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DepartmentMunicipalAdmin that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentMunicipalAdminFindFirstArgs} args - Arguments to find a DepartmentMunicipalAdmin
     * @example
     * // Get one DepartmentMunicipalAdmin
     * const departmentMunicipalAdmin = await prisma.departmentMunicipalAdmin.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DepartmentMunicipalAdminFindFirstArgs>(args?: SelectSubset<T, DepartmentMunicipalAdminFindFirstArgs<ExtArgs>>): Prisma__DepartmentMunicipalAdminClient<$Result.GetResult<Prisma.$DepartmentMunicipalAdminPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DepartmentMunicipalAdmin that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentMunicipalAdminFindFirstOrThrowArgs} args - Arguments to find a DepartmentMunicipalAdmin
     * @example
     * // Get one DepartmentMunicipalAdmin
     * const departmentMunicipalAdmin = await prisma.departmentMunicipalAdmin.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DepartmentMunicipalAdminFindFirstOrThrowArgs>(args?: SelectSubset<T, DepartmentMunicipalAdminFindFirstOrThrowArgs<ExtArgs>>): Prisma__DepartmentMunicipalAdminClient<$Result.GetResult<Prisma.$DepartmentMunicipalAdminPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more DepartmentMunicipalAdmins that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentMunicipalAdminFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DepartmentMunicipalAdmins
     * const departmentMunicipalAdmins = await prisma.departmentMunicipalAdmin.findMany()
     * 
     * // Get first 10 DepartmentMunicipalAdmins
     * const departmentMunicipalAdmins = await prisma.departmentMunicipalAdmin.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const departmentMunicipalAdminWithIdOnly = await prisma.departmentMunicipalAdmin.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DepartmentMunicipalAdminFindManyArgs>(args?: SelectSubset<T, DepartmentMunicipalAdminFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentMunicipalAdminPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a DepartmentMunicipalAdmin.
     * @param {DepartmentMunicipalAdminCreateArgs} args - Arguments to create a DepartmentMunicipalAdmin.
     * @example
     * // Create one DepartmentMunicipalAdmin
     * const DepartmentMunicipalAdmin = await prisma.departmentMunicipalAdmin.create({
     *   data: {
     *     // ... data to create a DepartmentMunicipalAdmin
     *   }
     * })
     * 
     */
    create<T extends DepartmentMunicipalAdminCreateArgs>(args: SelectSubset<T, DepartmentMunicipalAdminCreateArgs<ExtArgs>>): Prisma__DepartmentMunicipalAdminClient<$Result.GetResult<Prisma.$DepartmentMunicipalAdminPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many DepartmentMunicipalAdmins.
     * @param {DepartmentMunicipalAdminCreateManyArgs} args - Arguments to create many DepartmentMunicipalAdmins.
     * @example
     * // Create many DepartmentMunicipalAdmins
     * const departmentMunicipalAdmin = await prisma.departmentMunicipalAdmin.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DepartmentMunicipalAdminCreateManyArgs>(args?: SelectSubset<T, DepartmentMunicipalAdminCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DepartmentMunicipalAdmins and returns the data saved in the database.
     * @param {DepartmentMunicipalAdminCreateManyAndReturnArgs} args - Arguments to create many DepartmentMunicipalAdmins.
     * @example
     * // Create many DepartmentMunicipalAdmins
     * const departmentMunicipalAdmin = await prisma.departmentMunicipalAdmin.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DepartmentMunicipalAdmins and only return the `id`
     * const departmentMunicipalAdminWithIdOnly = await prisma.departmentMunicipalAdmin.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DepartmentMunicipalAdminCreateManyAndReturnArgs>(args?: SelectSubset<T, DepartmentMunicipalAdminCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentMunicipalAdminPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a DepartmentMunicipalAdmin.
     * @param {DepartmentMunicipalAdminDeleteArgs} args - Arguments to delete one DepartmentMunicipalAdmin.
     * @example
     * // Delete one DepartmentMunicipalAdmin
     * const DepartmentMunicipalAdmin = await prisma.departmentMunicipalAdmin.delete({
     *   where: {
     *     // ... filter to delete one DepartmentMunicipalAdmin
     *   }
     * })
     * 
     */
    delete<T extends DepartmentMunicipalAdminDeleteArgs>(args: SelectSubset<T, DepartmentMunicipalAdminDeleteArgs<ExtArgs>>): Prisma__DepartmentMunicipalAdminClient<$Result.GetResult<Prisma.$DepartmentMunicipalAdminPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one DepartmentMunicipalAdmin.
     * @param {DepartmentMunicipalAdminUpdateArgs} args - Arguments to update one DepartmentMunicipalAdmin.
     * @example
     * // Update one DepartmentMunicipalAdmin
     * const departmentMunicipalAdmin = await prisma.departmentMunicipalAdmin.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DepartmentMunicipalAdminUpdateArgs>(args: SelectSubset<T, DepartmentMunicipalAdminUpdateArgs<ExtArgs>>): Prisma__DepartmentMunicipalAdminClient<$Result.GetResult<Prisma.$DepartmentMunicipalAdminPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more DepartmentMunicipalAdmins.
     * @param {DepartmentMunicipalAdminDeleteManyArgs} args - Arguments to filter DepartmentMunicipalAdmins to delete.
     * @example
     * // Delete a few DepartmentMunicipalAdmins
     * const { count } = await prisma.departmentMunicipalAdmin.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DepartmentMunicipalAdminDeleteManyArgs>(args?: SelectSubset<T, DepartmentMunicipalAdminDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DepartmentMunicipalAdmins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentMunicipalAdminUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DepartmentMunicipalAdmins
     * const departmentMunicipalAdmin = await prisma.departmentMunicipalAdmin.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DepartmentMunicipalAdminUpdateManyArgs>(args: SelectSubset<T, DepartmentMunicipalAdminUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DepartmentMunicipalAdmins and returns the data updated in the database.
     * @param {DepartmentMunicipalAdminUpdateManyAndReturnArgs} args - Arguments to update many DepartmentMunicipalAdmins.
     * @example
     * // Update many DepartmentMunicipalAdmins
     * const departmentMunicipalAdmin = await prisma.departmentMunicipalAdmin.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more DepartmentMunicipalAdmins and only return the `id`
     * const departmentMunicipalAdminWithIdOnly = await prisma.departmentMunicipalAdmin.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DepartmentMunicipalAdminUpdateManyAndReturnArgs>(args: SelectSubset<T, DepartmentMunicipalAdminUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentMunicipalAdminPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one DepartmentMunicipalAdmin.
     * @param {DepartmentMunicipalAdminUpsertArgs} args - Arguments to update or create a DepartmentMunicipalAdmin.
     * @example
     * // Update or create a DepartmentMunicipalAdmin
     * const departmentMunicipalAdmin = await prisma.departmentMunicipalAdmin.upsert({
     *   create: {
     *     // ... data to create a DepartmentMunicipalAdmin
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DepartmentMunicipalAdmin we want to update
     *   }
     * })
     */
    upsert<T extends DepartmentMunicipalAdminUpsertArgs>(args: SelectSubset<T, DepartmentMunicipalAdminUpsertArgs<ExtArgs>>): Prisma__DepartmentMunicipalAdminClient<$Result.GetResult<Prisma.$DepartmentMunicipalAdminPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of DepartmentMunicipalAdmins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentMunicipalAdminCountArgs} args - Arguments to filter DepartmentMunicipalAdmins to count.
     * @example
     * // Count the number of DepartmentMunicipalAdmins
     * const count = await prisma.departmentMunicipalAdmin.count({
     *   where: {
     *     // ... the filter for the DepartmentMunicipalAdmins we want to count
     *   }
     * })
    **/
    count<T extends DepartmentMunicipalAdminCountArgs>(
      args?: Subset<T, DepartmentMunicipalAdminCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DepartmentMunicipalAdminCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DepartmentMunicipalAdmin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentMunicipalAdminAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DepartmentMunicipalAdminAggregateArgs>(args: Subset<T, DepartmentMunicipalAdminAggregateArgs>): Prisma.PrismaPromise<GetDepartmentMunicipalAdminAggregateType<T>>

    /**
     * Group by DepartmentMunicipalAdmin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentMunicipalAdminGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DepartmentMunicipalAdminGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DepartmentMunicipalAdminGroupByArgs['orderBy'] }
        : { orderBy?: DepartmentMunicipalAdminGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DepartmentMunicipalAdminGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDepartmentMunicipalAdminGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DepartmentMunicipalAdmin model
   */
  readonly fields: DepartmentMunicipalAdminFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DepartmentMunicipalAdmin.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DepartmentMunicipalAdminClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    managedAgents<T extends DepartmentMunicipalAdmin$managedAgentsArgs<ExtArgs> = {}>(args?: Subset<T, DepartmentMunicipalAdmin$managedAgentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    managedComplaints<T extends DepartmentMunicipalAdmin$managedComplaintsArgs<ExtArgs> = {}>(args?: Subset<T, DepartmentMunicipalAdmin$managedComplaintsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComplaintPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    communityModeration<T extends DepartmentMunicipalAdmin$communityModerationArgs<ExtArgs> = {}>(args?: Subset<T, DepartmentMunicipalAdmin$communityModerationArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComplaintPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    newsUpdates<T extends DepartmentMunicipalAdmin$newsUpdatesArgs<ExtArgs> = {}>(args?: Subset<T, DepartmentMunicipalAdmin$newsUpdatesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NewsUpdatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    managedByStateAdmin<T extends DepartmentMunicipalAdmin$managedByStateAdminArgs<ExtArgs> = {}>(args?: Subset<T, DepartmentMunicipalAdmin$managedByStateAdminArgs<ExtArgs>>): Prisma__DepartmentStateAdminClient<$Result.GetResult<Prisma.$DepartmentStateAdminPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    managedBySuperMunicipal<T extends DepartmentMunicipalAdmin$managedBySuperMunicipalArgs<ExtArgs> = {}>(args?: Subset<T, DepartmentMunicipalAdmin$managedBySuperMunicipalArgs<ExtArgs>>): Prisma__SuperMunicipalAdminClient<$Result.GetResult<Prisma.$SuperMunicipalAdminPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DepartmentMunicipalAdmin model
   */
  interface DepartmentMunicipalAdminFieldRefs {
    readonly id: FieldRef<"DepartmentMunicipalAdmin", 'String'>
    readonly fullName: FieldRef<"DepartmentMunicipalAdmin", 'String'>
    readonly adminId: FieldRef<"DepartmentMunicipalAdmin", 'String'>
    readonly officialEmail: FieldRef<"DepartmentMunicipalAdmin", 'String'>
    readonly phoneNumber: FieldRef<"DepartmentMunicipalAdmin", 'String'>
    readonly password: FieldRef<"DepartmentMunicipalAdmin", 'String'>
    readonly department: FieldRef<"DepartmentMunicipalAdmin", 'String'>
    readonly municipality: FieldRef<"DepartmentMunicipalAdmin", 'String'>
    readonly accessLevel: FieldRef<"DepartmentMunicipalAdmin", 'String'>
    readonly dateOfCreation: FieldRef<"DepartmentMunicipalAdmin", 'DateTime'>
    readonly lastUpdated: FieldRef<"DepartmentMunicipalAdmin", 'DateTime'>
    readonly status: FieldRef<"DepartmentMunicipalAdmin", 'String'>
    readonly lastLogin: FieldRef<"DepartmentMunicipalAdmin", 'DateTime'>
    readonly resolutionRate: FieldRef<"DepartmentMunicipalAdmin", 'Float'>
    readonly slaComplianceRate: FieldRef<"DepartmentMunicipalAdmin", 'Float'>
    readonly escalationCount: FieldRef<"DepartmentMunicipalAdmin", 'Int'>
    readonly managedByStateAdminId: FieldRef<"DepartmentMunicipalAdmin", 'String'>
    readonly managedBySuperMunicipalId: FieldRef<"DepartmentMunicipalAdmin", 'String'>
  }
    

  // Custom InputTypes
  /**
   * DepartmentMunicipalAdmin findUnique
   */
  export type DepartmentMunicipalAdminFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentMunicipalAdmin
     */
    select?: DepartmentMunicipalAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepartmentMunicipalAdmin
     */
    omit?: DepartmentMunicipalAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentMunicipalAdminInclude<ExtArgs> | null
    /**
     * Filter, which DepartmentMunicipalAdmin to fetch.
     */
    where: DepartmentMunicipalAdminWhereUniqueInput
  }

  /**
   * DepartmentMunicipalAdmin findUniqueOrThrow
   */
  export type DepartmentMunicipalAdminFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentMunicipalAdmin
     */
    select?: DepartmentMunicipalAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepartmentMunicipalAdmin
     */
    omit?: DepartmentMunicipalAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentMunicipalAdminInclude<ExtArgs> | null
    /**
     * Filter, which DepartmentMunicipalAdmin to fetch.
     */
    where: DepartmentMunicipalAdminWhereUniqueInput
  }

  /**
   * DepartmentMunicipalAdmin findFirst
   */
  export type DepartmentMunicipalAdminFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentMunicipalAdmin
     */
    select?: DepartmentMunicipalAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepartmentMunicipalAdmin
     */
    omit?: DepartmentMunicipalAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentMunicipalAdminInclude<ExtArgs> | null
    /**
     * Filter, which DepartmentMunicipalAdmin to fetch.
     */
    where?: DepartmentMunicipalAdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DepartmentMunicipalAdmins to fetch.
     */
    orderBy?: DepartmentMunicipalAdminOrderByWithRelationInput | DepartmentMunicipalAdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DepartmentMunicipalAdmins.
     */
    cursor?: DepartmentMunicipalAdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DepartmentMunicipalAdmins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DepartmentMunicipalAdmins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DepartmentMunicipalAdmins.
     */
    distinct?: DepartmentMunicipalAdminScalarFieldEnum | DepartmentMunicipalAdminScalarFieldEnum[]
  }

  /**
   * DepartmentMunicipalAdmin findFirstOrThrow
   */
  export type DepartmentMunicipalAdminFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentMunicipalAdmin
     */
    select?: DepartmentMunicipalAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepartmentMunicipalAdmin
     */
    omit?: DepartmentMunicipalAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentMunicipalAdminInclude<ExtArgs> | null
    /**
     * Filter, which DepartmentMunicipalAdmin to fetch.
     */
    where?: DepartmentMunicipalAdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DepartmentMunicipalAdmins to fetch.
     */
    orderBy?: DepartmentMunicipalAdminOrderByWithRelationInput | DepartmentMunicipalAdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DepartmentMunicipalAdmins.
     */
    cursor?: DepartmentMunicipalAdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DepartmentMunicipalAdmins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DepartmentMunicipalAdmins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DepartmentMunicipalAdmins.
     */
    distinct?: DepartmentMunicipalAdminScalarFieldEnum | DepartmentMunicipalAdminScalarFieldEnum[]
  }

  /**
   * DepartmentMunicipalAdmin findMany
   */
  export type DepartmentMunicipalAdminFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentMunicipalAdmin
     */
    select?: DepartmentMunicipalAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepartmentMunicipalAdmin
     */
    omit?: DepartmentMunicipalAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentMunicipalAdminInclude<ExtArgs> | null
    /**
     * Filter, which DepartmentMunicipalAdmins to fetch.
     */
    where?: DepartmentMunicipalAdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DepartmentMunicipalAdmins to fetch.
     */
    orderBy?: DepartmentMunicipalAdminOrderByWithRelationInput | DepartmentMunicipalAdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DepartmentMunicipalAdmins.
     */
    cursor?: DepartmentMunicipalAdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DepartmentMunicipalAdmins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DepartmentMunicipalAdmins.
     */
    skip?: number
    distinct?: DepartmentMunicipalAdminScalarFieldEnum | DepartmentMunicipalAdminScalarFieldEnum[]
  }

  /**
   * DepartmentMunicipalAdmin create
   */
  export type DepartmentMunicipalAdminCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentMunicipalAdmin
     */
    select?: DepartmentMunicipalAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepartmentMunicipalAdmin
     */
    omit?: DepartmentMunicipalAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentMunicipalAdminInclude<ExtArgs> | null
    /**
     * The data needed to create a DepartmentMunicipalAdmin.
     */
    data: XOR<DepartmentMunicipalAdminCreateInput, DepartmentMunicipalAdminUncheckedCreateInput>
  }

  /**
   * DepartmentMunicipalAdmin createMany
   */
  export type DepartmentMunicipalAdminCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DepartmentMunicipalAdmins.
     */
    data: DepartmentMunicipalAdminCreateManyInput | DepartmentMunicipalAdminCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DepartmentMunicipalAdmin createManyAndReturn
   */
  export type DepartmentMunicipalAdminCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentMunicipalAdmin
     */
    select?: DepartmentMunicipalAdminSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DepartmentMunicipalAdmin
     */
    omit?: DepartmentMunicipalAdminOmit<ExtArgs> | null
    /**
     * The data used to create many DepartmentMunicipalAdmins.
     */
    data: DepartmentMunicipalAdminCreateManyInput | DepartmentMunicipalAdminCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentMunicipalAdminIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DepartmentMunicipalAdmin update
   */
  export type DepartmentMunicipalAdminUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentMunicipalAdmin
     */
    select?: DepartmentMunicipalAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepartmentMunicipalAdmin
     */
    omit?: DepartmentMunicipalAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentMunicipalAdminInclude<ExtArgs> | null
    /**
     * The data needed to update a DepartmentMunicipalAdmin.
     */
    data: XOR<DepartmentMunicipalAdminUpdateInput, DepartmentMunicipalAdminUncheckedUpdateInput>
    /**
     * Choose, which DepartmentMunicipalAdmin to update.
     */
    where: DepartmentMunicipalAdminWhereUniqueInput
  }

  /**
   * DepartmentMunicipalAdmin updateMany
   */
  export type DepartmentMunicipalAdminUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DepartmentMunicipalAdmins.
     */
    data: XOR<DepartmentMunicipalAdminUpdateManyMutationInput, DepartmentMunicipalAdminUncheckedUpdateManyInput>
    /**
     * Filter which DepartmentMunicipalAdmins to update
     */
    where?: DepartmentMunicipalAdminWhereInput
    /**
     * Limit how many DepartmentMunicipalAdmins to update.
     */
    limit?: number
  }

  /**
   * DepartmentMunicipalAdmin updateManyAndReturn
   */
  export type DepartmentMunicipalAdminUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentMunicipalAdmin
     */
    select?: DepartmentMunicipalAdminSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DepartmentMunicipalAdmin
     */
    omit?: DepartmentMunicipalAdminOmit<ExtArgs> | null
    /**
     * The data used to update DepartmentMunicipalAdmins.
     */
    data: XOR<DepartmentMunicipalAdminUpdateManyMutationInput, DepartmentMunicipalAdminUncheckedUpdateManyInput>
    /**
     * Filter which DepartmentMunicipalAdmins to update
     */
    where?: DepartmentMunicipalAdminWhereInput
    /**
     * Limit how many DepartmentMunicipalAdmins to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentMunicipalAdminIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * DepartmentMunicipalAdmin upsert
   */
  export type DepartmentMunicipalAdminUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentMunicipalAdmin
     */
    select?: DepartmentMunicipalAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepartmentMunicipalAdmin
     */
    omit?: DepartmentMunicipalAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentMunicipalAdminInclude<ExtArgs> | null
    /**
     * The filter to search for the DepartmentMunicipalAdmin to update in case it exists.
     */
    where: DepartmentMunicipalAdminWhereUniqueInput
    /**
     * In case the DepartmentMunicipalAdmin found by the `where` argument doesn't exist, create a new DepartmentMunicipalAdmin with this data.
     */
    create: XOR<DepartmentMunicipalAdminCreateInput, DepartmentMunicipalAdminUncheckedCreateInput>
    /**
     * In case the DepartmentMunicipalAdmin was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DepartmentMunicipalAdminUpdateInput, DepartmentMunicipalAdminUncheckedUpdateInput>
  }

  /**
   * DepartmentMunicipalAdmin delete
   */
  export type DepartmentMunicipalAdminDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentMunicipalAdmin
     */
    select?: DepartmentMunicipalAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepartmentMunicipalAdmin
     */
    omit?: DepartmentMunicipalAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentMunicipalAdminInclude<ExtArgs> | null
    /**
     * Filter which DepartmentMunicipalAdmin to delete.
     */
    where: DepartmentMunicipalAdminWhereUniqueInput
  }

  /**
   * DepartmentMunicipalAdmin deleteMany
   */
  export type DepartmentMunicipalAdminDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DepartmentMunicipalAdmins to delete
     */
    where?: DepartmentMunicipalAdminWhereInput
    /**
     * Limit how many DepartmentMunicipalAdmins to delete.
     */
    limit?: number
  }

  /**
   * DepartmentMunicipalAdmin.managedAgents
   */
  export type DepartmentMunicipalAdmin$managedAgentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agent
     */
    select?: AgentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Agent
     */
    omit?: AgentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentInclude<ExtArgs> | null
    where?: AgentWhereInput
    orderBy?: AgentOrderByWithRelationInput | AgentOrderByWithRelationInput[]
    cursor?: AgentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AgentScalarFieldEnum | AgentScalarFieldEnum[]
  }

  /**
   * DepartmentMunicipalAdmin.managedComplaints
   */
  export type DepartmentMunicipalAdmin$managedComplaintsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Complaint
     */
    select?: ComplaintSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Complaint
     */
    omit?: ComplaintOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintInclude<ExtArgs> | null
    where?: ComplaintWhereInput
    orderBy?: ComplaintOrderByWithRelationInput | ComplaintOrderByWithRelationInput[]
    cursor?: ComplaintWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ComplaintScalarFieldEnum | ComplaintScalarFieldEnum[]
  }

  /**
   * DepartmentMunicipalAdmin.communityModeration
   */
  export type DepartmentMunicipalAdmin$communityModerationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Complaint
     */
    select?: ComplaintSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Complaint
     */
    omit?: ComplaintOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintInclude<ExtArgs> | null
    where?: ComplaintWhereInput
    orderBy?: ComplaintOrderByWithRelationInput | ComplaintOrderByWithRelationInput[]
    cursor?: ComplaintWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ComplaintScalarFieldEnum | ComplaintScalarFieldEnum[]
  }

  /**
   * DepartmentMunicipalAdmin.newsUpdates
   */
  export type DepartmentMunicipalAdmin$newsUpdatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewsUpdate
     */
    select?: NewsUpdateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NewsUpdate
     */
    omit?: NewsUpdateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NewsUpdateInclude<ExtArgs> | null
    where?: NewsUpdateWhereInput
    orderBy?: NewsUpdateOrderByWithRelationInput | NewsUpdateOrderByWithRelationInput[]
    cursor?: NewsUpdateWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NewsUpdateScalarFieldEnum | NewsUpdateScalarFieldEnum[]
  }

  /**
   * DepartmentMunicipalAdmin.managedByStateAdmin
   */
  export type DepartmentMunicipalAdmin$managedByStateAdminArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentStateAdmin
     */
    select?: DepartmentStateAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepartmentStateAdmin
     */
    omit?: DepartmentStateAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentStateAdminInclude<ExtArgs> | null
    where?: DepartmentStateAdminWhereInput
  }

  /**
   * DepartmentMunicipalAdmin.managedBySuperMunicipal
   */
  export type DepartmentMunicipalAdmin$managedBySuperMunicipalArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuperMunicipalAdmin
     */
    select?: SuperMunicipalAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SuperMunicipalAdmin
     */
    omit?: SuperMunicipalAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SuperMunicipalAdminInclude<ExtArgs> | null
    where?: SuperMunicipalAdminWhereInput
  }

  /**
   * DepartmentMunicipalAdmin without action
   */
  export type DepartmentMunicipalAdminDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentMunicipalAdmin
     */
    select?: DepartmentMunicipalAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepartmentMunicipalAdmin
     */
    omit?: DepartmentMunicipalAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentMunicipalAdminInclude<ExtArgs> | null
  }


  /**
   * Model SuperMunicipalAdmin
   */

  export type AggregateSuperMunicipalAdmin = {
    _count: SuperMunicipalAdminCountAggregateOutputType | null
    _avg: SuperMunicipalAdminAvgAggregateOutputType | null
    _sum: SuperMunicipalAdminSumAggregateOutputType | null
    _min: SuperMunicipalAdminMinAggregateOutputType | null
    _max: SuperMunicipalAdminMaxAggregateOutputType | null
  }

  export type SuperMunicipalAdminAvgAggregateOutputType = {
    municipalityResolutionRate: number | null
    crossDepartmentSuccess: number | null
  }

  export type SuperMunicipalAdminSumAggregateOutputType = {
    municipalityResolutionRate: number | null
    crossDepartmentSuccess: number | null
  }

  export type SuperMunicipalAdminMinAggregateOutputType = {
    id: string | null
    fullName: string | null
    adminId: string | null
    officialEmail: string | null
    password: string | null
    phoneNumber: string | null
    municipality: string | null
    accessLevel: string | null
    dateOfCreation: Date | null
    lastUpdated: Date | null
    status: string | null
    lastLogin: Date | null
    municipalityResolutionRate: number | null
    crossDepartmentSuccess: number | null
    managedBySuperStateId: string | null
  }

  export type SuperMunicipalAdminMaxAggregateOutputType = {
    id: string | null
    fullName: string | null
    adminId: string | null
    officialEmail: string | null
    password: string | null
    phoneNumber: string | null
    municipality: string | null
    accessLevel: string | null
    dateOfCreation: Date | null
    lastUpdated: Date | null
    status: string | null
    lastLogin: Date | null
    municipalityResolutionRate: number | null
    crossDepartmentSuccess: number | null
    managedBySuperStateId: string | null
  }

  export type SuperMunicipalAdminCountAggregateOutputType = {
    id: number
    fullName: number
    adminId: number
    officialEmail: number
    password: number
    phoneNumber: number
    municipality: number
    accessLevel: number
    dateOfCreation: number
    lastUpdated: number
    status: number
    lastLogin: number
    municipalityResolutionRate: number
    crossDepartmentSuccess: number
    managedBySuperStateId: number
    _all: number
  }


  export type SuperMunicipalAdminAvgAggregateInputType = {
    municipalityResolutionRate?: true
    crossDepartmentSuccess?: true
  }

  export type SuperMunicipalAdminSumAggregateInputType = {
    municipalityResolutionRate?: true
    crossDepartmentSuccess?: true
  }

  export type SuperMunicipalAdminMinAggregateInputType = {
    id?: true
    fullName?: true
    adminId?: true
    officialEmail?: true
    password?: true
    phoneNumber?: true
    municipality?: true
    accessLevel?: true
    dateOfCreation?: true
    lastUpdated?: true
    status?: true
    lastLogin?: true
    municipalityResolutionRate?: true
    crossDepartmentSuccess?: true
    managedBySuperStateId?: true
  }

  export type SuperMunicipalAdminMaxAggregateInputType = {
    id?: true
    fullName?: true
    adminId?: true
    officialEmail?: true
    password?: true
    phoneNumber?: true
    municipality?: true
    accessLevel?: true
    dateOfCreation?: true
    lastUpdated?: true
    status?: true
    lastLogin?: true
    municipalityResolutionRate?: true
    crossDepartmentSuccess?: true
    managedBySuperStateId?: true
  }

  export type SuperMunicipalAdminCountAggregateInputType = {
    id?: true
    fullName?: true
    adminId?: true
    officialEmail?: true
    password?: true
    phoneNumber?: true
    municipality?: true
    accessLevel?: true
    dateOfCreation?: true
    lastUpdated?: true
    status?: true
    lastLogin?: true
    municipalityResolutionRate?: true
    crossDepartmentSuccess?: true
    managedBySuperStateId?: true
    _all?: true
  }

  export type SuperMunicipalAdminAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SuperMunicipalAdmin to aggregate.
     */
    where?: SuperMunicipalAdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SuperMunicipalAdmins to fetch.
     */
    orderBy?: SuperMunicipalAdminOrderByWithRelationInput | SuperMunicipalAdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SuperMunicipalAdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SuperMunicipalAdmins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SuperMunicipalAdmins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SuperMunicipalAdmins
    **/
    _count?: true | SuperMunicipalAdminCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SuperMunicipalAdminAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SuperMunicipalAdminSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SuperMunicipalAdminMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SuperMunicipalAdminMaxAggregateInputType
  }

  export type GetSuperMunicipalAdminAggregateType<T extends SuperMunicipalAdminAggregateArgs> = {
        [P in keyof T & keyof AggregateSuperMunicipalAdmin]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSuperMunicipalAdmin[P]>
      : GetScalarType<T[P], AggregateSuperMunicipalAdmin[P]>
  }




  export type SuperMunicipalAdminGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SuperMunicipalAdminWhereInput
    orderBy?: SuperMunicipalAdminOrderByWithAggregationInput | SuperMunicipalAdminOrderByWithAggregationInput[]
    by: SuperMunicipalAdminScalarFieldEnum[] | SuperMunicipalAdminScalarFieldEnum
    having?: SuperMunicipalAdminScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SuperMunicipalAdminCountAggregateInputType | true
    _avg?: SuperMunicipalAdminAvgAggregateInputType
    _sum?: SuperMunicipalAdminSumAggregateInputType
    _min?: SuperMunicipalAdminMinAggregateInputType
    _max?: SuperMunicipalAdminMaxAggregateInputType
  }

  export type SuperMunicipalAdminGroupByOutputType = {
    id: string
    fullName: string
    adminId: string
    officialEmail: string
    password: string
    phoneNumber: string | null
    municipality: string
    accessLevel: string
    dateOfCreation: Date
    lastUpdated: Date
    status: string
    lastLogin: Date | null
    municipalityResolutionRate: number
    crossDepartmentSuccess: number
    managedBySuperStateId: string | null
    _count: SuperMunicipalAdminCountAggregateOutputType | null
    _avg: SuperMunicipalAdminAvgAggregateOutputType | null
    _sum: SuperMunicipalAdminSumAggregateOutputType | null
    _min: SuperMunicipalAdminMinAggregateOutputType | null
    _max: SuperMunicipalAdminMaxAggregateOutputType | null
  }

  type GetSuperMunicipalAdminGroupByPayload<T extends SuperMunicipalAdminGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SuperMunicipalAdminGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SuperMunicipalAdminGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SuperMunicipalAdminGroupByOutputType[P]>
            : GetScalarType<T[P], SuperMunicipalAdminGroupByOutputType[P]>
        }
      >
    >


  export type SuperMunicipalAdminSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fullName?: boolean
    adminId?: boolean
    officialEmail?: boolean
    password?: boolean
    phoneNumber?: boolean
    municipality?: boolean
    accessLevel?: boolean
    dateOfCreation?: boolean
    lastUpdated?: boolean
    status?: boolean
    lastLogin?: boolean
    municipalityResolutionRate?: boolean
    crossDepartmentSuccess?: boolean
    managedBySuperStateId?: boolean
    managedDepartmentAdmins?: boolean | SuperMunicipalAdmin$managedDepartmentAdminsArgs<ExtArgs>
    crossDepartmentIssues?: boolean | SuperMunicipalAdmin$crossDepartmentIssuesArgs<ExtArgs>
    managedBySuperState?: boolean | SuperMunicipalAdmin$managedBySuperStateArgs<ExtArgs>
    _count?: boolean | SuperMunicipalAdminCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["superMunicipalAdmin"]>

  export type SuperMunicipalAdminSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fullName?: boolean
    adminId?: boolean
    officialEmail?: boolean
    password?: boolean
    phoneNumber?: boolean
    municipality?: boolean
    accessLevel?: boolean
    dateOfCreation?: boolean
    lastUpdated?: boolean
    status?: boolean
    lastLogin?: boolean
    municipalityResolutionRate?: boolean
    crossDepartmentSuccess?: boolean
    managedBySuperStateId?: boolean
    managedBySuperState?: boolean | SuperMunicipalAdmin$managedBySuperStateArgs<ExtArgs>
  }, ExtArgs["result"]["superMunicipalAdmin"]>

  export type SuperMunicipalAdminSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fullName?: boolean
    adminId?: boolean
    officialEmail?: boolean
    password?: boolean
    phoneNumber?: boolean
    municipality?: boolean
    accessLevel?: boolean
    dateOfCreation?: boolean
    lastUpdated?: boolean
    status?: boolean
    lastLogin?: boolean
    municipalityResolutionRate?: boolean
    crossDepartmentSuccess?: boolean
    managedBySuperStateId?: boolean
    managedBySuperState?: boolean | SuperMunicipalAdmin$managedBySuperStateArgs<ExtArgs>
  }, ExtArgs["result"]["superMunicipalAdmin"]>

  export type SuperMunicipalAdminSelectScalar = {
    id?: boolean
    fullName?: boolean
    adminId?: boolean
    officialEmail?: boolean
    password?: boolean
    phoneNumber?: boolean
    municipality?: boolean
    accessLevel?: boolean
    dateOfCreation?: boolean
    lastUpdated?: boolean
    status?: boolean
    lastLogin?: boolean
    municipalityResolutionRate?: boolean
    crossDepartmentSuccess?: boolean
    managedBySuperStateId?: boolean
  }

  export type SuperMunicipalAdminOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "fullName" | "adminId" | "officialEmail" | "password" | "phoneNumber" | "municipality" | "accessLevel" | "dateOfCreation" | "lastUpdated" | "status" | "lastLogin" | "municipalityResolutionRate" | "crossDepartmentSuccess" | "managedBySuperStateId", ExtArgs["result"]["superMunicipalAdmin"]>
  export type SuperMunicipalAdminInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    managedDepartmentAdmins?: boolean | SuperMunicipalAdmin$managedDepartmentAdminsArgs<ExtArgs>
    crossDepartmentIssues?: boolean | SuperMunicipalAdmin$crossDepartmentIssuesArgs<ExtArgs>
    managedBySuperState?: boolean | SuperMunicipalAdmin$managedBySuperStateArgs<ExtArgs>
    _count?: boolean | SuperMunicipalAdminCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SuperMunicipalAdminIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    managedBySuperState?: boolean | SuperMunicipalAdmin$managedBySuperStateArgs<ExtArgs>
  }
  export type SuperMunicipalAdminIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    managedBySuperState?: boolean | SuperMunicipalAdmin$managedBySuperStateArgs<ExtArgs>
  }

  export type $SuperMunicipalAdminPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SuperMunicipalAdmin"
    objects: {
      managedDepartmentAdmins: Prisma.$DepartmentMunicipalAdminPayload<ExtArgs>[]
      crossDepartmentIssues: Prisma.$ComplaintPayload<ExtArgs>[]
      managedBySuperState: Prisma.$SuperStateAdminPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      fullName: string
      adminId: string
      officialEmail: string
      password: string
      phoneNumber: string | null
      municipality: string
      accessLevel: string
      dateOfCreation: Date
      lastUpdated: Date
      status: string
      lastLogin: Date | null
      municipalityResolutionRate: number
      crossDepartmentSuccess: number
      managedBySuperStateId: string | null
    }, ExtArgs["result"]["superMunicipalAdmin"]>
    composites: {}
  }

  type SuperMunicipalAdminGetPayload<S extends boolean | null | undefined | SuperMunicipalAdminDefaultArgs> = $Result.GetResult<Prisma.$SuperMunicipalAdminPayload, S>

  type SuperMunicipalAdminCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SuperMunicipalAdminFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SuperMunicipalAdminCountAggregateInputType | true
    }

  export interface SuperMunicipalAdminDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SuperMunicipalAdmin'], meta: { name: 'SuperMunicipalAdmin' } }
    /**
     * Find zero or one SuperMunicipalAdmin that matches the filter.
     * @param {SuperMunicipalAdminFindUniqueArgs} args - Arguments to find a SuperMunicipalAdmin
     * @example
     * // Get one SuperMunicipalAdmin
     * const superMunicipalAdmin = await prisma.superMunicipalAdmin.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SuperMunicipalAdminFindUniqueArgs>(args: SelectSubset<T, SuperMunicipalAdminFindUniqueArgs<ExtArgs>>): Prisma__SuperMunicipalAdminClient<$Result.GetResult<Prisma.$SuperMunicipalAdminPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SuperMunicipalAdmin that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SuperMunicipalAdminFindUniqueOrThrowArgs} args - Arguments to find a SuperMunicipalAdmin
     * @example
     * // Get one SuperMunicipalAdmin
     * const superMunicipalAdmin = await prisma.superMunicipalAdmin.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SuperMunicipalAdminFindUniqueOrThrowArgs>(args: SelectSubset<T, SuperMunicipalAdminFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SuperMunicipalAdminClient<$Result.GetResult<Prisma.$SuperMunicipalAdminPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SuperMunicipalAdmin that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuperMunicipalAdminFindFirstArgs} args - Arguments to find a SuperMunicipalAdmin
     * @example
     * // Get one SuperMunicipalAdmin
     * const superMunicipalAdmin = await prisma.superMunicipalAdmin.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SuperMunicipalAdminFindFirstArgs>(args?: SelectSubset<T, SuperMunicipalAdminFindFirstArgs<ExtArgs>>): Prisma__SuperMunicipalAdminClient<$Result.GetResult<Prisma.$SuperMunicipalAdminPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SuperMunicipalAdmin that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuperMunicipalAdminFindFirstOrThrowArgs} args - Arguments to find a SuperMunicipalAdmin
     * @example
     * // Get one SuperMunicipalAdmin
     * const superMunicipalAdmin = await prisma.superMunicipalAdmin.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SuperMunicipalAdminFindFirstOrThrowArgs>(args?: SelectSubset<T, SuperMunicipalAdminFindFirstOrThrowArgs<ExtArgs>>): Prisma__SuperMunicipalAdminClient<$Result.GetResult<Prisma.$SuperMunicipalAdminPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SuperMunicipalAdmins that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuperMunicipalAdminFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SuperMunicipalAdmins
     * const superMunicipalAdmins = await prisma.superMunicipalAdmin.findMany()
     * 
     * // Get first 10 SuperMunicipalAdmins
     * const superMunicipalAdmins = await prisma.superMunicipalAdmin.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const superMunicipalAdminWithIdOnly = await prisma.superMunicipalAdmin.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SuperMunicipalAdminFindManyArgs>(args?: SelectSubset<T, SuperMunicipalAdminFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SuperMunicipalAdminPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SuperMunicipalAdmin.
     * @param {SuperMunicipalAdminCreateArgs} args - Arguments to create a SuperMunicipalAdmin.
     * @example
     * // Create one SuperMunicipalAdmin
     * const SuperMunicipalAdmin = await prisma.superMunicipalAdmin.create({
     *   data: {
     *     // ... data to create a SuperMunicipalAdmin
     *   }
     * })
     * 
     */
    create<T extends SuperMunicipalAdminCreateArgs>(args: SelectSubset<T, SuperMunicipalAdminCreateArgs<ExtArgs>>): Prisma__SuperMunicipalAdminClient<$Result.GetResult<Prisma.$SuperMunicipalAdminPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SuperMunicipalAdmins.
     * @param {SuperMunicipalAdminCreateManyArgs} args - Arguments to create many SuperMunicipalAdmins.
     * @example
     * // Create many SuperMunicipalAdmins
     * const superMunicipalAdmin = await prisma.superMunicipalAdmin.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SuperMunicipalAdminCreateManyArgs>(args?: SelectSubset<T, SuperMunicipalAdminCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SuperMunicipalAdmins and returns the data saved in the database.
     * @param {SuperMunicipalAdminCreateManyAndReturnArgs} args - Arguments to create many SuperMunicipalAdmins.
     * @example
     * // Create many SuperMunicipalAdmins
     * const superMunicipalAdmin = await prisma.superMunicipalAdmin.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SuperMunicipalAdmins and only return the `id`
     * const superMunicipalAdminWithIdOnly = await prisma.superMunicipalAdmin.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SuperMunicipalAdminCreateManyAndReturnArgs>(args?: SelectSubset<T, SuperMunicipalAdminCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SuperMunicipalAdminPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SuperMunicipalAdmin.
     * @param {SuperMunicipalAdminDeleteArgs} args - Arguments to delete one SuperMunicipalAdmin.
     * @example
     * // Delete one SuperMunicipalAdmin
     * const SuperMunicipalAdmin = await prisma.superMunicipalAdmin.delete({
     *   where: {
     *     // ... filter to delete one SuperMunicipalAdmin
     *   }
     * })
     * 
     */
    delete<T extends SuperMunicipalAdminDeleteArgs>(args: SelectSubset<T, SuperMunicipalAdminDeleteArgs<ExtArgs>>): Prisma__SuperMunicipalAdminClient<$Result.GetResult<Prisma.$SuperMunicipalAdminPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SuperMunicipalAdmin.
     * @param {SuperMunicipalAdminUpdateArgs} args - Arguments to update one SuperMunicipalAdmin.
     * @example
     * // Update one SuperMunicipalAdmin
     * const superMunicipalAdmin = await prisma.superMunicipalAdmin.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SuperMunicipalAdminUpdateArgs>(args: SelectSubset<T, SuperMunicipalAdminUpdateArgs<ExtArgs>>): Prisma__SuperMunicipalAdminClient<$Result.GetResult<Prisma.$SuperMunicipalAdminPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SuperMunicipalAdmins.
     * @param {SuperMunicipalAdminDeleteManyArgs} args - Arguments to filter SuperMunicipalAdmins to delete.
     * @example
     * // Delete a few SuperMunicipalAdmins
     * const { count } = await prisma.superMunicipalAdmin.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SuperMunicipalAdminDeleteManyArgs>(args?: SelectSubset<T, SuperMunicipalAdminDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SuperMunicipalAdmins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuperMunicipalAdminUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SuperMunicipalAdmins
     * const superMunicipalAdmin = await prisma.superMunicipalAdmin.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SuperMunicipalAdminUpdateManyArgs>(args: SelectSubset<T, SuperMunicipalAdminUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SuperMunicipalAdmins and returns the data updated in the database.
     * @param {SuperMunicipalAdminUpdateManyAndReturnArgs} args - Arguments to update many SuperMunicipalAdmins.
     * @example
     * // Update many SuperMunicipalAdmins
     * const superMunicipalAdmin = await prisma.superMunicipalAdmin.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SuperMunicipalAdmins and only return the `id`
     * const superMunicipalAdminWithIdOnly = await prisma.superMunicipalAdmin.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SuperMunicipalAdminUpdateManyAndReturnArgs>(args: SelectSubset<T, SuperMunicipalAdminUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SuperMunicipalAdminPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SuperMunicipalAdmin.
     * @param {SuperMunicipalAdminUpsertArgs} args - Arguments to update or create a SuperMunicipalAdmin.
     * @example
     * // Update or create a SuperMunicipalAdmin
     * const superMunicipalAdmin = await prisma.superMunicipalAdmin.upsert({
     *   create: {
     *     // ... data to create a SuperMunicipalAdmin
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SuperMunicipalAdmin we want to update
     *   }
     * })
     */
    upsert<T extends SuperMunicipalAdminUpsertArgs>(args: SelectSubset<T, SuperMunicipalAdminUpsertArgs<ExtArgs>>): Prisma__SuperMunicipalAdminClient<$Result.GetResult<Prisma.$SuperMunicipalAdminPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SuperMunicipalAdmins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuperMunicipalAdminCountArgs} args - Arguments to filter SuperMunicipalAdmins to count.
     * @example
     * // Count the number of SuperMunicipalAdmins
     * const count = await prisma.superMunicipalAdmin.count({
     *   where: {
     *     // ... the filter for the SuperMunicipalAdmins we want to count
     *   }
     * })
    **/
    count<T extends SuperMunicipalAdminCountArgs>(
      args?: Subset<T, SuperMunicipalAdminCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SuperMunicipalAdminCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SuperMunicipalAdmin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuperMunicipalAdminAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SuperMunicipalAdminAggregateArgs>(args: Subset<T, SuperMunicipalAdminAggregateArgs>): Prisma.PrismaPromise<GetSuperMunicipalAdminAggregateType<T>>

    /**
     * Group by SuperMunicipalAdmin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuperMunicipalAdminGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SuperMunicipalAdminGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SuperMunicipalAdminGroupByArgs['orderBy'] }
        : { orderBy?: SuperMunicipalAdminGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SuperMunicipalAdminGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSuperMunicipalAdminGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SuperMunicipalAdmin model
   */
  readonly fields: SuperMunicipalAdminFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SuperMunicipalAdmin.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SuperMunicipalAdminClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    managedDepartmentAdmins<T extends SuperMunicipalAdmin$managedDepartmentAdminsArgs<ExtArgs> = {}>(args?: Subset<T, SuperMunicipalAdmin$managedDepartmentAdminsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentMunicipalAdminPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    crossDepartmentIssues<T extends SuperMunicipalAdmin$crossDepartmentIssuesArgs<ExtArgs> = {}>(args?: Subset<T, SuperMunicipalAdmin$crossDepartmentIssuesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComplaintPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    managedBySuperState<T extends SuperMunicipalAdmin$managedBySuperStateArgs<ExtArgs> = {}>(args?: Subset<T, SuperMunicipalAdmin$managedBySuperStateArgs<ExtArgs>>): Prisma__SuperStateAdminClient<$Result.GetResult<Prisma.$SuperStateAdminPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SuperMunicipalAdmin model
   */
  interface SuperMunicipalAdminFieldRefs {
    readonly id: FieldRef<"SuperMunicipalAdmin", 'String'>
    readonly fullName: FieldRef<"SuperMunicipalAdmin", 'String'>
    readonly adminId: FieldRef<"SuperMunicipalAdmin", 'String'>
    readonly officialEmail: FieldRef<"SuperMunicipalAdmin", 'String'>
    readonly password: FieldRef<"SuperMunicipalAdmin", 'String'>
    readonly phoneNumber: FieldRef<"SuperMunicipalAdmin", 'String'>
    readonly municipality: FieldRef<"SuperMunicipalAdmin", 'String'>
    readonly accessLevel: FieldRef<"SuperMunicipalAdmin", 'String'>
    readonly dateOfCreation: FieldRef<"SuperMunicipalAdmin", 'DateTime'>
    readonly lastUpdated: FieldRef<"SuperMunicipalAdmin", 'DateTime'>
    readonly status: FieldRef<"SuperMunicipalAdmin", 'String'>
    readonly lastLogin: FieldRef<"SuperMunicipalAdmin", 'DateTime'>
    readonly municipalityResolutionRate: FieldRef<"SuperMunicipalAdmin", 'Float'>
    readonly crossDepartmentSuccess: FieldRef<"SuperMunicipalAdmin", 'Int'>
    readonly managedBySuperStateId: FieldRef<"SuperMunicipalAdmin", 'String'>
  }
    

  // Custom InputTypes
  /**
   * SuperMunicipalAdmin findUnique
   */
  export type SuperMunicipalAdminFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuperMunicipalAdmin
     */
    select?: SuperMunicipalAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SuperMunicipalAdmin
     */
    omit?: SuperMunicipalAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SuperMunicipalAdminInclude<ExtArgs> | null
    /**
     * Filter, which SuperMunicipalAdmin to fetch.
     */
    where: SuperMunicipalAdminWhereUniqueInput
  }

  /**
   * SuperMunicipalAdmin findUniqueOrThrow
   */
  export type SuperMunicipalAdminFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuperMunicipalAdmin
     */
    select?: SuperMunicipalAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SuperMunicipalAdmin
     */
    omit?: SuperMunicipalAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SuperMunicipalAdminInclude<ExtArgs> | null
    /**
     * Filter, which SuperMunicipalAdmin to fetch.
     */
    where: SuperMunicipalAdminWhereUniqueInput
  }

  /**
   * SuperMunicipalAdmin findFirst
   */
  export type SuperMunicipalAdminFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuperMunicipalAdmin
     */
    select?: SuperMunicipalAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SuperMunicipalAdmin
     */
    omit?: SuperMunicipalAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SuperMunicipalAdminInclude<ExtArgs> | null
    /**
     * Filter, which SuperMunicipalAdmin to fetch.
     */
    where?: SuperMunicipalAdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SuperMunicipalAdmins to fetch.
     */
    orderBy?: SuperMunicipalAdminOrderByWithRelationInput | SuperMunicipalAdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SuperMunicipalAdmins.
     */
    cursor?: SuperMunicipalAdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SuperMunicipalAdmins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SuperMunicipalAdmins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SuperMunicipalAdmins.
     */
    distinct?: SuperMunicipalAdminScalarFieldEnum | SuperMunicipalAdminScalarFieldEnum[]
  }

  /**
   * SuperMunicipalAdmin findFirstOrThrow
   */
  export type SuperMunicipalAdminFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuperMunicipalAdmin
     */
    select?: SuperMunicipalAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SuperMunicipalAdmin
     */
    omit?: SuperMunicipalAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SuperMunicipalAdminInclude<ExtArgs> | null
    /**
     * Filter, which SuperMunicipalAdmin to fetch.
     */
    where?: SuperMunicipalAdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SuperMunicipalAdmins to fetch.
     */
    orderBy?: SuperMunicipalAdminOrderByWithRelationInput | SuperMunicipalAdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SuperMunicipalAdmins.
     */
    cursor?: SuperMunicipalAdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SuperMunicipalAdmins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SuperMunicipalAdmins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SuperMunicipalAdmins.
     */
    distinct?: SuperMunicipalAdminScalarFieldEnum | SuperMunicipalAdminScalarFieldEnum[]
  }

  /**
   * SuperMunicipalAdmin findMany
   */
  export type SuperMunicipalAdminFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuperMunicipalAdmin
     */
    select?: SuperMunicipalAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SuperMunicipalAdmin
     */
    omit?: SuperMunicipalAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SuperMunicipalAdminInclude<ExtArgs> | null
    /**
     * Filter, which SuperMunicipalAdmins to fetch.
     */
    where?: SuperMunicipalAdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SuperMunicipalAdmins to fetch.
     */
    orderBy?: SuperMunicipalAdminOrderByWithRelationInput | SuperMunicipalAdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SuperMunicipalAdmins.
     */
    cursor?: SuperMunicipalAdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SuperMunicipalAdmins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SuperMunicipalAdmins.
     */
    skip?: number
    distinct?: SuperMunicipalAdminScalarFieldEnum | SuperMunicipalAdminScalarFieldEnum[]
  }

  /**
   * SuperMunicipalAdmin create
   */
  export type SuperMunicipalAdminCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuperMunicipalAdmin
     */
    select?: SuperMunicipalAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SuperMunicipalAdmin
     */
    omit?: SuperMunicipalAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SuperMunicipalAdminInclude<ExtArgs> | null
    /**
     * The data needed to create a SuperMunicipalAdmin.
     */
    data: XOR<SuperMunicipalAdminCreateInput, SuperMunicipalAdminUncheckedCreateInput>
  }

  /**
   * SuperMunicipalAdmin createMany
   */
  export type SuperMunicipalAdminCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SuperMunicipalAdmins.
     */
    data: SuperMunicipalAdminCreateManyInput | SuperMunicipalAdminCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SuperMunicipalAdmin createManyAndReturn
   */
  export type SuperMunicipalAdminCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuperMunicipalAdmin
     */
    select?: SuperMunicipalAdminSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SuperMunicipalAdmin
     */
    omit?: SuperMunicipalAdminOmit<ExtArgs> | null
    /**
     * The data used to create many SuperMunicipalAdmins.
     */
    data: SuperMunicipalAdminCreateManyInput | SuperMunicipalAdminCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SuperMunicipalAdminIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SuperMunicipalAdmin update
   */
  export type SuperMunicipalAdminUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuperMunicipalAdmin
     */
    select?: SuperMunicipalAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SuperMunicipalAdmin
     */
    omit?: SuperMunicipalAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SuperMunicipalAdminInclude<ExtArgs> | null
    /**
     * The data needed to update a SuperMunicipalAdmin.
     */
    data: XOR<SuperMunicipalAdminUpdateInput, SuperMunicipalAdminUncheckedUpdateInput>
    /**
     * Choose, which SuperMunicipalAdmin to update.
     */
    where: SuperMunicipalAdminWhereUniqueInput
  }

  /**
   * SuperMunicipalAdmin updateMany
   */
  export type SuperMunicipalAdminUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SuperMunicipalAdmins.
     */
    data: XOR<SuperMunicipalAdminUpdateManyMutationInput, SuperMunicipalAdminUncheckedUpdateManyInput>
    /**
     * Filter which SuperMunicipalAdmins to update
     */
    where?: SuperMunicipalAdminWhereInput
    /**
     * Limit how many SuperMunicipalAdmins to update.
     */
    limit?: number
  }

  /**
   * SuperMunicipalAdmin updateManyAndReturn
   */
  export type SuperMunicipalAdminUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuperMunicipalAdmin
     */
    select?: SuperMunicipalAdminSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SuperMunicipalAdmin
     */
    omit?: SuperMunicipalAdminOmit<ExtArgs> | null
    /**
     * The data used to update SuperMunicipalAdmins.
     */
    data: XOR<SuperMunicipalAdminUpdateManyMutationInput, SuperMunicipalAdminUncheckedUpdateManyInput>
    /**
     * Filter which SuperMunicipalAdmins to update
     */
    where?: SuperMunicipalAdminWhereInput
    /**
     * Limit how many SuperMunicipalAdmins to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SuperMunicipalAdminIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * SuperMunicipalAdmin upsert
   */
  export type SuperMunicipalAdminUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuperMunicipalAdmin
     */
    select?: SuperMunicipalAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SuperMunicipalAdmin
     */
    omit?: SuperMunicipalAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SuperMunicipalAdminInclude<ExtArgs> | null
    /**
     * The filter to search for the SuperMunicipalAdmin to update in case it exists.
     */
    where: SuperMunicipalAdminWhereUniqueInput
    /**
     * In case the SuperMunicipalAdmin found by the `where` argument doesn't exist, create a new SuperMunicipalAdmin with this data.
     */
    create: XOR<SuperMunicipalAdminCreateInput, SuperMunicipalAdminUncheckedCreateInput>
    /**
     * In case the SuperMunicipalAdmin was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SuperMunicipalAdminUpdateInput, SuperMunicipalAdminUncheckedUpdateInput>
  }

  /**
   * SuperMunicipalAdmin delete
   */
  export type SuperMunicipalAdminDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuperMunicipalAdmin
     */
    select?: SuperMunicipalAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SuperMunicipalAdmin
     */
    omit?: SuperMunicipalAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SuperMunicipalAdminInclude<ExtArgs> | null
    /**
     * Filter which SuperMunicipalAdmin to delete.
     */
    where: SuperMunicipalAdminWhereUniqueInput
  }

  /**
   * SuperMunicipalAdmin deleteMany
   */
  export type SuperMunicipalAdminDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SuperMunicipalAdmins to delete
     */
    where?: SuperMunicipalAdminWhereInput
    /**
     * Limit how many SuperMunicipalAdmins to delete.
     */
    limit?: number
  }

  /**
   * SuperMunicipalAdmin.managedDepartmentAdmins
   */
  export type SuperMunicipalAdmin$managedDepartmentAdminsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentMunicipalAdmin
     */
    select?: DepartmentMunicipalAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepartmentMunicipalAdmin
     */
    omit?: DepartmentMunicipalAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentMunicipalAdminInclude<ExtArgs> | null
    where?: DepartmentMunicipalAdminWhereInput
    orderBy?: DepartmentMunicipalAdminOrderByWithRelationInput | DepartmentMunicipalAdminOrderByWithRelationInput[]
    cursor?: DepartmentMunicipalAdminWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DepartmentMunicipalAdminScalarFieldEnum | DepartmentMunicipalAdminScalarFieldEnum[]
  }

  /**
   * SuperMunicipalAdmin.crossDepartmentIssues
   */
  export type SuperMunicipalAdmin$crossDepartmentIssuesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Complaint
     */
    select?: ComplaintSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Complaint
     */
    omit?: ComplaintOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintInclude<ExtArgs> | null
    where?: ComplaintWhereInput
    orderBy?: ComplaintOrderByWithRelationInput | ComplaintOrderByWithRelationInput[]
    cursor?: ComplaintWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ComplaintScalarFieldEnum | ComplaintScalarFieldEnum[]
  }

  /**
   * SuperMunicipalAdmin.managedBySuperState
   */
  export type SuperMunicipalAdmin$managedBySuperStateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuperStateAdmin
     */
    select?: SuperStateAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SuperStateAdmin
     */
    omit?: SuperStateAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SuperStateAdminInclude<ExtArgs> | null
    where?: SuperStateAdminWhereInput
  }

  /**
   * SuperMunicipalAdmin without action
   */
  export type SuperMunicipalAdminDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuperMunicipalAdmin
     */
    select?: SuperMunicipalAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SuperMunicipalAdmin
     */
    omit?: SuperMunicipalAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SuperMunicipalAdminInclude<ExtArgs> | null
  }


  /**
   * Model DepartmentStateAdmin
   */

  export type AggregateDepartmentStateAdmin = {
    _count: DepartmentStateAdminCountAggregateOutputType | null
    _avg: DepartmentStateAdminAvgAggregateOutputType | null
    _sum: DepartmentStateAdminSumAggregateOutputType | null
    _min: DepartmentStateAdminMinAggregateOutputType | null
    _max: DepartmentStateAdminMaxAggregateOutputType | null
  }

  export type DepartmentStateAdminAvgAggregateOutputType = {
    stateResolutionRate: number | null
    systemicIssuesIdentified: number | null
  }

  export type DepartmentStateAdminSumAggregateOutputType = {
    stateResolutionRate: number | null
    systemicIssuesIdentified: number | null
  }

  export type DepartmentStateAdminMinAggregateOutputType = {
    id: string | null
    fullName: string | null
    adminId: string | null
    officialEmail: string | null
    password: string | null
    phoneNumber: string | null
    department: string | null
    state: string | null
    accessLevel: string | null
    dateOfCreation: Date | null
    lastUpdated: Date | null
    status: string | null
    lastLogin: Date | null
    stateResolutionRate: number | null
    systemicIssuesIdentified: number | null
    managedBySuperStateId: string | null
  }

  export type DepartmentStateAdminMaxAggregateOutputType = {
    id: string | null
    fullName: string | null
    adminId: string | null
    officialEmail: string | null
    password: string | null
    phoneNumber: string | null
    department: string | null
    state: string | null
    accessLevel: string | null
    dateOfCreation: Date | null
    lastUpdated: Date | null
    status: string | null
    lastLogin: Date | null
    stateResolutionRate: number | null
    systemicIssuesIdentified: number | null
    managedBySuperStateId: string | null
  }

  export type DepartmentStateAdminCountAggregateOutputType = {
    id: number
    fullName: number
    adminId: number
    officialEmail: number
    password: number
    phoneNumber: number
    department: number
    state: number
    accessLevel: number
    dateOfCreation: number
    lastUpdated: number
    status: number
    lastLogin: number
    stateResolutionRate: number
    systemicIssuesIdentified: number
    managedMunicipalities: number
    managedBySuperStateId: number
    _all: number
  }


  export type DepartmentStateAdminAvgAggregateInputType = {
    stateResolutionRate?: true
    systemicIssuesIdentified?: true
  }

  export type DepartmentStateAdminSumAggregateInputType = {
    stateResolutionRate?: true
    systemicIssuesIdentified?: true
  }

  export type DepartmentStateAdminMinAggregateInputType = {
    id?: true
    fullName?: true
    adminId?: true
    officialEmail?: true
    password?: true
    phoneNumber?: true
    department?: true
    state?: true
    accessLevel?: true
    dateOfCreation?: true
    lastUpdated?: true
    status?: true
    lastLogin?: true
    stateResolutionRate?: true
    systemicIssuesIdentified?: true
    managedBySuperStateId?: true
  }

  export type DepartmentStateAdminMaxAggregateInputType = {
    id?: true
    fullName?: true
    adminId?: true
    officialEmail?: true
    password?: true
    phoneNumber?: true
    department?: true
    state?: true
    accessLevel?: true
    dateOfCreation?: true
    lastUpdated?: true
    status?: true
    lastLogin?: true
    stateResolutionRate?: true
    systemicIssuesIdentified?: true
    managedBySuperStateId?: true
  }

  export type DepartmentStateAdminCountAggregateInputType = {
    id?: true
    fullName?: true
    adminId?: true
    officialEmail?: true
    password?: true
    phoneNumber?: true
    department?: true
    state?: true
    accessLevel?: true
    dateOfCreation?: true
    lastUpdated?: true
    status?: true
    lastLogin?: true
    stateResolutionRate?: true
    systemicIssuesIdentified?: true
    managedMunicipalities?: true
    managedBySuperStateId?: true
    _all?: true
  }

  export type DepartmentStateAdminAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DepartmentStateAdmin to aggregate.
     */
    where?: DepartmentStateAdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DepartmentStateAdmins to fetch.
     */
    orderBy?: DepartmentStateAdminOrderByWithRelationInput | DepartmentStateAdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DepartmentStateAdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DepartmentStateAdmins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DepartmentStateAdmins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DepartmentStateAdmins
    **/
    _count?: true | DepartmentStateAdminCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DepartmentStateAdminAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DepartmentStateAdminSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DepartmentStateAdminMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DepartmentStateAdminMaxAggregateInputType
  }

  export type GetDepartmentStateAdminAggregateType<T extends DepartmentStateAdminAggregateArgs> = {
        [P in keyof T & keyof AggregateDepartmentStateAdmin]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDepartmentStateAdmin[P]>
      : GetScalarType<T[P], AggregateDepartmentStateAdmin[P]>
  }




  export type DepartmentStateAdminGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepartmentStateAdminWhereInput
    orderBy?: DepartmentStateAdminOrderByWithAggregationInput | DepartmentStateAdminOrderByWithAggregationInput[]
    by: DepartmentStateAdminScalarFieldEnum[] | DepartmentStateAdminScalarFieldEnum
    having?: DepartmentStateAdminScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DepartmentStateAdminCountAggregateInputType | true
    _avg?: DepartmentStateAdminAvgAggregateInputType
    _sum?: DepartmentStateAdminSumAggregateInputType
    _min?: DepartmentStateAdminMinAggregateInputType
    _max?: DepartmentStateAdminMaxAggregateInputType
  }

  export type DepartmentStateAdminGroupByOutputType = {
    id: string
    fullName: string
    adminId: string
    officialEmail: string
    password: string
    phoneNumber: string | null
    department: string
    state: string
    accessLevel: string
    dateOfCreation: Date
    lastUpdated: Date
    status: string
    lastLogin: Date | null
    stateResolutionRate: number
    systemicIssuesIdentified: number
    managedMunicipalities: string[]
    managedBySuperStateId: string | null
    _count: DepartmentStateAdminCountAggregateOutputType | null
    _avg: DepartmentStateAdminAvgAggregateOutputType | null
    _sum: DepartmentStateAdminSumAggregateOutputType | null
    _min: DepartmentStateAdminMinAggregateOutputType | null
    _max: DepartmentStateAdminMaxAggregateOutputType | null
  }

  type GetDepartmentStateAdminGroupByPayload<T extends DepartmentStateAdminGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DepartmentStateAdminGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DepartmentStateAdminGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DepartmentStateAdminGroupByOutputType[P]>
            : GetScalarType<T[P], DepartmentStateAdminGroupByOutputType[P]>
        }
      >
    >


  export type DepartmentStateAdminSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fullName?: boolean
    adminId?: boolean
    officialEmail?: boolean
    password?: boolean
    phoneNumber?: boolean
    department?: boolean
    state?: boolean
    accessLevel?: boolean
    dateOfCreation?: boolean
    lastUpdated?: boolean
    status?: boolean
    lastLogin?: boolean
    stateResolutionRate?: boolean
    systemicIssuesIdentified?: boolean
    managedMunicipalities?: boolean
    managedBySuperStateId?: boolean
    managedMunicipalAdmins?: boolean | DepartmentStateAdmin$managedMunicipalAdminsArgs<ExtArgs>
    escalatedComplaints?: boolean | DepartmentStateAdmin$escalatedComplaintsArgs<ExtArgs>
    regionalWorkflows?: boolean | DepartmentStateAdmin$regionalWorkflowsArgs<ExtArgs>
    managedCategories?: boolean | DepartmentStateAdmin$managedCategoriesArgs<ExtArgs>
    managedBySuperState?: boolean | DepartmentStateAdmin$managedBySuperStateArgs<ExtArgs>
    _count?: boolean | DepartmentStateAdminCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["departmentStateAdmin"]>

  export type DepartmentStateAdminSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fullName?: boolean
    adminId?: boolean
    officialEmail?: boolean
    password?: boolean
    phoneNumber?: boolean
    department?: boolean
    state?: boolean
    accessLevel?: boolean
    dateOfCreation?: boolean
    lastUpdated?: boolean
    status?: boolean
    lastLogin?: boolean
    stateResolutionRate?: boolean
    systemicIssuesIdentified?: boolean
    managedMunicipalities?: boolean
    managedBySuperStateId?: boolean
    managedBySuperState?: boolean | DepartmentStateAdmin$managedBySuperStateArgs<ExtArgs>
  }, ExtArgs["result"]["departmentStateAdmin"]>

  export type DepartmentStateAdminSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fullName?: boolean
    adminId?: boolean
    officialEmail?: boolean
    password?: boolean
    phoneNumber?: boolean
    department?: boolean
    state?: boolean
    accessLevel?: boolean
    dateOfCreation?: boolean
    lastUpdated?: boolean
    status?: boolean
    lastLogin?: boolean
    stateResolutionRate?: boolean
    systemicIssuesIdentified?: boolean
    managedMunicipalities?: boolean
    managedBySuperStateId?: boolean
    managedBySuperState?: boolean | DepartmentStateAdmin$managedBySuperStateArgs<ExtArgs>
  }, ExtArgs["result"]["departmentStateAdmin"]>

  export type DepartmentStateAdminSelectScalar = {
    id?: boolean
    fullName?: boolean
    adminId?: boolean
    officialEmail?: boolean
    password?: boolean
    phoneNumber?: boolean
    department?: boolean
    state?: boolean
    accessLevel?: boolean
    dateOfCreation?: boolean
    lastUpdated?: boolean
    status?: boolean
    lastLogin?: boolean
    stateResolutionRate?: boolean
    systemicIssuesIdentified?: boolean
    managedMunicipalities?: boolean
    managedBySuperStateId?: boolean
  }

  export type DepartmentStateAdminOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "fullName" | "adminId" | "officialEmail" | "password" | "phoneNumber" | "department" | "state" | "accessLevel" | "dateOfCreation" | "lastUpdated" | "status" | "lastLogin" | "stateResolutionRate" | "systemicIssuesIdentified" | "managedMunicipalities" | "managedBySuperStateId", ExtArgs["result"]["departmentStateAdmin"]>
  export type DepartmentStateAdminInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    managedMunicipalAdmins?: boolean | DepartmentStateAdmin$managedMunicipalAdminsArgs<ExtArgs>
    escalatedComplaints?: boolean | DepartmentStateAdmin$escalatedComplaintsArgs<ExtArgs>
    regionalWorkflows?: boolean | DepartmentStateAdmin$regionalWorkflowsArgs<ExtArgs>
    managedCategories?: boolean | DepartmentStateAdmin$managedCategoriesArgs<ExtArgs>
    managedBySuperState?: boolean | DepartmentStateAdmin$managedBySuperStateArgs<ExtArgs>
    _count?: boolean | DepartmentStateAdminCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DepartmentStateAdminIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    managedBySuperState?: boolean | DepartmentStateAdmin$managedBySuperStateArgs<ExtArgs>
  }
  export type DepartmentStateAdminIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    managedBySuperState?: boolean | DepartmentStateAdmin$managedBySuperStateArgs<ExtArgs>
  }

  export type $DepartmentStateAdminPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DepartmentStateAdmin"
    objects: {
      managedMunicipalAdmins: Prisma.$DepartmentMunicipalAdminPayload<ExtArgs>[]
      escalatedComplaints: Prisma.$ComplaintPayload<ExtArgs>[]
      regionalWorkflows: Prisma.$RegionalWorkflowPayload<ExtArgs>[]
      managedCategories: Prisma.$CategoryPayload<ExtArgs>[]
      managedBySuperState: Prisma.$SuperStateAdminPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      fullName: string
      adminId: string
      officialEmail: string
      password: string
      phoneNumber: string | null
      department: string
      state: string
      accessLevel: string
      dateOfCreation: Date
      lastUpdated: Date
      status: string
      lastLogin: Date | null
      stateResolutionRate: number
      systemicIssuesIdentified: number
      managedMunicipalities: string[]
      managedBySuperStateId: string | null
    }, ExtArgs["result"]["departmentStateAdmin"]>
    composites: {}
  }

  type DepartmentStateAdminGetPayload<S extends boolean | null | undefined | DepartmentStateAdminDefaultArgs> = $Result.GetResult<Prisma.$DepartmentStateAdminPayload, S>

  type DepartmentStateAdminCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DepartmentStateAdminFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DepartmentStateAdminCountAggregateInputType | true
    }

  export interface DepartmentStateAdminDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DepartmentStateAdmin'], meta: { name: 'DepartmentStateAdmin' } }
    /**
     * Find zero or one DepartmentStateAdmin that matches the filter.
     * @param {DepartmentStateAdminFindUniqueArgs} args - Arguments to find a DepartmentStateAdmin
     * @example
     * // Get one DepartmentStateAdmin
     * const departmentStateAdmin = await prisma.departmentStateAdmin.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DepartmentStateAdminFindUniqueArgs>(args: SelectSubset<T, DepartmentStateAdminFindUniqueArgs<ExtArgs>>): Prisma__DepartmentStateAdminClient<$Result.GetResult<Prisma.$DepartmentStateAdminPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one DepartmentStateAdmin that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DepartmentStateAdminFindUniqueOrThrowArgs} args - Arguments to find a DepartmentStateAdmin
     * @example
     * // Get one DepartmentStateAdmin
     * const departmentStateAdmin = await prisma.departmentStateAdmin.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DepartmentStateAdminFindUniqueOrThrowArgs>(args: SelectSubset<T, DepartmentStateAdminFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DepartmentStateAdminClient<$Result.GetResult<Prisma.$DepartmentStateAdminPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DepartmentStateAdmin that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentStateAdminFindFirstArgs} args - Arguments to find a DepartmentStateAdmin
     * @example
     * // Get one DepartmentStateAdmin
     * const departmentStateAdmin = await prisma.departmentStateAdmin.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DepartmentStateAdminFindFirstArgs>(args?: SelectSubset<T, DepartmentStateAdminFindFirstArgs<ExtArgs>>): Prisma__DepartmentStateAdminClient<$Result.GetResult<Prisma.$DepartmentStateAdminPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DepartmentStateAdmin that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentStateAdminFindFirstOrThrowArgs} args - Arguments to find a DepartmentStateAdmin
     * @example
     * // Get one DepartmentStateAdmin
     * const departmentStateAdmin = await prisma.departmentStateAdmin.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DepartmentStateAdminFindFirstOrThrowArgs>(args?: SelectSubset<T, DepartmentStateAdminFindFirstOrThrowArgs<ExtArgs>>): Prisma__DepartmentStateAdminClient<$Result.GetResult<Prisma.$DepartmentStateAdminPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more DepartmentStateAdmins that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentStateAdminFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DepartmentStateAdmins
     * const departmentStateAdmins = await prisma.departmentStateAdmin.findMany()
     * 
     * // Get first 10 DepartmentStateAdmins
     * const departmentStateAdmins = await prisma.departmentStateAdmin.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const departmentStateAdminWithIdOnly = await prisma.departmentStateAdmin.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DepartmentStateAdminFindManyArgs>(args?: SelectSubset<T, DepartmentStateAdminFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentStateAdminPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a DepartmentStateAdmin.
     * @param {DepartmentStateAdminCreateArgs} args - Arguments to create a DepartmentStateAdmin.
     * @example
     * // Create one DepartmentStateAdmin
     * const DepartmentStateAdmin = await prisma.departmentStateAdmin.create({
     *   data: {
     *     // ... data to create a DepartmentStateAdmin
     *   }
     * })
     * 
     */
    create<T extends DepartmentStateAdminCreateArgs>(args: SelectSubset<T, DepartmentStateAdminCreateArgs<ExtArgs>>): Prisma__DepartmentStateAdminClient<$Result.GetResult<Prisma.$DepartmentStateAdminPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many DepartmentStateAdmins.
     * @param {DepartmentStateAdminCreateManyArgs} args - Arguments to create many DepartmentStateAdmins.
     * @example
     * // Create many DepartmentStateAdmins
     * const departmentStateAdmin = await prisma.departmentStateAdmin.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DepartmentStateAdminCreateManyArgs>(args?: SelectSubset<T, DepartmentStateAdminCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DepartmentStateAdmins and returns the data saved in the database.
     * @param {DepartmentStateAdminCreateManyAndReturnArgs} args - Arguments to create many DepartmentStateAdmins.
     * @example
     * // Create many DepartmentStateAdmins
     * const departmentStateAdmin = await prisma.departmentStateAdmin.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DepartmentStateAdmins and only return the `id`
     * const departmentStateAdminWithIdOnly = await prisma.departmentStateAdmin.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DepartmentStateAdminCreateManyAndReturnArgs>(args?: SelectSubset<T, DepartmentStateAdminCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentStateAdminPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a DepartmentStateAdmin.
     * @param {DepartmentStateAdminDeleteArgs} args - Arguments to delete one DepartmentStateAdmin.
     * @example
     * // Delete one DepartmentStateAdmin
     * const DepartmentStateAdmin = await prisma.departmentStateAdmin.delete({
     *   where: {
     *     // ... filter to delete one DepartmentStateAdmin
     *   }
     * })
     * 
     */
    delete<T extends DepartmentStateAdminDeleteArgs>(args: SelectSubset<T, DepartmentStateAdminDeleteArgs<ExtArgs>>): Prisma__DepartmentStateAdminClient<$Result.GetResult<Prisma.$DepartmentStateAdminPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one DepartmentStateAdmin.
     * @param {DepartmentStateAdminUpdateArgs} args - Arguments to update one DepartmentStateAdmin.
     * @example
     * // Update one DepartmentStateAdmin
     * const departmentStateAdmin = await prisma.departmentStateAdmin.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DepartmentStateAdminUpdateArgs>(args: SelectSubset<T, DepartmentStateAdminUpdateArgs<ExtArgs>>): Prisma__DepartmentStateAdminClient<$Result.GetResult<Prisma.$DepartmentStateAdminPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more DepartmentStateAdmins.
     * @param {DepartmentStateAdminDeleteManyArgs} args - Arguments to filter DepartmentStateAdmins to delete.
     * @example
     * // Delete a few DepartmentStateAdmins
     * const { count } = await prisma.departmentStateAdmin.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DepartmentStateAdminDeleteManyArgs>(args?: SelectSubset<T, DepartmentStateAdminDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DepartmentStateAdmins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentStateAdminUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DepartmentStateAdmins
     * const departmentStateAdmin = await prisma.departmentStateAdmin.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DepartmentStateAdminUpdateManyArgs>(args: SelectSubset<T, DepartmentStateAdminUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DepartmentStateAdmins and returns the data updated in the database.
     * @param {DepartmentStateAdminUpdateManyAndReturnArgs} args - Arguments to update many DepartmentStateAdmins.
     * @example
     * // Update many DepartmentStateAdmins
     * const departmentStateAdmin = await prisma.departmentStateAdmin.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more DepartmentStateAdmins and only return the `id`
     * const departmentStateAdminWithIdOnly = await prisma.departmentStateAdmin.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DepartmentStateAdminUpdateManyAndReturnArgs>(args: SelectSubset<T, DepartmentStateAdminUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentStateAdminPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one DepartmentStateAdmin.
     * @param {DepartmentStateAdminUpsertArgs} args - Arguments to update or create a DepartmentStateAdmin.
     * @example
     * // Update or create a DepartmentStateAdmin
     * const departmentStateAdmin = await prisma.departmentStateAdmin.upsert({
     *   create: {
     *     // ... data to create a DepartmentStateAdmin
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DepartmentStateAdmin we want to update
     *   }
     * })
     */
    upsert<T extends DepartmentStateAdminUpsertArgs>(args: SelectSubset<T, DepartmentStateAdminUpsertArgs<ExtArgs>>): Prisma__DepartmentStateAdminClient<$Result.GetResult<Prisma.$DepartmentStateAdminPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of DepartmentStateAdmins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentStateAdminCountArgs} args - Arguments to filter DepartmentStateAdmins to count.
     * @example
     * // Count the number of DepartmentStateAdmins
     * const count = await prisma.departmentStateAdmin.count({
     *   where: {
     *     // ... the filter for the DepartmentStateAdmins we want to count
     *   }
     * })
    **/
    count<T extends DepartmentStateAdminCountArgs>(
      args?: Subset<T, DepartmentStateAdminCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DepartmentStateAdminCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DepartmentStateAdmin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentStateAdminAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DepartmentStateAdminAggregateArgs>(args: Subset<T, DepartmentStateAdminAggregateArgs>): Prisma.PrismaPromise<GetDepartmentStateAdminAggregateType<T>>

    /**
     * Group by DepartmentStateAdmin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentStateAdminGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DepartmentStateAdminGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DepartmentStateAdminGroupByArgs['orderBy'] }
        : { orderBy?: DepartmentStateAdminGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DepartmentStateAdminGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDepartmentStateAdminGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DepartmentStateAdmin model
   */
  readonly fields: DepartmentStateAdminFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DepartmentStateAdmin.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DepartmentStateAdminClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    managedMunicipalAdmins<T extends DepartmentStateAdmin$managedMunicipalAdminsArgs<ExtArgs> = {}>(args?: Subset<T, DepartmentStateAdmin$managedMunicipalAdminsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentMunicipalAdminPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    escalatedComplaints<T extends DepartmentStateAdmin$escalatedComplaintsArgs<ExtArgs> = {}>(args?: Subset<T, DepartmentStateAdmin$escalatedComplaintsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComplaintPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    regionalWorkflows<T extends DepartmentStateAdmin$regionalWorkflowsArgs<ExtArgs> = {}>(args?: Subset<T, DepartmentStateAdmin$regionalWorkflowsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegionalWorkflowPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    managedCategories<T extends DepartmentStateAdmin$managedCategoriesArgs<ExtArgs> = {}>(args?: Subset<T, DepartmentStateAdmin$managedCategoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    managedBySuperState<T extends DepartmentStateAdmin$managedBySuperStateArgs<ExtArgs> = {}>(args?: Subset<T, DepartmentStateAdmin$managedBySuperStateArgs<ExtArgs>>): Prisma__SuperStateAdminClient<$Result.GetResult<Prisma.$SuperStateAdminPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DepartmentStateAdmin model
   */
  interface DepartmentStateAdminFieldRefs {
    readonly id: FieldRef<"DepartmentStateAdmin", 'String'>
    readonly fullName: FieldRef<"DepartmentStateAdmin", 'String'>
    readonly adminId: FieldRef<"DepartmentStateAdmin", 'String'>
    readonly officialEmail: FieldRef<"DepartmentStateAdmin", 'String'>
    readonly password: FieldRef<"DepartmentStateAdmin", 'String'>
    readonly phoneNumber: FieldRef<"DepartmentStateAdmin", 'String'>
    readonly department: FieldRef<"DepartmentStateAdmin", 'String'>
    readonly state: FieldRef<"DepartmentStateAdmin", 'String'>
    readonly accessLevel: FieldRef<"DepartmentStateAdmin", 'String'>
    readonly dateOfCreation: FieldRef<"DepartmentStateAdmin", 'DateTime'>
    readonly lastUpdated: FieldRef<"DepartmentStateAdmin", 'DateTime'>
    readonly status: FieldRef<"DepartmentStateAdmin", 'String'>
    readonly lastLogin: FieldRef<"DepartmentStateAdmin", 'DateTime'>
    readonly stateResolutionRate: FieldRef<"DepartmentStateAdmin", 'Float'>
    readonly systemicIssuesIdentified: FieldRef<"DepartmentStateAdmin", 'Int'>
    readonly managedMunicipalities: FieldRef<"DepartmentStateAdmin", 'String[]'>
    readonly managedBySuperStateId: FieldRef<"DepartmentStateAdmin", 'String'>
  }
    

  // Custom InputTypes
  /**
   * DepartmentStateAdmin findUnique
   */
  export type DepartmentStateAdminFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentStateAdmin
     */
    select?: DepartmentStateAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepartmentStateAdmin
     */
    omit?: DepartmentStateAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentStateAdminInclude<ExtArgs> | null
    /**
     * Filter, which DepartmentStateAdmin to fetch.
     */
    where: DepartmentStateAdminWhereUniqueInput
  }

  /**
   * DepartmentStateAdmin findUniqueOrThrow
   */
  export type DepartmentStateAdminFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentStateAdmin
     */
    select?: DepartmentStateAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepartmentStateAdmin
     */
    omit?: DepartmentStateAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentStateAdminInclude<ExtArgs> | null
    /**
     * Filter, which DepartmentStateAdmin to fetch.
     */
    where: DepartmentStateAdminWhereUniqueInput
  }

  /**
   * DepartmentStateAdmin findFirst
   */
  export type DepartmentStateAdminFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentStateAdmin
     */
    select?: DepartmentStateAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepartmentStateAdmin
     */
    omit?: DepartmentStateAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentStateAdminInclude<ExtArgs> | null
    /**
     * Filter, which DepartmentStateAdmin to fetch.
     */
    where?: DepartmentStateAdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DepartmentStateAdmins to fetch.
     */
    orderBy?: DepartmentStateAdminOrderByWithRelationInput | DepartmentStateAdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DepartmentStateAdmins.
     */
    cursor?: DepartmentStateAdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DepartmentStateAdmins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DepartmentStateAdmins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DepartmentStateAdmins.
     */
    distinct?: DepartmentStateAdminScalarFieldEnum | DepartmentStateAdminScalarFieldEnum[]
  }

  /**
   * DepartmentStateAdmin findFirstOrThrow
   */
  export type DepartmentStateAdminFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentStateAdmin
     */
    select?: DepartmentStateAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepartmentStateAdmin
     */
    omit?: DepartmentStateAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentStateAdminInclude<ExtArgs> | null
    /**
     * Filter, which DepartmentStateAdmin to fetch.
     */
    where?: DepartmentStateAdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DepartmentStateAdmins to fetch.
     */
    orderBy?: DepartmentStateAdminOrderByWithRelationInput | DepartmentStateAdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DepartmentStateAdmins.
     */
    cursor?: DepartmentStateAdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DepartmentStateAdmins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DepartmentStateAdmins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DepartmentStateAdmins.
     */
    distinct?: DepartmentStateAdminScalarFieldEnum | DepartmentStateAdminScalarFieldEnum[]
  }

  /**
   * DepartmentStateAdmin findMany
   */
  export type DepartmentStateAdminFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentStateAdmin
     */
    select?: DepartmentStateAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepartmentStateAdmin
     */
    omit?: DepartmentStateAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentStateAdminInclude<ExtArgs> | null
    /**
     * Filter, which DepartmentStateAdmins to fetch.
     */
    where?: DepartmentStateAdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DepartmentStateAdmins to fetch.
     */
    orderBy?: DepartmentStateAdminOrderByWithRelationInput | DepartmentStateAdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DepartmentStateAdmins.
     */
    cursor?: DepartmentStateAdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DepartmentStateAdmins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DepartmentStateAdmins.
     */
    skip?: number
    distinct?: DepartmentStateAdminScalarFieldEnum | DepartmentStateAdminScalarFieldEnum[]
  }

  /**
   * DepartmentStateAdmin create
   */
  export type DepartmentStateAdminCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentStateAdmin
     */
    select?: DepartmentStateAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepartmentStateAdmin
     */
    omit?: DepartmentStateAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentStateAdminInclude<ExtArgs> | null
    /**
     * The data needed to create a DepartmentStateAdmin.
     */
    data: XOR<DepartmentStateAdminCreateInput, DepartmentStateAdminUncheckedCreateInput>
  }

  /**
   * DepartmentStateAdmin createMany
   */
  export type DepartmentStateAdminCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DepartmentStateAdmins.
     */
    data: DepartmentStateAdminCreateManyInput | DepartmentStateAdminCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DepartmentStateAdmin createManyAndReturn
   */
  export type DepartmentStateAdminCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentStateAdmin
     */
    select?: DepartmentStateAdminSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DepartmentStateAdmin
     */
    omit?: DepartmentStateAdminOmit<ExtArgs> | null
    /**
     * The data used to create many DepartmentStateAdmins.
     */
    data: DepartmentStateAdminCreateManyInput | DepartmentStateAdminCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentStateAdminIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DepartmentStateAdmin update
   */
  export type DepartmentStateAdminUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentStateAdmin
     */
    select?: DepartmentStateAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepartmentStateAdmin
     */
    omit?: DepartmentStateAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentStateAdminInclude<ExtArgs> | null
    /**
     * The data needed to update a DepartmentStateAdmin.
     */
    data: XOR<DepartmentStateAdminUpdateInput, DepartmentStateAdminUncheckedUpdateInput>
    /**
     * Choose, which DepartmentStateAdmin to update.
     */
    where: DepartmentStateAdminWhereUniqueInput
  }

  /**
   * DepartmentStateAdmin updateMany
   */
  export type DepartmentStateAdminUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DepartmentStateAdmins.
     */
    data: XOR<DepartmentStateAdminUpdateManyMutationInput, DepartmentStateAdminUncheckedUpdateManyInput>
    /**
     * Filter which DepartmentStateAdmins to update
     */
    where?: DepartmentStateAdminWhereInput
    /**
     * Limit how many DepartmentStateAdmins to update.
     */
    limit?: number
  }

  /**
   * DepartmentStateAdmin updateManyAndReturn
   */
  export type DepartmentStateAdminUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentStateAdmin
     */
    select?: DepartmentStateAdminSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DepartmentStateAdmin
     */
    omit?: DepartmentStateAdminOmit<ExtArgs> | null
    /**
     * The data used to update DepartmentStateAdmins.
     */
    data: XOR<DepartmentStateAdminUpdateManyMutationInput, DepartmentStateAdminUncheckedUpdateManyInput>
    /**
     * Filter which DepartmentStateAdmins to update
     */
    where?: DepartmentStateAdminWhereInput
    /**
     * Limit how many DepartmentStateAdmins to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentStateAdminIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * DepartmentStateAdmin upsert
   */
  export type DepartmentStateAdminUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentStateAdmin
     */
    select?: DepartmentStateAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepartmentStateAdmin
     */
    omit?: DepartmentStateAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentStateAdminInclude<ExtArgs> | null
    /**
     * The filter to search for the DepartmentStateAdmin to update in case it exists.
     */
    where: DepartmentStateAdminWhereUniqueInput
    /**
     * In case the DepartmentStateAdmin found by the `where` argument doesn't exist, create a new DepartmentStateAdmin with this data.
     */
    create: XOR<DepartmentStateAdminCreateInput, DepartmentStateAdminUncheckedCreateInput>
    /**
     * In case the DepartmentStateAdmin was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DepartmentStateAdminUpdateInput, DepartmentStateAdminUncheckedUpdateInput>
  }

  /**
   * DepartmentStateAdmin delete
   */
  export type DepartmentStateAdminDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentStateAdmin
     */
    select?: DepartmentStateAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepartmentStateAdmin
     */
    omit?: DepartmentStateAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentStateAdminInclude<ExtArgs> | null
    /**
     * Filter which DepartmentStateAdmin to delete.
     */
    where: DepartmentStateAdminWhereUniqueInput
  }

  /**
   * DepartmentStateAdmin deleteMany
   */
  export type DepartmentStateAdminDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DepartmentStateAdmins to delete
     */
    where?: DepartmentStateAdminWhereInput
    /**
     * Limit how many DepartmentStateAdmins to delete.
     */
    limit?: number
  }

  /**
   * DepartmentStateAdmin.managedMunicipalAdmins
   */
  export type DepartmentStateAdmin$managedMunicipalAdminsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentMunicipalAdmin
     */
    select?: DepartmentMunicipalAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepartmentMunicipalAdmin
     */
    omit?: DepartmentMunicipalAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentMunicipalAdminInclude<ExtArgs> | null
    where?: DepartmentMunicipalAdminWhereInput
    orderBy?: DepartmentMunicipalAdminOrderByWithRelationInput | DepartmentMunicipalAdminOrderByWithRelationInput[]
    cursor?: DepartmentMunicipalAdminWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DepartmentMunicipalAdminScalarFieldEnum | DepartmentMunicipalAdminScalarFieldEnum[]
  }

  /**
   * DepartmentStateAdmin.escalatedComplaints
   */
  export type DepartmentStateAdmin$escalatedComplaintsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Complaint
     */
    select?: ComplaintSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Complaint
     */
    omit?: ComplaintOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintInclude<ExtArgs> | null
    where?: ComplaintWhereInput
    orderBy?: ComplaintOrderByWithRelationInput | ComplaintOrderByWithRelationInput[]
    cursor?: ComplaintWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ComplaintScalarFieldEnum | ComplaintScalarFieldEnum[]
  }

  /**
   * DepartmentStateAdmin.regionalWorkflows
   */
  export type DepartmentStateAdmin$regionalWorkflowsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegionalWorkflow
     */
    select?: RegionalWorkflowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RegionalWorkflow
     */
    omit?: RegionalWorkflowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionalWorkflowInclude<ExtArgs> | null
    where?: RegionalWorkflowWhereInput
    orderBy?: RegionalWorkflowOrderByWithRelationInput | RegionalWorkflowOrderByWithRelationInput[]
    cursor?: RegionalWorkflowWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RegionalWorkflowScalarFieldEnum | RegionalWorkflowScalarFieldEnum[]
  }

  /**
   * DepartmentStateAdmin.managedCategories
   */
  export type DepartmentStateAdmin$managedCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    cursor?: CategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * DepartmentStateAdmin.managedBySuperState
   */
  export type DepartmentStateAdmin$managedBySuperStateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuperStateAdmin
     */
    select?: SuperStateAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SuperStateAdmin
     */
    omit?: SuperStateAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SuperStateAdminInclude<ExtArgs> | null
    where?: SuperStateAdminWhereInput
  }

  /**
   * DepartmentStateAdmin without action
   */
  export type DepartmentStateAdminDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentStateAdmin
     */
    select?: DepartmentStateAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepartmentStateAdmin
     */
    omit?: DepartmentStateAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentStateAdminInclude<ExtArgs> | null
  }


  /**
   * Model SuperStateAdmin
   */

  export type AggregateSuperStateAdmin = {
    _count: SuperStateAdminCountAggregateOutputType | null
    _avg: SuperStateAdminAvgAggregateOutputType | null
    _sum: SuperStateAdminSumAggregateOutputType | null
    _min: SuperStateAdminMinAggregateOutputType | null
    _max: SuperStateAdminMaxAggregateOutputType | null
  }

  export type SuperStateAdminAvgAggregateOutputType = {
    stateResolutionRate: number | null
    crossDepartmentSuccess: number | null
  }

  export type SuperStateAdminSumAggregateOutputType = {
    stateResolutionRate: number | null
    crossDepartmentSuccess: number | null
  }

  export type SuperStateAdminMinAggregateOutputType = {
    id: string | null
    fullName: string | null
    adminId: string | null
    officialEmail: string | null
    phoneNumber: string | null
    password: string | null
    state: string | null
    accessLevel: string | null
    dateOfCreation: Date | null
    lastUpdated: Date | null
    status: string | null
    lastLogin: Date | null
    stateResolutionRate: number | null
    crossDepartmentSuccess: number | null
    managedBySuperAdminId: string | null
  }

  export type SuperStateAdminMaxAggregateOutputType = {
    id: string | null
    fullName: string | null
    adminId: string | null
    officialEmail: string | null
    phoneNumber: string | null
    password: string | null
    state: string | null
    accessLevel: string | null
    dateOfCreation: Date | null
    lastUpdated: Date | null
    status: string | null
    lastLogin: Date | null
    stateResolutionRate: number | null
    crossDepartmentSuccess: number | null
    managedBySuperAdminId: string | null
  }

  export type SuperStateAdminCountAggregateOutputType = {
    id: number
    fullName: number
    adminId: number
    officialEmail: number
    phoneNumber: number
    password: number
    state: number
    accessLevel: number
    dateOfCreation: number
    lastUpdated: number
    status: number
    lastLogin: number
    stateResolutionRate: number
    crossDepartmentSuccess: number
    managedBySuperAdminId: number
    _all: number
  }


  export type SuperStateAdminAvgAggregateInputType = {
    stateResolutionRate?: true
    crossDepartmentSuccess?: true
  }

  export type SuperStateAdminSumAggregateInputType = {
    stateResolutionRate?: true
    crossDepartmentSuccess?: true
  }

  export type SuperStateAdminMinAggregateInputType = {
    id?: true
    fullName?: true
    adminId?: true
    officialEmail?: true
    phoneNumber?: true
    password?: true
    state?: true
    accessLevel?: true
    dateOfCreation?: true
    lastUpdated?: true
    status?: true
    lastLogin?: true
    stateResolutionRate?: true
    crossDepartmentSuccess?: true
    managedBySuperAdminId?: true
  }

  export type SuperStateAdminMaxAggregateInputType = {
    id?: true
    fullName?: true
    adminId?: true
    officialEmail?: true
    phoneNumber?: true
    password?: true
    state?: true
    accessLevel?: true
    dateOfCreation?: true
    lastUpdated?: true
    status?: true
    lastLogin?: true
    stateResolutionRate?: true
    crossDepartmentSuccess?: true
    managedBySuperAdminId?: true
  }

  export type SuperStateAdminCountAggregateInputType = {
    id?: true
    fullName?: true
    adminId?: true
    officialEmail?: true
    phoneNumber?: true
    password?: true
    state?: true
    accessLevel?: true
    dateOfCreation?: true
    lastUpdated?: true
    status?: true
    lastLogin?: true
    stateResolutionRate?: true
    crossDepartmentSuccess?: true
    managedBySuperAdminId?: true
    _all?: true
  }

  export type SuperStateAdminAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SuperStateAdmin to aggregate.
     */
    where?: SuperStateAdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SuperStateAdmins to fetch.
     */
    orderBy?: SuperStateAdminOrderByWithRelationInput | SuperStateAdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SuperStateAdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SuperStateAdmins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SuperStateAdmins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SuperStateAdmins
    **/
    _count?: true | SuperStateAdminCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SuperStateAdminAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SuperStateAdminSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SuperStateAdminMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SuperStateAdminMaxAggregateInputType
  }

  export type GetSuperStateAdminAggregateType<T extends SuperStateAdminAggregateArgs> = {
        [P in keyof T & keyof AggregateSuperStateAdmin]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSuperStateAdmin[P]>
      : GetScalarType<T[P], AggregateSuperStateAdmin[P]>
  }




  export type SuperStateAdminGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SuperStateAdminWhereInput
    orderBy?: SuperStateAdminOrderByWithAggregationInput | SuperStateAdminOrderByWithAggregationInput[]
    by: SuperStateAdminScalarFieldEnum[] | SuperStateAdminScalarFieldEnum
    having?: SuperStateAdminScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SuperStateAdminCountAggregateInputType | true
    _avg?: SuperStateAdminAvgAggregateInputType
    _sum?: SuperStateAdminSumAggregateInputType
    _min?: SuperStateAdminMinAggregateInputType
    _max?: SuperStateAdminMaxAggregateInputType
  }

  export type SuperStateAdminGroupByOutputType = {
    id: string
    fullName: string
    adminId: string
    officialEmail: string
    phoneNumber: string | null
    password: string
    state: string
    accessLevel: string
    dateOfCreation: Date
    lastUpdated: Date
    status: string
    lastLogin: Date | null
    stateResolutionRate: number
    crossDepartmentSuccess: number
    managedBySuperAdminId: string | null
    _count: SuperStateAdminCountAggregateOutputType | null
    _avg: SuperStateAdminAvgAggregateOutputType | null
    _sum: SuperStateAdminSumAggregateOutputType | null
    _min: SuperStateAdminMinAggregateOutputType | null
    _max: SuperStateAdminMaxAggregateOutputType | null
  }

  type GetSuperStateAdminGroupByPayload<T extends SuperStateAdminGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SuperStateAdminGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SuperStateAdminGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SuperStateAdminGroupByOutputType[P]>
            : GetScalarType<T[P], SuperStateAdminGroupByOutputType[P]>
        }
      >
    >


  export type SuperStateAdminSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fullName?: boolean
    adminId?: boolean
    officialEmail?: boolean
    phoneNumber?: boolean
    password?: boolean
    state?: boolean
    accessLevel?: boolean
    dateOfCreation?: boolean
    lastUpdated?: boolean
    status?: boolean
    lastLogin?: boolean
    stateResolutionRate?: boolean
    crossDepartmentSuccess?: boolean
    managedBySuperAdminId?: boolean
    managedDepartmentAdmins?: boolean | SuperStateAdmin$managedDepartmentAdminsArgs<ExtArgs>
    managedSuperMunicipalAdmins?: boolean | SuperStateAdmin$managedSuperMunicipalAdminsArgs<ExtArgs>
    escalatedComplaints?: boolean | SuperStateAdmin$escalatedComplaintsArgs<ExtArgs>
    managedBySuperAdmin?: boolean | SuperStateAdmin$managedBySuperAdminArgs<ExtArgs>
    _count?: boolean | SuperStateAdminCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["superStateAdmin"]>

  export type SuperStateAdminSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fullName?: boolean
    adminId?: boolean
    officialEmail?: boolean
    phoneNumber?: boolean
    password?: boolean
    state?: boolean
    accessLevel?: boolean
    dateOfCreation?: boolean
    lastUpdated?: boolean
    status?: boolean
    lastLogin?: boolean
    stateResolutionRate?: boolean
    crossDepartmentSuccess?: boolean
    managedBySuperAdminId?: boolean
    managedBySuperAdmin?: boolean | SuperStateAdmin$managedBySuperAdminArgs<ExtArgs>
  }, ExtArgs["result"]["superStateAdmin"]>

  export type SuperStateAdminSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fullName?: boolean
    adminId?: boolean
    officialEmail?: boolean
    phoneNumber?: boolean
    password?: boolean
    state?: boolean
    accessLevel?: boolean
    dateOfCreation?: boolean
    lastUpdated?: boolean
    status?: boolean
    lastLogin?: boolean
    stateResolutionRate?: boolean
    crossDepartmentSuccess?: boolean
    managedBySuperAdminId?: boolean
    managedBySuperAdmin?: boolean | SuperStateAdmin$managedBySuperAdminArgs<ExtArgs>
  }, ExtArgs["result"]["superStateAdmin"]>

  export type SuperStateAdminSelectScalar = {
    id?: boolean
    fullName?: boolean
    adminId?: boolean
    officialEmail?: boolean
    phoneNumber?: boolean
    password?: boolean
    state?: boolean
    accessLevel?: boolean
    dateOfCreation?: boolean
    lastUpdated?: boolean
    status?: boolean
    lastLogin?: boolean
    stateResolutionRate?: boolean
    crossDepartmentSuccess?: boolean
    managedBySuperAdminId?: boolean
  }

  export type SuperStateAdminOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "fullName" | "adminId" | "officialEmail" | "phoneNumber" | "password" | "state" | "accessLevel" | "dateOfCreation" | "lastUpdated" | "status" | "lastLogin" | "stateResolutionRate" | "crossDepartmentSuccess" | "managedBySuperAdminId", ExtArgs["result"]["superStateAdmin"]>
  export type SuperStateAdminInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    managedDepartmentAdmins?: boolean | SuperStateAdmin$managedDepartmentAdminsArgs<ExtArgs>
    managedSuperMunicipalAdmins?: boolean | SuperStateAdmin$managedSuperMunicipalAdminsArgs<ExtArgs>
    escalatedComplaints?: boolean | SuperStateAdmin$escalatedComplaintsArgs<ExtArgs>
    managedBySuperAdmin?: boolean | SuperStateAdmin$managedBySuperAdminArgs<ExtArgs>
    _count?: boolean | SuperStateAdminCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SuperStateAdminIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    managedBySuperAdmin?: boolean | SuperStateAdmin$managedBySuperAdminArgs<ExtArgs>
  }
  export type SuperStateAdminIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    managedBySuperAdmin?: boolean | SuperStateAdmin$managedBySuperAdminArgs<ExtArgs>
  }

  export type $SuperStateAdminPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SuperStateAdmin"
    objects: {
      managedDepartmentAdmins: Prisma.$DepartmentStateAdminPayload<ExtArgs>[]
      managedSuperMunicipalAdmins: Prisma.$SuperMunicipalAdminPayload<ExtArgs>[]
      escalatedComplaints: Prisma.$ComplaintPayload<ExtArgs>[]
      managedBySuperAdmin: Prisma.$SuperAdminPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      fullName: string
      adminId: string
      officialEmail: string
      phoneNumber: string | null
      password: string
      state: string
      accessLevel: string
      dateOfCreation: Date
      lastUpdated: Date
      status: string
      lastLogin: Date | null
      stateResolutionRate: number
      crossDepartmentSuccess: number
      managedBySuperAdminId: string | null
    }, ExtArgs["result"]["superStateAdmin"]>
    composites: {}
  }

  type SuperStateAdminGetPayload<S extends boolean | null | undefined | SuperStateAdminDefaultArgs> = $Result.GetResult<Prisma.$SuperStateAdminPayload, S>

  type SuperStateAdminCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SuperStateAdminFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SuperStateAdminCountAggregateInputType | true
    }

  export interface SuperStateAdminDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SuperStateAdmin'], meta: { name: 'SuperStateAdmin' } }
    /**
     * Find zero or one SuperStateAdmin that matches the filter.
     * @param {SuperStateAdminFindUniqueArgs} args - Arguments to find a SuperStateAdmin
     * @example
     * // Get one SuperStateAdmin
     * const superStateAdmin = await prisma.superStateAdmin.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SuperStateAdminFindUniqueArgs>(args: SelectSubset<T, SuperStateAdminFindUniqueArgs<ExtArgs>>): Prisma__SuperStateAdminClient<$Result.GetResult<Prisma.$SuperStateAdminPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SuperStateAdmin that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SuperStateAdminFindUniqueOrThrowArgs} args - Arguments to find a SuperStateAdmin
     * @example
     * // Get one SuperStateAdmin
     * const superStateAdmin = await prisma.superStateAdmin.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SuperStateAdminFindUniqueOrThrowArgs>(args: SelectSubset<T, SuperStateAdminFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SuperStateAdminClient<$Result.GetResult<Prisma.$SuperStateAdminPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SuperStateAdmin that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuperStateAdminFindFirstArgs} args - Arguments to find a SuperStateAdmin
     * @example
     * // Get one SuperStateAdmin
     * const superStateAdmin = await prisma.superStateAdmin.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SuperStateAdminFindFirstArgs>(args?: SelectSubset<T, SuperStateAdminFindFirstArgs<ExtArgs>>): Prisma__SuperStateAdminClient<$Result.GetResult<Prisma.$SuperStateAdminPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SuperStateAdmin that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuperStateAdminFindFirstOrThrowArgs} args - Arguments to find a SuperStateAdmin
     * @example
     * // Get one SuperStateAdmin
     * const superStateAdmin = await prisma.superStateAdmin.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SuperStateAdminFindFirstOrThrowArgs>(args?: SelectSubset<T, SuperStateAdminFindFirstOrThrowArgs<ExtArgs>>): Prisma__SuperStateAdminClient<$Result.GetResult<Prisma.$SuperStateAdminPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SuperStateAdmins that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuperStateAdminFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SuperStateAdmins
     * const superStateAdmins = await prisma.superStateAdmin.findMany()
     * 
     * // Get first 10 SuperStateAdmins
     * const superStateAdmins = await prisma.superStateAdmin.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const superStateAdminWithIdOnly = await prisma.superStateAdmin.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SuperStateAdminFindManyArgs>(args?: SelectSubset<T, SuperStateAdminFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SuperStateAdminPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SuperStateAdmin.
     * @param {SuperStateAdminCreateArgs} args - Arguments to create a SuperStateAdmin.
     * @example
     * // Create one SuperStateAdmin
     * const SuperStateAdmin = await prisma.superStateAdmin.create({
     *   data: {
     *     // ... data to create a SuperStateAdmin
     *   }
     * })
     * 
     */
    create<T extends SuperStateAdminCreateArgs>(args: SelectSubset<T, SuperStateAdminCreateArgs<ExtArgs>>): Prisma__SuperStateAdminClient<$Result.GetResult<Prisma.$SuperStateAdminPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SuperStateAdmins.
     * @param {SuperStateAdminCreateManyArgs} args - Arguments to create many SuperStateAdmins.
     * @example
     * // Create many SuperStateAdmins
     * const superStateAdmin = await prisma.superStateAdmin.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SuperStateAdminCreateManyArgs>(args?: SelectSubset<T, SuperStateAdminCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SuperStateAdmins and returns the data saved in the database.
     * @param {SuperStateAdminCreateManyAndReturnArgs} args - Arguments to create many SuperStateAdmins.
     * @example
     * // Create many SuperStateAdmins
     * const superStateAdmin = await prisma.superStateAdmin.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SuperStateAdmins and only return the `id`
     * const superStateAdminWithIdOnly = await prisma.superStateAdmin.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SuperStateAdminCreateManyAndReturnArgs>(args?: SelectSubset<T, SuperStateAdminCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SuperStateAdminPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SuperStateAdmin.
     * @param {SuperStateAdminDeleteArgs} args - Arguments to delete one SuperStateAdmin.
     * @example
     * // Delete one SuperStateAdmin
     * const SuperStateAdmin = await prisma.superStateAdmin.delete({
     *   where: {
     *     // ... filter to delete one SuperStateAdmin
     *   }
     * })
     * 
     */
    delete<T extends SuperStateAdminDeleteArgs>(args: SelectSubset<T, SuperStateAdminDeleteArgs<ExtArgs>>): Prisma__SuperStateAdminClient<$Result.GetResult<Prisma.$SuperStateAdminPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SuperStateAdmin.
     * @param {SuperStateAdminUpdateArgs} args - Arguments to update one SuperStateAdmin.
     * @example
     * // Update one SuperStateAdmin
     * const superStateAdmin = await prisma.superStateAdmin.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SuperStateAdminUpdateArgs>(args: SelectSubset<T, SuperStateAdminUpdateArgs<ExtArgs>>): Prisma__SuperStateAdminClient<$Result.GetResult<Prisma.$SuperStateAdminPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SuperStateAdmins.
     * @param {SuperStateAdminDeleteManyArgs} args - Arguments to filter SuperStateAdmins to delete.
     * @example
     * // Delete a few SuperStateAdmins
     * const { count } = await prisma.superStateAdmin.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SuperStateAdminDeleteManyArgs>(args?: SelectSubset<T, SuperStateAdminDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SuperStateAdmins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuperStateAdminUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SuperStateAdmins
     * const superStateAdmin = await prisma.superStateAdmin.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SuperStateAdminUpdateManyArgs>(args: SelectSubset<T, SuperStateAdminUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SuperStateAdmins and returns the data updated in the database.
     * @param {SuperStateAdminUpdateManyAndReturnArgs} args - Arguments to update many SuperStateAdmins.
     * @example
     * // Update many SuperStateAdmins
     * const superStateAdmin = await prisma.superStateAdmin.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SuperStateAdmins and only return the `id`
     * const superStateAdminWithIdOnly = await prisma.superStateAdmin.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SuperStateAdminUpdateManyAndReturnArgs>(args: SelectSubset<T, SuperStateAdminUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SuperStateAdminPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SuperStateAdmin.
     * @param {SuperStateAdminUpsertArgs} args - Arguments to update or create a SuperStateAdmin.
     * @example
     * // Update or create a SuperStateAdmin
     * const superStateAdmin = await prisma.superStateAdmin.upsert({
     *   create: {
     *     // ... data to create a SuperStateAdmin
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SuperStateAdmin we want to update
     *   }
     * })
     */
    upsert<T extends SuperStateAdminUpsertArgs>(args: SelectSubset<T, SuperStateAdminUpsertArgs<ExtArgs>>): Prisma__SuperStateAdminClient<$Result.GetResult<Prisma.$SuperStateAdminPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SuperStateAdmins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuperStateAdminCountArgs} args - Arguments to filter SuperStateAdmins to count.
     * @example
     * // Count the number of SuperStateAdmins
     * const count = await prisma.superStateAdmin.count({
     *   where: {
     *     // ... the filter for the SuperStateAdmins we want to count
     *   }
     * })
    **/
    count<T extends SuperStateAdminCountArgs>(
      args?: Subset<T, SuperStateAdminCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SuperStateAdminCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SuperStateAdmin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuperStateAdminAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SuperStateAdminAggregateArgs>(args: Subset<T, SuperStateAdminAggregateArgs>): Prisma.PrismaPromise<GetSuperStateAdminAggregateType<T>>

    /**
     * Group by SuperStateAdmin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuperStateAdminGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SuperStateAdminGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SuperStateAdminGroupByArgs['orderBy'] }
        : { orderBy?: SuperStateAdminGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SuperStateAdminGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSuperStateAdminGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SuperStateAdmin model
   */
  readonly fields: SuperStateAdminFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SuperStateAdmin.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SuperStateAdminClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    managedDepartmentAdmins<T extends SuperStateAdmin$managedDepartmentAdminsArgs<ExtArgs> = {}>(args?: Subset<T, SuperStateAdmin$managedDepartmentAdminsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentStateAdminPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    managedSuperMunicipalAdmins<T extends SuperStateAdmin$managedSuperMunicipalAdminsArgs<ExtArgs> = {}>(args?: Subset<T, SuperStateAdmin$managedSuperMunicipalAdminsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SuperMunicipalAdminPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    escalatedComplaints<T extends SuperStateAdmin$escalatedComplaintsArgs<ExtArgs> = {}>(args?: Subset<T, SuperStateAdmin$escalatedComplaintsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComplaintPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    managedBySuperAdmin<T extends SuperStateAdmin$managedBySuperAdminArgs<ExtArgs> = {}>(args?: Subset<T, SuperStateAdmin$managedBySuperAdminArgs<ExtArgs>>): Prisma__SuperAdminClient<$Result.GetResult<Prisma.$SuperAdminPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SuperStateAdmin model
   */
  interface SuperStateAdminFieldRefs {
    readonly id: FieldRef<"SuperStateAdmin", 'String'>
    readonly fullName: FieldRef<"SuperStateAdmin", 'String'>
    readonly adminId: FieldRef<"SuperStateAdmin", 'String'>
    readonly officialEmail: FieldRef<"SuperStateAdmin", 'String'>
    readonly phoneNumber: FieldRef<"SuperStateAdmin", 'String'>
    readonly password: FieldRef<"SuperStateAdmin", 'String'>
    readonly state: FieldRef<"SuperStateAdmin", 'String'>
    readonly accessLevel: FieldRef<"SuperStateAdmin", 'String'>
    readonly dateOfCreation: FieldRef<"SuperStateAdmin", 'DateTime'>
    readonly lastUpdated: FieldRef<"SuperStateAdmin", 'DateTime'>
    readonly status: FieldRef<"SuperStateAdmin", 'String'>
    readonly lastLogin: FieldRef<"SuperStateAdmin", 'DateTime'>
    readonly stateResolutionRate: FieldRef<"SuperStateAdmin", 'Float'>
    readonly crossDepartmentSuccess: FieldRef<"SuperStateAdmin", 'Int'>
    readonly managedBySuperAdminId: FieldRef<"SuperStateAdmin", 'String'>
  }
    

  // Custom InputTypes
  /**
   * SuperStateAdmin findUnique
   */
  export type SuperStateAdminFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuperStateAdmin
     */
    select?: SuperStateAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SuperStateAdmin
     */
    omit?: SuperStateAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SuperStateAdminInclude<ExtArgs> | null
    /**
     * Filter, which SuperStateAdmin to fetch.
     */
    where: SuperStateAdminWhereUniqueInput
  }

  /**
   * SuperStateAdmin findUniqueOrThrow
   */
  export type SuperStateAdminFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuperStateAdmin
     */
    select?: SuperStateAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SuperStateAdmin
     */
    omit?: SuperStateAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SuperStateAdminInclude<ExtArgs> | null
    /**
     * Filter, which SuperStateAdmin to fetch.
     */
    where: SuperStateAdminWhereUniqueInput
  }

  /**
   * SuperStateAdmin findFirst
   */
  export type SuperStateAdminFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuperStateAdmin
     */
    select?: SuperStateAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SuperStateAdmin
     */
    omit?: SuperStateAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SuperStateAdminInclude<ExtArgs> | null
    /**
     * Filter, which SuperStateAdmin to fetch.
     */
    where?: SuperStateAdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SuperStateAdmins to fetch.
     */
    orderBy?: SuperStateAdminOrderByWithRelationInput | SuperStateAdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SuperStateAdmins.
     */
    cursor?: SuperStateAdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SuperStateAdmins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SuperStateAdmins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SuperStateAdmins.
     */
    distinct?: SuperStateAdminScalarFieldEnum | SuperStateAdminScalarFieldEnum[]
  }

  /**
   * SuperStateAdmin findFirstOrThrow
   */
  export type SuperStateAdminFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuperStateAdmin
     */
    select?: SuperStateAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SuperStateAdmin
     */
    omit?: SuperStateAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SuperStateAdminInclude<ExtArgs> | null
    /**
     * Filter, which SuperStateAdmin to fetch.
     */
    where?: SuperStateAdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SuperStateAdmins to fetch.
     */
    orderBy?: SuperStateAdminOrderByWithRelationInput | SuperStateAdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SuperStateAdmins.
     */
    cursor?: SuperStateAdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SuperStateAdmins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SuperStateAdmins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SuperStateAdmins.
     */
    distinct?: SuperStateAdminScalarFieldEnum | SuperStateAdminScalarFieldEnum[]
  }

  /**
   * SuperStateAdmin findMany
   */
  export type SuperStateAdminFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuperStateAdmin
     */
    select?: SuperStateAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SuperStateAdmin
     */
    omit?: SuperStateAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SuperStateAdminInclude<ExtArgs> | null
    /**
     * Filter, which SuperStateAdmins to fetch.
     */
    where?: SuperStateAdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SuperStateAdmins to fetch.
     */
    orderBy?: SuperStateAdminOrderByWithRelationInput | SuperStateAdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SuperStateAdmins.
     */
    cursor?: SuperStateAdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SuperStateAdmins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SuperStateAdmins.
     */
    skip?: number
    distinct?: SuperStateAdminScalarFieldEnum | SuperStateAdminScalarFieldEnum[]
  }

  /**
   * SuperStateAdmin create
   */
  export type SuperStateAdminCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuperStateAdmin
     */
    select?: SuperStateAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SuperStateAdmin
     */
    omit?: SuperStateAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SuperStateAdminInclude<ExtArgs> | null
    /**
     * The data needed to create a SuperStateAdmin.
     */
    data: XOR<SuperStateAdminCreateInput, SuperStateAdminUncheckedCreateInput>
  }

  /**
   * SuperStateAdmin createMany
   */
  export type SuperStateAdminCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SuperStateAdmins.
     */
    data: SuperStateAdminCreateManyInput | SuperStateAdminCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SuperStateAdmin createManyAndReturn
   */
  export type SuperStateAdminCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuperStateAdmin
     */
    select?: SuperStateAdminSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SuperStateAdmin
     */
    omit?: SuperStateAdminOmit<ExtArgs> | null
    /**
     * The data used to create many SuperStateAdmins.
     */
    data: SuperStateAdminCreateManyInput | SuperStateAdminCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SuperStateAdminIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SuperStateAdmin update
   */
  export type SuperStateAdminUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuperStateAdmin
     */
    select?: SuperStateAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SuperStateAdmin
     */
    omit?: SuperStateAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SuperStateAdminInclude<ExtArgs> | null
    /**
     * The data needed to update a SuperStateAdmin.
     */
    data: XOR<SuperStateAdminUpdateInput, SuperStateAdminUncheckedUpdateInput>
    /**
     * Choose, which SuperStateAdmin to update.
     */
    where: SuperStateAdminWhereUniqueInput
  }

  /**
   * SuperStateAdmin updateMany
   */
  export type SuperStateAdminUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SuperStateAdmins.
     */
    data: XOR<SuperStateAdminUpdateManyMutationInput, SuperStateAdminUncheckedUpdateManyInput>
    /**
     * Filter which SuperStateAdmins to update
     */
    where?: SuperStateAdminWhereInput
    /**
     * Limit how many SuperStateAdmins to update.
     */
    limit?: number
  }

  /**
   * SuperStateAdmin updateManyAndReturn
   */
  export type SuperStateAdminUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuperStateAdmin
     */
    select?: SuperStateAdminSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SuperStateAdmin
     */
    omit?: SuperStateAdminOmit<ExtArgs> | null
    /**
     * The data used to update SuperStateAdmins.
     */
    data: XOR<SuperStateAdminUpdateManyMutationInput, SuperStateAdminUncheckedUpdateManyInput>
    /**
     * Filter which SuperStateAdmins to update
     */
    where?: SuperStateAdminWhereInput
    /**
     * Limit how many SuperStateAdmins to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SuperStateAdminIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * SuperStateAdmin upsert
   */
  export type SuperStateAdminUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuperStateAdmin
     */
    select?: SuperStateAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SuperStateAdmin
     */
    omit?: SuperStateAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SuperStateAdminInclude<ExtArgs> | null
    /**
     * The filter to search for the SuperStateAdmin to update in case it exists.
     */
    where: SuperStateAdminWhereUniqueInput
    /**
     * In case the SuperStateAdmin found by the `where` argument doesn't exist, create a new SuperStateAdmin with this data.
     */
    create: XOR<SuperStateAdminCreateInput, SuperStateAdminUncheckedCreateInput>
    /**
     * In case the SuperStateAdmin was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SuperStateAdminUpdateInput, SuperStateAdminUncheckedUpdateInput>
  }

  /**
   * SuperStateAdmin delete
   */
  export type SuperStateAdminDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuperStateAdmin
     */
    select?: SuperStateAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SuperStateAdmin
     */
    omit?: SuperStateAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SuperStateAdminInclude<ExtArgs> | null
    /**
     * Filter which SuperStateAdmin to delete.
     */
    where: SuperStateAdminWhereUniqueInput
  }

  /**
   * SuperStateAdmin deleteMany
   */
  export type SuperStateAdminDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SuperStateAdmins to delete
     */
    where?: SuperStateAdminWhereInput
    /**
     * Limit how many SuperStateAdmins to delete.
     */
    limit?: number
  }

  /**
   * SuperStateAdmin.managedDepartmentAdmins
   */
  export type SuperStateAdmin$managedDepartmentAdminsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentStateAdmin
     */
    select?: DepartmentStateAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepartmentStateAdmin
     */
    omit?: DepartmentStateAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentStateAdminInclude<ExtArgs> | null
    where?: DepartmentStateAdminWhereInput
    orderBy?: DepartmentStateAdminOrderByWithRelationInput | DepartmentStateAdminOrderByWithRelationInput[]
    cursor?: DepartmentStateAdminWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DepartmentStateAdminScalarFieldEnum | DepartmentStateAdminScalarFieldEnum[]
  }

  /**
   * SuperStateAdmin.managedSuperMunicipalAdmins
   */
  export type SuperStateAdmin$managedSuperMunicipalAdminsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuperMunicipalAdmin
     */
    select?: SuperMunicipalAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SuperMunicipalAdmin
     */
    omit?: SuperMunicipalAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SuperMunicipalAdminInclude<ExtArgs> | null
    where?: SuperMunicipalAdminWhereInput
    orderBy?: SuperMunicipalAdminOrderByWithRelationInput | SuperMunicipalAdminOrderByWithRelationInput[]
    cursor?: SuperMunicipalAdminWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SuperMunicipalAdminScalarFieldEnum | SuperMunicipalAdminScalarFieldEnum[]
  }

  /**
   * SuperStateAdmin.escalatedComplaints
   */
  export type SuperStateAdmin$escalatedComplaintsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Complaint
     */
    select?: ComplaintSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Complaint
     */
    omit?: ComplaintOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintInclude<ExtArgs> | null
    where?: ComplaintWhereInput
    orderBy?: ComplaintOrderByWithRelationInput | ComplaintOrderByWithRelationInput[]
    cursor?: ComplaintWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ComplaintScalarFieldEnum | ComplaintScalarFieldEnum[]
  }

  /**
   * SuperStateAdmin.managedBySuperAdmin
   */
  export type SuperStateAdmin$managedBySuperAdminArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuperAdmin
     */
    select?: SuperAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SuperAdmin
     */
    omit?: SuperAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SuperAdminInclude<ExtArgs> | null
    where?: SuperAdminWhereInput
  }

  /**
   * SuperStateAdmin without action
   */
  export type SuperStateAdminDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuperStateAdmin
     */
    select?: SuperStateAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SuperStateAdmin
     */
    omit?: SuperStateAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SuperStateAdminInclude<ExtArgs> | null
  }


  /**
   * Model SuperAdmin
   */

  export type AggregateSuperAdmin = {
    _count: SuperAdminCountAggregateOutputType | null
    _min: SuperAdminMinAggregateOutputType | null
    _max: SuperAdminMaxAggregateOutputType | null
  }

  export type SuperAdminMinAggregateOutputType = {
    id: string | null
    fullName: string | null
    adminId: string | null
    officialEmail: string | null
    phoneNumber: string | null
    password: string | null
    accessLevel: string | null
    dateOfCreation: Date | null
    lastUpdated: Date | null
    status: string | null
    lastLogin: Date | null
  }

  export type SuperAdminMaxAggregateOutputType = {
    id: string | null
    fullName: string | null
    adminId: string | null
    officialEmail: string | null
    phoneNumber: string | null
    password: string | null
    accessLevel: string | null
    dateOfCreation: Date | null
    lastUpdated: Date | null
    status: string | null
    lastLogin: Date | null
  }

  export type SuperAdminCountAggregateOutputType = {
    id: number
    fullName: number
    adminId: number
    officialEmail: number
    phoneNumber: number
    password: number
    accessLevel: number
    dateOfCreation: number
    lastUpdated: number
    status: number
    lastLogin: number
    _all: number
  }


  export type SuperAdminMinAggregateInputType = {
    id?: true
    fullName?: true
    adminId?: true
    officialEmail?: true
    phoneNumber?: true
    password?: true
    accessLevel?: true
    dateOfCreation?: true
    lastUpdated?: true
    status?: true
    lastLogin?: true
  }

  export type SuperAdminMaxAggregateInputType = {
    id?: true
    fullName?: true
    adminId?: true
    officialEmail?: true
    phoneNumber?: true
    password?: true
    accessLevel?: true
    dateOfCreation?: true
    lastUpdated?: true
    status?: true
    lastLogin?: true
  }

  export type SuperAdminCountAggregateInputType = {
    id?: true
    fullName?: true
    adminId?: true
    officialEmail?: true
    phoneNumber?: true
    password?: true
    accessLevel?: true
    dateOfCreation?: true
    lastUpdated?: true
    status?: true
    lastLogin?: true
    _all?: true
  }

  export type SuperAdminAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SuperAdmin to aggregate.
     */
    where?: SuperAdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SuperAdmins to fetch.
     */
    orderBy?: SuperAdminOrderByWithRelationInput | SuperAdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SuperAdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SuperAdmins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SuperAdmins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SuperAdmins
    **/
    _count?: true | SuperAdminCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SuperAdminMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SuperAdminMaxAggregateInputType
  }

  export type GetSuperAdminAggregateType<T extends SuperAdminAggregateArgs> = {
        [P in keyof T & keyof AggregateSuperAdmin]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSuperAdmin[P]>
      : GetScalarType<T[P], AggregateSuperAdmin[P]>
  }




  export type SuperAdminGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SuperAdminWhereInput
    orderBy?: SuperAdminOrderByWithAggregationInput | SuperAdminOrderByWithAggregationInput[]
    by: SuperAdminScalarFieldEnum[] | SuperAdminScalarFieldEnum
    having?: SuperAdminScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SuperAdminCountAggregateInputType | true
    _min?: SuperAdminMinAggregateInputType
    _max?: SuperAdminMaxAggregateInputType
  }

  export type SuperAdminGroupByOutputType = {
    id: string
    fullName: string
    adminId: string
    officialEmail: string
    phoneNumber: string | null
    password: string
    accessLevel: string
    dateOfCreation: Date
    lastUpdated: Date
    status: string
    lastLogin: Date | null
    _count: SuperAdminCountAggregateOutputType | null
    _min: SuperAdminMinAggregateOutputType | null
    _max: SuperAdminMaxAggregateOutputType | null
  }

  type GetSuperAdminGroupByPayload<T extends SuperAdminGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SuperAdminGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SuperAdminGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SuperAdminGroupByOutputType[P]>
            : GetScalarType<T[P], SuperAdminGroupByOutputType[P]>
        }
      >
    >


  export type SuperAdminSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fullName?: boolean
    adminId?: boolean
    officialEmail?: boolean
    phoneNumber?: boolean
    password?: boolean
    accessLevel?: boolean
    dateOfCreation?: boolean
    lastUpdated?: boolean
    status?: boolean
    lastLogin?: boolean
    managedCategories?: boolean | SuperAdmin$managedCategoriesArgs<ExtArgs>
    managedSuperStateAdmins?: boolean | SuperAdmin$managedSuperStateAdminsArgs<ExtArgs>
    managedComplaints?: boolean | SuperAdmin$managedComplaintsArgs<ExtArgs>
    _count?: boolean | SuperAdminCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["superAdmin"]>

  export type SuperAdminSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fullName?: boolean
    adminId?: boolean
    officialEmail?: boolean
    phoneNumber?: boolean
    password?: boolean
    accessLevel?: boolean
    dateOfCreation?: boolean
    lastUpdated?: boolean
    status?: boolean
    lastLogin?: boolean
  }, ExtArgs["result"]["superAdmin"]>

  export type SuperAdminSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fullName?: boolean
    adminId?: boolean
    officialEmail?: boolean
    phoneNumber?: boolean
    password?: boolean
    accessLevel?: boolean
    dateOfCreation?: boolean
    lastUpdated?: boolean
    status?: boolean
    lastLogin?: boolean
  }, ExtArgs["result"]["superAdmin"]>

  export type SuperAdminSelectScalar = {
    id?: boolean
    fullName?: boolean
    adminId?: boolean
    officialEmail?: boolean
    phoneNumber?: boolean
    password?: boolean
    accessLevel?: boolean
    dateOfCreation?: boolean
    lastUpdated?: boolean
    status?: boolean
    lastLogin?: boolean
  }

  export type SuperAdminOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "fullName" | "adminId" | "officialEmail" | "phoneNumber" | "password" | "accessLevel" | "dateOfCreation" | "lastUpdated" | "status" | "lastLogin", ExtArgs["result"]["superAdmin"]>
  export type SuperAdminInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    managedCategories?: boolean | SuperAdmin$managedCategoriesArgs<ExtArgs>
    managedSuperStateAdmins?: boolean | SuperAdmin$managedSuperStateAdminsArgs<ExtArgs>
    managedComplaints?: boolean | SuperAdmin$managedComplaintsArgs<ExtArgs>
    _count?: boolean | SuperAdminCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SuperAdminIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type SuperAdminIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $SuperAdminPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SuperAdmin"
    objects: {
      managedCategories: Prisma.$CategoryPayload<ExtArgs>[]
      managedSuperStateAdmins: Prisma.$SuperStateAdminPayload<ExtArgs>[]
      managedComplaints: Prisma.$ComplaintPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      fullName: string
      adminId: string
      officialEmail: string
      phoneNumber: string | null
      password: string
      accessLevel: string
      dateOfCreation: Date
      lastUpdated: Date
      status: string
      lastLogin: Date | null
    }, ExtArgs["result"]["superAdmin"]>
    composites: {}
  }

  type SuperAdminGetPayload<S extends boolean | null | undefined | SuperAdminDefaultArgs> = $Result.GetResult<Prisma.$SuperAdminPayload, S>

  type SuperAdminCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SuperAdminFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SuperAdminCountAggregateInputType | true
    }

  export interface SuperAdminDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SuperAdmin'], meta: { name: 'SuperAdmin' } }
    /**
     * Find zero or one SuperAdmin that matches the filter.
     * @param {SuperAdminFindUniqueArgs} args - Arguments to find a SuperAdmin
     * @example
     * // Get one SuperAdmin
     * const superAdmin = await prisma.superAdmin.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SuperAdminFindUniqueArgs>(args: SelectSubset<T, SuperAdminFindUniqueArgs<ExtArgs>>): Prisma__SuperAdminClient<$Result.GetResult<Prisma.$SuperAdminPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SuperAdmin that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SuperAdminFindUniqueOrThrowArgs} args - Arguments to find a SuperAdmin
     * @example
     * // Get one SuperAdmin
     * const superAdmin = await prisma.superAdmin.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SuperAdminFindUniqueOrThrowArgs>(args: SelectSubset<T, SuperAdminFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SuperAdminClient<$Result.GetResult<Prisma.$SuperAdminPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SuperAdmin that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuperAdminFindFirstArgs} args - Arguments to find a SuperAdmin
     * @example
     * // Get one SuperAdmin
     * const superAdmin = await prisma.superAdmin.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SuperAdminFindFirstArgs>(args?: SelectSubset<T, SuperAdminFindFirstArgs<ExtArgs>>): Prisma__SuperAdminClient<$Result.GetResult<Prisma.$SuperAdminPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SuperAdmin that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuperAdminFindFirstOrThrowArgs} args - Arguments to find a SuperAdmin
     * @example
     * // Get one SuperAdmin
     * const superAdmin = await prisma.superAdmin.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SuperAdminFindFirstOrThrowArgs>(args?: SelectSubset<T, SuperAdminFindFirstOrThrowArgs<ExtArgs>>): Prisma__SuperAdminClient<$Result.GetResult<Prisma.$SuperAdminPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SuperAdmins that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuperAdminFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SuperAdmins
     * const superAdmins = await prisma.superAdmin.findMany()
     * 
     * // Get first 10 SuperAdmins
     * const superAdmins = await prisma.superAdmin.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const superAdminWithIdOnly = await prisma.superAdmin.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SuperAdminFindManyArgs>(args?: SelectSubset<T, SuperAdminFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SuperAdminPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SuperAdmin.
     * @param {SuperAdminCreateArgs} args - Arguments to create a SuperAdmin.
     * @example
     * // Create one SuperAdmin
     * const SuperAdmin = await prisma.superAdmin.create({
     *   data: {
     *     // ... data to create a SuperAdmin
     *   }
     * })
     * 
     */
    create<T extends SuperAdminCreateArgs>(args: SelectSubset<T, SuperAdminCreateArgs<ExtArgs>>): Prisma__SuperAdminClient<$Result.GetResult<Prisma.$SuperAdminPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SuperAdmins.
     * @param {SuperAdminCreateManyArgs} args - Arguments to create many SuperAdmins.
     * @example
     * // Create many SuperAdmins
     * const superAdmin = await prisma.superAdmin.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SuperAdminCreateManyArgs>(args?: SelectSubset<T, SuperAdminCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SuperAdmins and returns the data saved in the database.
     * @param {SuperAdminCreateManyAndReturnArgs} args - Arguments to create many SuperAdmins.
     * @example
     * // Create many SuperAdmins
     * const superAdmin = await prisma.superAdmin.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SuperAdmins and only return the `id`
     * const superAdminWithIdOnly = await prisma.superAdmin.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SuperAdminCreateManyAndReturnArgs>(args?: SelectSubset<T, SuperAdminCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SuperAdminPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SuperAdmin.
     * @param {SuperAdminDeleteArgs} args - Arguments to delete one SuperAdmin.
     * @example
     * // Delete one SuperAdmin
     * const SuperAdmin = await prisma.superAdmin.delete({
     *   where: {
     *     // ... filter to delete one SuperAdmin
     *   }
     * })
     * 
     */
    delete<T extends SuperAdminDeleteArgs>(args: SelectSubset<T, SuperAdminDeleteArgs<ExtArgs>>): Prisma__SuperAdminClient<$Result.GetResult<Prisma.$SuperAdminPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SuperAdmin.
     * @param {SuperAdminUpdateArgs} args - Arguments to update one SuperAdmin.
     * @example
     * // Update one SuperAdmin
     * const superAdmin = await prisma.superAdmin.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SuperAdminUpdateArgs>(args: SelectSubset<T, SuperAdminUpdateArgs<ExtArgs>>): Prisma__SuperAdminClient<$Result.GetResult<Prisma.$SuperAdminPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SuperAdmins.
     * @param {SuperAdminDeleteManyArgs} args - Arguments to filter SuperAdmins to delete.
     * @example
     * // Delete a few SuperAdmins
     * const { count } = await prisma.superAdmin.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SuperAdminDeleteManyArgs>(args?: SelectSubset<T, SuperAdminDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SuperAdmins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuperAdminUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SuperAdmins
     * const superAdmin = await prisma.superAdmin.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SuperAdminUpdateManyArgs>(args: SelectSubset<T, SuperAdminUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SuperAdmins and returns the data updated in the database.
     * @param {SuperAdminUpdateManyAndReturnArgs} args - Arguments to update many SuperAdmins.
     * @example
     * // Update many SuperAdmins
     * const superAdmin = await prisma.superAdmin.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SuperAdmins and only return the `id`
     * const superAdminWithIdOnly = await prisma.superAdmin.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SuperAdminUpdateManyAndReturnArgs>(args: SelectSubset<T, SuperAdminUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SuperAdminPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SuperAdmin.
     * @param {SuperAdminUpsertArgs} args - Arguments to update or create a SuperAdmin.
     * @example
     * // Update or create a SuperAdmin
     * const superAdmin = await prisma.superAdmin.upsert({
     *   create: {
     *     // ... data to create a SuperAdmin
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SuperAdmin we want to update
     *   }
     * })
     */
    upsert<T extends SuperAdminUpsertArgs>(args: SelectSubset<T, SuperAdminUpsertArgs<ExtArgs>>): Prisma__SuperAdminClient<$Result.GetResult<Prisma.$SuperAdminPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SuperAdmins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuperAdminCountArgs} args - Arguments to filter SuperAdmins to count.
     * @example
     * // Count the number of SuperAdmins
     * const count = await prisma.superAdmin.count({
     *   where: {
     *     // ... the filter for the SuperAdmins we want to count
     *   }
     * })
    **/
    count<T extends SuperAdminCountArgs>(
      args?: Subset<T, SuperAdminCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SuperAdminCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SuperAdmin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuperAdminAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SuperAdminAggregateArgs>(args: Subset<T, SuperAdminAggregateArgs>): Prisma.PrismaPromise<GetSuperAdminAggregateType<T>>

    /**
     * Group by SuperAdmin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuperAdminGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SuperAdminGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SuperAdminGroupByArgs['orderBy'] }
        : { orderBy?: SuperAdminGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SuperAdminGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSuperAdminGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SuperAdmin model
   */
  readonly fields: SuperAdminFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SuperAdmin.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SuperAdminClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    managedCategories<T extends SuperAdmin$managedCategoriesArgs<ExtArgs> = {}>(args?: Subset<T, SuperAdmin$managedCategoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    managedSuperStateAdmins<T extends SuperAdmin$managedSuperStateAdminsArgs<ExtArgs> = {}>(args?: Subset<T, SuperAdmin$managedSuperStateAdminsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SuperStateAdminPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    managedComplaints<T extends SuperAdmin$managedComplaintsArgs<ExtArgs> = {}>(args?: Subset<T, SuperAdmin$managedComplaintsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComplaintPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SuperAdmin model
   */
  interface SuperAdminFieldRefs {
    readonly id: FieldRef<"SuperAdmin", 'String'>
    readonly fullName: FieldRef<"SuperAdmin", 'String'>
    readonly adminId: FieldRef<"SuperAdmin", 'String'>
    readonly officialEmail: FieldRef<"SuperAdmin", 'String'>
    readonly phoneNumber: FieldRef<"SuperAdmin", 'String'>
    readonly password: FieldRef<"SuperAdmin", 'String'>
    readonly accessLevel: FieldRef<"SuperAdmin", 'String'>
    readonly dateOfCreation: FieldRef<"SuperAdmin", 'DateTime'>
    readonly lastUpdated: FieldRef<"SuperAdmin", 'DateTime'>
    readonly status: FieldRef<"SuperAdmin", 'String'>
    readonly lastLogin: FieldRef<"SuperAdmin", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SuperAdmin findUnique
   */
  export type SuperAdminFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuperAdmin
     */
    select?: SuperAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SuperAdmin
     */
    omit?: SuperAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SuperAdminInclude<ExtArgs> | null
    /**
     * Filter, which SuperAdmin to fetch.
     */
    where: SuperAdminWhereUniqueInput
  }

  /**
   * SuperAdmin findUniqueOrThrow
   */
  export type SuperAdminFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuperAdmin
     */
    select?: SuperAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SuperAdmin
     */
    omit?: SuperAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SuperAdminInclude<ExtArgs> | null
    /**
     * Filter, which SuperAdmin to fetch.
     */
    where: SuperAdminWhereUniqueInput
  }

  /**
   * SuperAdmin findFirst
   */
  export type SuperAdminFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuperAdmin
     */
    select?: SuperAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SuperAdmin
     */
    omit?: SuperAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SuperAdminInclude<ExtArgs> | null
    /**
     * Filter, which SuperAdmin to fetch.
     */
    where?: SuperAdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SuperAdmins to fetch.
     */
    orderBy?: SuperAdminOrderByWithRelationInput | SuperAdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SuperAdmins.
     */
    cursor?: SuperAdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SuperAdmins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SuperAdmins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SuperAdmins.
     */
    distinct?: SuperAdminScalarFieldEnum | SuperAdminScalarFieldEnum[]
  }

  /**
   * SuperAdmin findFirstOrThrow
   */
  export type SuperAdminFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuperAdmin
     */
    select?: SuperAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SuperAdmin
     */
    omit?: SuperAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SuperAdminInclude<ExtArgs> | null
    /**
     * Filter, which SuperAdmin to fetch.
     */
    where?: SuperAdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SuperAdmins to fetch.
     */
    orderBy?: SuperAdminOrderByWithRelationInput | SuperAdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SuperAdmins.
     */
    cursor?: SuperAdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SuperAdmins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SuperAdmins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SuperAdmins.
     */
    distinct?: SuperAdminScalarFieldEnum | SuperAdminScalarFieldEnum[]
  }

  /**
   * SuperAdmin findMany
   */
  export type SuperAdminFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuperAdmin
     */
    select?: SuperAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SuperAdmin
     */
    omit?: SuperAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SuperAdminInclude<ExtArgs> | null
    /**
     * Filter, which SuperAdmins to fetch.
     */
    where?: SuperAdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SuperAdmins to fetch.
     */
    orderBy?: SuperAdminOrderByWithRelationInput | SuperAdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SuperAdmins.
     */
    cursor?: SuperAdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SuperAdmins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SuperAdmins.
     */
    skip?: number
    distinct?: SuperAdminScalarFieldEnum | SuperAdminScalarFieldEnum[]
  }

  /**
   * SuperAdmin create
   */
  export type SuperAdminCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuperAdmin
     */
    select?: SuperAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SuperAdmin
     */
    omit?: SuperAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SuperAdminInclude<ExtArgs> | null
    /**
     * The data needed to create a SuperAdmin.
     */
    data: XOR<SuperAdminCreateInput, SuperAdminUncheckedCreateInput>
  }

  /**
   * SuperAdmin createMany
   */
  export type SuperAdminCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SuperAdmins.
     */
    data: SuperAdminCreateManyInput | SuperAdminCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SuperAdmin createManyAndReturn
   */
  export type SuperAdminCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuperAdmin
     */
    select?: SuperAdminSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SuperAdmin
     */
    omit?: SuperAdminOmit<ExtArgs> | null
    /**
     * The data used to create many SuperAdmins.
     */
    data: SuperAdminCreateManyInput | SuperAdminCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SuperAdmin update
   */
  export type SuperAdminUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuperAdmin
     */
    select?: SuperAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SuperAdmin
     */
    omit?: SuperAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SuperAdminInclude<ExtArgs> | null
    /**
     * The data needed to update a SuperAdmin.
     */
    data: XOR<SuperAdminUpdateInput, SuperAdminUncheckedUpdateInput>
    /**
     * Choose, which SuperAdmin to update.
     */
    where: SuperAdminWhereUniqueInput
  }

  /**
   * SuperAdmin updateMany
   */
  export type SuperAdminUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SuperAdmins.
     */
    data: XOR<SuperAdminUpdateManyMutationInput, SuperAdminUncheckedUpdateManyInput>
    /**
     * Filter which SuperAdmins to update
     */
    where?: SuperAdminWhereInput
    /**
     * Limit how many SuperAdmins to update.
     */
    limit?: number
  }

  /**
   * SuperAdmin updateManyAndReturn
   */
  export type SuperAdminUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuperAdmin
     */
    select?: SuperAdminSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SuperAdmin
     */
    omit?: SuperAdminOmit<ExtArgs> | null
    /**
     * The data used to update SuperAdmins.
     */
    data: XOR<SuperAdminUpdateManyMutationInput, SuperAdminUncheckedUpdateManyInput>
    /**
     * Filter which SuperAdmins to update
     */
    where?: SuperAdminWhereInput
    /**
     * Limit how many SuperAdmins to update.
     */
    limit?: number
  }

  /**
   * SuperAdmin upsert
   */
  export type SuperAdminUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuperAdmin
     */
    select?: SuperAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SuperAdmin
     */
    omit?: SuperAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SuperAdminInclude<ExtArgs> | null
    /**
     * The filter to search for the SuperAdmin to update in case it exists.
     */
    where: SuperAdminWhereUniqueInput
    /**
     * In case the SuperAdmin found by the `where` argument doesn't exist, create a new SuperAdmin with this data.
     */
    create: XOR<SuperAdminCreateInput, SuperAdminUncheckedCreateInput>
    /**
     * In case the SuperAdmin was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SuperAdminUpdateInput, SuperAdminUncheckedUpdateInput>
  }

  /**
   * SuperAdmin delete
   */
  export type SuperAdminDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuperAdmin
     */
    select?: SuperAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SuperAdmin
     */
    omit?: SuperAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SuperAdminInclude<ExtArgs> | null
    /**
     * Filter which SuperAdmin to delete.
     */
    where: SuperAdminWhereUniqueInput
  }

  /**
   * SuperAdmin deleteMany
   */
  export type SuperAdminDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SuperAdmins to delete
     */
    where?: SuperAdminWhereInput
    /**
     * Limit how many SuperAdmins to delete.
     */
    limit?: number
  }

  /**
   * SuperAdmin.managedCategories
   */
  export type SuperAdmin$managedCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    cursor?: CategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * SuperAdmin.managedSuperStateAdmins
   */
  export type SuperAdmin$managedSuperStateAdminsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuperStateAdmin
     */
    select?: SuperStateAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SuperStateAdmin
     */
    omit?: SuperStateAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SuperStateAdminInclude<ExtArgs> | null
    where?: SuperStateAdminWhereInput
    orderBy?: SuperStateAdminOrderByWithRelationInput | SuperStateAdminOrderByWithRelationInput[]
    cursor?: SuperStateAdminWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SuperStateAdminScalarFieldEnum | SuperStateAdminScalarFieldEnum[]
  }

  /**
   * SuperAdmin.managedComplaints
   */
  export type SuperAdmin$managedComplaintsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Complaint
     */
    select?: ComplaintSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Complaint
     */
    omit?: ComplaintOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintInclude<ExtArgs> | null
    where?: ComplaintWhereInput
    orderBy?: ComplaintOrderByWithRelationInput | ComplaintOrderByWithRelationInput[]
    cursor?: ComplaintWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ComplaintScalarFieldEnum | ComplaintScalarFieldEnum[]
  }

  /**
   * SuperAdmin without action
   */
  export type SuperAdminDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuperAdmin
     */
    select?: SuperAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SuperAdmin
     */
    omit?: SuperAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SuperAdminInclude<ExtArgs> | null
  }


  /**
   * Model Category
   */

  export type AggregateCategory = {
    _count: CategoryCountAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryMinAggregateOutputType = {
    id: string | null
    name: string | null
    assignedDepartment: string | null
    creationDate: Date | null
    lastUpdated: Date | null
    createdBySuperAdminId: string | null
    managedByDeptStateAdminId: string | null
  }

  export type CategoryMaxAggregateOutputType = {
    id: string | null
    name: string | null
    assignedDepartment: string | null
    creationDate: Date | null
    lastUpdated: Date | null
    createdBySuperAdminId: string | null
    managedByDeptStateAdminId: string | null
  }

  export type CategoryCountAggregateOutputType = {
    id: number
    name: number
    subCategories: number
    learnedSubCategories: number
    assignedDepartment: number
    creationDate: number
    lastUpdated: number
    createdBySuperAdminId: number
    managedByDeptStateAdminId: number
    _all: number
  }


  export type CategoryMinAggregateInputType = {
    id?: true
    name?: true
    assignedDepartment?: true
    creationDate?: true
    lastUpdated?: true
    createdBySuperAdminId?: true
    managedByDeptStateAdminId?: true
  }

  export type CategoryMaxAggregateInputType = {
    id?: true
    name?: true
    assignedDepartment?: true
    creationDate?: true
    lastUpdated?: true
    createdBySuperAdminId?: true
    managedByDeptStateAdminId?: true
  }

  export type CategoryCountAggregateInputType = {
    id?: true
    name?: true
    subCategories?: true
    learnedSubCategories?: true
    assignedDepartment?: true
    creationDate?: true
    lastUpdated?: true
    createdBySuperAdminId?: true
    managedByDeptStateAdminId?: true
    _all?: true
  }

  export type CategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Category to aggregate.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categories
    **/
    _count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }




  export type CategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithAggregationInput | CategoryOrderByWithAggregationInput[]
    by: CategoryScalarFieldEnum[] | CategoryScalarFieldEnum
    having?: CategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryCountAggregateInputType | true
    _min?: CategoryMinAggregateInputType
    _max?: CategoryMaxAggregateInputType
  }

  export type CategoryGroupByOutputType = {
    id: string
    name: string
    subCategories: string[]
    learnedSubCategories: string[]
    assignedDepartment: string
    creationDate: Date
    lastUpdated: Date
    createdBySuperAdminId: string | null
    managedByDeptStateAdminId: string | null
    _count: CategoryCountAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  type GetCategoryGroupByPayload<T extends CategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryGroupByOutputType[P]>
        }
      >
    >


  export type CategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    subCategories?: boolean
    learnedSubCategories?: boolean
    assignedDepartment?: boolean
    creationDate?: boolean
    lastUpdated?: boolean
    createdBySuperAdminId?: boolean
    managedByDeptStateAdminId?: boolean
    complaints?: boolean | Category$complaintsArgs<ExtArgs>
    createdBySuperAdmin?: boolean | Category$createdBySuperAdminArgs<ExtArgs>
    managedByDeptStateAdmin?: boolean | Category$managedByDeptStateAdminArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["category"]>

  export type CategorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    subCategories?: boolean
    learnedSubCategories?: boolean
    assignedDepartment?: boolean
    creationDate?: boolean
    lastUpdated?: boolean
    createdBySuperAdminId?: boolean
    managedByDeptStateAdminId?: boolean
    createdBySuperAdmin?: boolean | Category$createdBySuperAdminArgs<ExtArgs>
    managedByDeptStateAdmin?: boolean | Category$managedByDeptStateAdminArgs<ExtArgs>
  }, ExtArgs["result"]["category"]>

  export type CategorySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    subCategories?: boolean
    learnedSubCategories?: boolean
    assignedDepartment?: boolean
    creationDate?: boolean
    lastUpdated?: boolean
    createdBySuperAdminId?: boolean
    managedByDeptStateAdminId?: boolean
    createdBySuperAdmin?: boolean | Category$createdBySuperAdminArgs<ExtArgs>
    managedByDeptStateAdmin?: boolean | Category$managedByDeptStateAdminArgs<ExtArgs>
  }, ExtArgs["result"]["category"]>

  export type CategorySelectScalar = {
    id?: boolean
    name?: boolean
    subCategories?: boolean
    learnedSubCategories?: boolean
    assignedDepartment?: boolean
    creationDate?: boolean
    lastUpdated?: boolean
    createdBySuperAdminId?: boolean
    managedByDeptStateAdminId?: boolean
  }

  export type CategoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "subCategories" | "learnedSubCategories" | "assignedDepartment" | "creationDate" | "lastUpdated" | "createdBySuperAdminId" | "managedByDeptStateAdminId", ExtArgs["result"]["category"]>
  export type CategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    complaints?: boolean | Category$complaintsArgs<ExtArgs>
    createdBySuperAdmin?: boolean | Category$createdBySuperAdminArgs<ExtArgs>
    managedByDeptStateAdmin?: boolean | Category$managedByDeptStateAdminArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CategoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBySuperAdmin?: boolean | Category$createdBySuperAdminArgs<ExtArgs>
    managedByDeptStateAdmin?: boolean | Category$managedByDeptStateAdminArgs<ExtArgs>
  }
  export type CategoryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBySuperAdmin?: boolean | Category$createdBySuperAdminArgs<ExtArgs>
    managedByDeptStateAdmin?: boolean | Category$managedByDeptStateAdminArgs<ExtArgs>
  }

  export type $CategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Category"
    objects: {
      complaints: Prisma.$ComplaintPayload<ExtArgs>[]
      createdBySuperAdmin: Prisma.$SuperAdminPayload<ExtArgs> | null
      managedByDeptStateAdmin: Prisma.$DepartmentStateAdminPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      subCategories: string[]
      learnedSubCategories: string[]
      assignedDepartment: string
      creationDate: Date
      lastUpdated: Date
      createdBySuperAdminId: string | null
      managedByDeptStateAdminId: string | null
    }, ExtArgs["result"]["category"]>
    composites: {}
  }

  type CategoryGetPayload<S extends boolean | null | undefined | CategoryDefaultArgs> = $Result.GetResult<Prisma.$CategoryPayload, S>

  type CategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CategoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CategoryCountAggregateInputType | true
    }

  export interface CategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Category'], meta: { name: 'Category' } }
    /**
     * Find zero or one Category that matches the filter.
     * @param {CategoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CategoryFindUniqueArgs>(args: SelectSubset<T, CategoryFindUniqueArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Category that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CategoryFindUniqueOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, CategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CategoryFindFirstArgs>(args?: SelectSubset<T, CategoryFindFirstArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Category that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, CategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoryWithIdOnly = await prisma.category.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CategoryFindManyArgs>(args?: SelectSubset<T, CategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Category.
     * @param {CategoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
     */
    create<T extends CategoryCreateArgs>(args: SelectSubset<T, CategoryCreateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Categories.
     * @param {CategoryCreateManyArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CategoryCreateManyArgs>(args?: SelectSubset<T, CategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Categories and returns the data saved in the database.
     * @param {CategoryCreateManyAndReturnArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Categories and only return the `id`
     * const categoryWithIdOnly = await prisma.category.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CategoryCreateManyAndReturnArgs>(args?: SelectSubset<T, CategoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Category.
     * @param {CategoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
     */
    delete<T extends CategoryDeleteArgs>(args: SelectSubset<T, CategoryDeleteArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Category.
     * @param {CategoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CategoryUpdateArgs>(args: SelectSubset<T, CategoryUpdateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Categories.
     * @param {CategoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CategoryDeleteManyArgs>(args?: SelectSubset<T, CategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CategoryUpdateManyArgs>(args: SelectSubset<T, CategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories and returns the data updated in the database.
     * @param {CategoryUpdateManyAndReturnArgs} args - Arguments to update many Categories.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Categories and only return the `id`
     * const categoryWithIdOnly = await prisma.category.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CategoryUpdateManyAndReturnArgs>(args: SelectSubset<T, CategoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Category.
     * @param {CategoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
     */
    upsert<T extends CategoryUpsertArgs>(args: SelectSubset<T, CategoryUpsertArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends CategoryCountArgs>(
      args?: Subset<T, CategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): Prisma.PrismaPromise<GetCategoryAggregateType<T>>

    /**
     * Group by Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoryGroupByArgs['orderBy'] }
        : { orderBy?: CategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Category model
   */
  readonly fields: CategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    complaints<T extends Category$complaintsArgs<ExtArgs> = {}>(args?: Subset<T, Category$complaintsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComplaintPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    createdBySuperAdmin<T extends Category$createdBySuperAdminArgs<ExtArgs> = {}>(args?: Subset<T, Category$createdBySuperAdminArgs<ExtArgs>>): Prisma__SuperAdminClient<$Result.GetResult<Prisma.$SuperAdminPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    managedByDeptStateAdmin<T extends Category$managedByDeptStateAdminArgs<ExtArgs> = {}>(args?: Subset<T, Category$managedByDeptStateAdminArgs<ExtArgs>>): Prisma__DepartmentStateAdminClient<$Result.GetResult<Prisma.$DepartmentStateAdminPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Category model
   */
  interface CategoryFieldRefs {
    readonly id: FieldRef<"Category", 'String'>
    readonly name: FieldRef<"Category", 'String'>
    readonly subCategories: FieldRef<"Category", 'String[]'>
    readonly learnedSubCategories: FieldRef<"Category", 'String[]'>
    readonly assignedDepartment: FieldRef<"Category", 'String'>
    readonly creationDate: FieldRef<"Category", 'DateTime'>
    readonly lastUpdated: FieldRef<"Category", 'DateTime'>
    readonly createdBySuperAdminId: FieldRef<"Category", 'String'>
    readonly managedByDeptStateAdminId: FieldRef<"Category", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Category findUnique
   */
  export type CategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findUniqueOrThrow
   */
  export type CategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findFirst
   */
  export type CategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findFirstOrThrow
   */
  export type CategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findMany
   */
  export type CategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Categories to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category create
   */
  export type CategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a Category.
     */
    data: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
  }

  /**
   * Category createMany
   */
  export type CategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Category createManyAndReturn
   */
  export type CategoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Category update
   */
  export type CategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a Category.
     */
    data: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
    /**
     * Choose, which Category to update.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category updateMany
   */
  export type CategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Categories.
     */
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     */
    where?: CategoryWhereInput
    /**
     * Limit how many Categories to update.
     */
    limit?: number
  }

  /**
   * Category updateManyAndReturn
   */
  export type CategoryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * The data used to update Categories.
     */
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     */
    where?: CategoryWhereInput
    /**
     * Limit how many Categories to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Category upsert
   */
  export type CategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the Category to update in case it exists.
     */
    where: CategoryWhereUniqueInput
    /**
     * In case the Category found by the `where` argument doesn't exist, create a new Category with this data.
     */
    create: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
    /**
     * In case the Category was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
  }

  /**
   * Category delete
   */
  export type CategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter which Category to delete.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category deleteMany
   */
  export type CategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categories to delete
     */
    where?: CategoryWhereInput
    /**
     * Limit how many Categories to delete.
     */
    limit?: number
  }

  /**
   * Category.complaints
   */
  export type Category$complaintsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Complaint
     */
    select?: ComplaintSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Complaint
     */
    omit?: ComplaintOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintInclude<ExtArgs> | null
    where?: ComplaintWhereInput
    orderBy?: ComplaintOrderByWithRelationInput | ComplaintOrderByWithRelationInput[]
    cursor?: ComplaintWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ComplaintScalarFieldEnum | ComplaintScalarFieldEnum[]
  }

  /**
   * Category.createdBySuperAdmin
   */
  export type Category$createdBySuperAdminArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuperAdmin
     */
    select?: SuperAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SuperAdmin
     */
    omit?: SuperAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SuperAdminInclude<ExtArgs> | null
    where?: SuperAdminWhereInput
  }

  /**
   * Category.managedByDeptStateAdmin
   */
  export type Category$managedByDeptStateAdminArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentStateAdmin
     */
    select?: DepartmentStateAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepartmentStateAdmin
     */
    omit?: DepartmentStateAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentStateAdminInclude<ExtArgs> | null
    where?: DepartmentStateAdminWhereInput
  }

  /**
   * Category without action
   */
  export type CategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
  }


  /**
   * Model Complaint
   */

  export type AggregateComplaint = {
    _count: ComplaintCountAggregateOutputType | null
    _avg: ComplaintAvgAggregateOutputType | null
    _sum: ComplaintSumAggregateOutputType | null
    _min: ComplaintMinAggregateOutputType | null
    _max: ComplaintMaxAggregateOutputType | null
  }

  export type ComplaintAvgAggregateOutputType = {
    seq: number | null
    upvoteCount: number | null
  }

  export type ComplaintSumAggregateOutputType = {
    seq: number | null
    upvoteCount: number | null
  }

  export type ComplaintMinAggregateOutputType = {
    id: string | null
    submissionDate: Date | null
    seq: number | null
    complainantId: string | null
    categoryId: string | null
    subCategory: string | null
    standardizedSubCategory: string | null
    description: string | null
    urgency: $Enums.ComplaintUrgency | null
    attachmentUrl: string | null
    assignedDepartment: string | null
    status: $Enums.ComplaintStatus | null
    sla: string | null
    upvoteCount: number | null
    isPublic: boolean | null
    escalationLevel: string | null
    dateOfResolution: Date | null
    assignedAgentId: string | null
    managedByMunicipalAdminId: string | null
    moderatedByMunicipalAdminId: string | null
    crossDeptIssueSuperMunicipalId: string | null
    escalatedToStateAdminId: string | null
    escalatedToSuperStateAdminId: string | null
    managedBySuperAdminId: string | null
  }

  export type ComplaintMaxAggregateOutputType = {
    id: string | null
    submissionDate: Date | null
    seq: number | null
    complainantId: string | null
    categoryId: string | null
    subCategory: string | null
    standardizedSubCategory: string | null
    description: string | null
    urgency: $Enums.ComplaintUrgency | null
    attachmentUrl: string | null
    assignedDepartment: string | null
    status: $Enums.ComplaintStatus | null
    sla: string | null
    upvoteCount: number | null
    isPublic: boolean | null
    escalationLevel: string | null
    dateOfResolution: Date | null
    assignedAgentId: string | null
    managedByMunicipalAdminId: string | null
    moderatedByMunicipalAdminId: string | null
    crossDeptIssueSuperMunicipalId: string | null
    escalatedToStateAdminId: string | null
    escalatedToSuperStateAdminId: string | null
    managedBySuperAdminId: string | null
  }

  export type ComplaintCountAggregateOutputType = {
    id: number
    submissionDate: number
    seq: number
    complainantId: number
    categoryId: number
    subCategory: number
    standardizedSubCategory: number
    description: number
    urgency: number
    attachmentUrl: number
    assignedDepartment: number
    status: number
    sla: number
    upvoteCount: number
    isPublic: number
    escalationLevel: number
    dateOfResolution: number
    assignedAgentId: number
    managedByMunicipalAdminId: number
    moderatedByMunicipalAdminId: number
    crossDeptIssueSuperMunicipalId: number
    escalatedToStateAdminId: number
    escalatedToSuperStateAdminId: number
    managedBySuperAdminId: number
    _all: number
  }


  export type ComplaintAvgAggregateInputType = {
    seq?: true
    upvoteCount?: true
  }

  export type ComplaintSumAggregateInputType = {
    seq?: true
    upvoteCount?: true
  }

  export type ComplaintMinAggregateInputType = {
    id?: true
    submissionDate?: true
    seq?: true
    complainantId?: true
    categoryId?: true
    subCategory?: true
    standardizedSubCategory?: true
    description?: true
    urgency?: true
    attachmentUrl?: true
    assignedDepartment?: true
    status?: true
    sla?: true
    upvoteCount?: true
    isPublic?: true
    escalationLevel?: true
    dateOfResolution?: true
    assignedAgentId?: true
    managedByMunicipalAdminId?: true
    moderatedByMunicipalAdminId?: true
    crossDeptIssueSuperMunicipalId?: true
    escalatedToStateAdminId?: true
    escalatedToSuperStateAdminId?: true
    managedBySuperAdminId?: true
  }

  export type ComplaintMaxAggregateInputType = {
    id?: true
    submissionDate?: true
    seq?: true
    complainantId?: true
    categoryId?: true
    subCategory?: true
    standardizedSubCategory?: true
    description?: true
    urgency?: true
    attachmentUrl?: true
    assignedDepartment?: true
    status?: true
    sla?: true
    upvoteCount?: true
    isPublic?: true
    escalationLevel?: true
    dateOfResolution?: true
    assignedAgentId?: true
    managedByMunicipalAdminId?: true
    moderatedByMunicipalAdminId?: true
    crossDeptIssueSuperMunicipalId?: true
    escalatedToStateAdminId?: true
    escalatedToSuperStateAdminId?: true
    managedBySuperAdminId?: true
  }

  export type ComplaintCountAggregateInputType = {
    id?: true
    submissionDate?: true
    seq?: true
    complainantId?: true
    categoryId?: true
    subCategory?: true
    standardizedSubCategory?: true
    description?: true
    urgency?: true
    attachmentUrl?: true
    assignedDepartment?: true
    status?: true
    sla?: true
    upvoteCount?: true
    isPublic?: true
    escalationLevel?: true
    dateOfResolution?: true
    assignedAgentId?: true
    managedByMunicipalAdminId?: true
    moderatedByMunicipalAdminId?: true
    crossDeptIssueSuperMunicipalId?: true
    escalatedToStateAdminId?: true
    escalatedToSuperStateAdminId?: true
    managedBySuperAdminId?: true
    _all?: true
  }

  export type ComplaintAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Complaint to aggregate.
     */
    where?: ComplaintWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Complaints to fetch.
     */
    orderBy?: ComplaintOrderByWithRelationInput | ComplaintOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ComplaintWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Complaints from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Complaints.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Complaints
    **/
    _count?: true | ComplaintCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ComplaintAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ComplaintSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ComplaintMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ComplaintMaxAggregateInputType
  }

  export type GetComplaintAggregateType<T extends ComplaintAggregateArgs> = {
        [P in keyof T & keyof AggregateComplaint]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComplaint[P]>
      : GetScalarType<T[P], AggregateComplaint[P]>
  }




  export type ComplaintGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ComplaintWhereInput
    orderBy?: ComplaintOrderByWithAggregationInput | ComplaintOrderByWithAggregationInput[]
    by: ComplaintScalarFieldEnum[] | ComplaintScalarFieldEnum
    having?: ComplaintScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ComplaintCountAggregateInputType | true
    _avg?: ComplaintAvgAggregateInputType
    _sum?: ComplaintSumAggregateInputType
    _min?: ComplaintMinAggregateInputType
    _max?: ComplaintMaxAggregateInputType
  }

  export type ComplaintGroupByOutputType = {
    id: string
    submissionDate: Date
    seq: number
    complainantId: string
    categoryId: string
    subCategory: string
    standardizedSubCategory: string | null
    description: string
    urgency: $Enums.ComplaintUrgency
    attachmentUrl: string | null
    assignedDepartment: string
    status: $Enums.ComplaintStatus
    sla: string | null
    upvoteCount: number
    isPublic: boolean
    escalationLevel: string | null
    dateOfResolution: Date | null
    assignedAgentId: string | null
    managedByMunicipalAdminId: string | null
    moderatedByMunicipalAdminId: string | null
    crossDeptIssueSuperMunicipalId: string | null
    escalatedToStateAdminId: string | null
    escalatedToSuperStateAdminId: string | null
    managedBySuperAdminId: string | null
    _count: ComplaintCountAggregateOutputType | null
    _avg: ComplaintAvgAggregateOutputType | null
    _sum: ComplaintSumAggregateOutputType | null
    _min: ComplaintMinAggregateOutputType | null
    _max: ComplaintMaxAggregateOutputType | null
  }

  type GetComplaintGroupByPayload<T extends ComplaintGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ComplaintGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ComplaintGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ComplaintGroupByOutputType[P]>
            : GetScalarType<T[P], ComplaintGroupByOutputType[P]>
        }
      >
    >


  export type ComplaintSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    submissionDate?: boolean
    seq?: boolean
    complainantId?: boolean
    categoryId?: boolean
    subCategory?: boolean
    standardizedSubCategory?: boolean
    description?: boolean
    urgency?: boolean
    attachmentUrl?: boolean
    assignedDepartment?: boolean
    status?: boolean
    sla?: boolean
    upvoteCount?: boolean
    isPublic?: boolean
    escalationLevel?: boolean
    dateOfResolution?: boolean
    assignedAgentId?: boolean
    managedByMunicipalAdminId?: boolean
    moderatedByMunicipalAdminId?: boolean
    crossDeptIssueSuperMunicipalId?: boolean
    escalatedToStateAdminId?: boolean
    escalatedToSuperStateAdminId?: boolean
    managedBySuperAdminId?: boolean
    complainant?: boolean | UserDefaultArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    location?: boolean | Complaint$locationArgs<ExtArgs>
    assignedAgent?: boolean | Complaint$assignedAgentArgs<ExtArgs>
    coAssignedAgents?: boolean | Complaint$coAssignedAgentsArgs<ExtArgs>
    managedByMunicipalAdmin?: boolean | Complaint$managedByMunicipalAdminArgs<ExtArgs>
    moderatedByMunicipalAdmin?: boolean | Complaint$moderatedByMunicipalAdminArgs<ExtArgs>
    crossDeptIssueSuperMunicipal?: boolean | Complaint$crossDeptIssueSuperMunicipalArgs<ExtArgs>
    escalatedToStateAdmin?: boolean | Complaint$escalatedToStateAdminArgs<ExtArgs>
    escalatedToSuperStateAdmin?: boolean | Complaint$escalatedToSuperStateAdminArgs<ExtArgs>
    managedBySuperAdmin?: boolean | Complaint$managedBySuperAdminArgs<ExtArgs>
    upvotes?: boolean | Complaint$upvotesArgs<ExtArgs>
    auditLogs?: boolean | Complaint$auditLogsArgs<ExtArgs>
    _count?: boolean | ComplaintCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["complaint"]>

  export type ComplaintSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    submissionDate?: boolean
    seq?: boolean
    complainantId?: boolean
    categoryId?: boolean
    subCategory?: boolean
    standardizedSubCategory?: boolean
    description?: boolean
    urgency?: boolean
    attachmentUrl?: boolean
    assignedDepartment?: boolean
    status?: boolean
    sla?: boolean
    upvoteCount?: boolean
    isPublic?: boolean
    escalationLevel?: boolean
    dateOfResolution?: boolean
    assignedAgentId?: boolean
    managedByMunicipalAdminId?: boolean
    moderatedByMunicipalAdminId?: boolean
    crossDeptIssueSuperMunicipalId?: boolean
    escalatedToStateAdminId?: boolean
    escalatedToSuperStateAdminId?: boolean
    managedBySuperAdminId?: boolean
    complainant?: boolean | UserDefaultArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    assignedAgent?: boolean | Complaint$assignedAgentArgs<ExtArgs>
    managedByMunicipalAdmin?: boolean | Complaint$managedByMunicipalAdminArgs<ExtArgs>
    moderatedByMunicipalAdmin?: boolean | Complaint$moderatedByMunicipalAdminArgs<ExtArgs>
    crossDeptIssueSuperMunicipal?: boolean | Complaint$crossDeptIssueSuperMunicipalArgs<ExtArgs>
    escalatedToStateAdmin?: boolean | Complaint$escalatedToStateAdminArgs<ExtArgs>
    escalatedToSuperStateAdmin?: boolean | Complaint$escalatedToSuperStateAdminArgs<ExtArgs>
    managedBySuperAdmin?: boolean | Complaint$managedBySuperAdminArgs<ExtArgs>
  }, ExtArgs["result"]["complaint"]>

  export type ComplaintSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    submissionDate?: boolean
    seq?: boolean
    complainantId?: boolean
    categoryId?: boolean
    subCategory?: boolean
    standardizedSubCategory?: boolean
    description?: boolean
    urgency?: boolean
    attachmentUrl?: boolean
    assignedDepartment?: boolean
    status?: boolean
    sla?: boolean
    upvoteCount?: boolean
    isPublic?: boolean
    escalationLevel?: boolean
    dateOfResolution?: boolean
    assignedAgentId?: boolean
    managedByMunicipalAdminId?: boolean
    moderatedByMunicipalAdminId?: boolean
    crossDeptIssueSuperMunicipalId?: boolean
    escalatedToStateAdminId?: boolean
    escalatedToSuperStateAdminId?: boolean
    managedBySuperAdminId?: boolean
    complainant?: boolean | UserDefaultArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    assignedAgent?: boolean | Complaint$assignedAgentArgs<ExtArgs>
    managedByMunicipalAdmin?: boolean | Complaint$managedByMunicipalAdminArgs<ExtArgs>
    moderatedByMunicipalAdmin?: boolean | Complaint$moderatedByMunicipalAdminArgs<ExtArgs>
    crossDeptIssueSuperMunicipal?: boolean | Complaint$crossDeptIssueSuperMunicipalArgs<ExtArgs>
    escalatedToStateAdmin?: boolean | Complaint$escalatedToStateAdminArgs<ExtArgs>
    escalatedToSuperStateAdmin?: boolean | Complaint$escalatedToSuperStateAdminArgs<ExtArgs>
    managedBySuperAdmin?: boolean | Complaint$managedBySuperAdminArgs<ExtArgs>
  }, ExtArgs["result"]["complaint"]>

  export type ComplaintSelectScalar = {
    id?: boolean
    submissionDate?: boolean
    seq?: boolean
    complainantId?: boolean
    categoryId?: boolean
    subCategory?: boolean
    standardizedSubCategory?: boolean
    description?: boolean
    urgency?: boolean
    attachmentUrl?: boolean
    assignedDepartment?: boolean
    status?: boolean
    sla?: boolean
    upvoteCount?: boolean
    isPublic?: boolean
    escalationLevel?: boolean
    dateOfResolution?: boolean
    assignedAgentId?: boolean
    managedByMunicipalAdminId?: boolean
    moderatedByMunicipalAdminId?: boolean
    crossDeptIssueSuperMunicipalId?: boolean
    escalatedToStateAdminId?: boolean
    escalatedToSuperStateAdminId?: boolean
    managedBySuperAdminId?: boolean
  }

  export type ComplaintOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "submissionDate" | "seq" | "complainantId" | "categoryId" | "subCategory" | "standardizedSubCategory" | "description" | "urgency" | "attachmentUrl" | "assignedDepartment" | "status" | "sla" | "upvoteCount" | "isPublic" | "escalationLevel" | "dateOfResolution" | "assignedAgentId" | "managedByMunicipalAdminId" | "moderatedByMunicipalAdminId" | "crossDeptIssueSuperMunicipalId" | "escalatedToStateAdminId" | "escalatedToSuperStateAdminId" | "managedBySuperAdminId", ExtArgs["result"]["complaint"]>
  export type ComplaintInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    complainant?: boolean | UserDefaultArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    location?: boolean | Complaint$locationArgs<ExtArgs>
    assignedAgent?: boolean | Complaint$assignedAgentArgs<ExtArgs>
    coAssignedAgents?: boolean | Complaint$coAssignedAgentsArgs<ExtArgs>
    managedByMunicipalAdmin?: boolean | Complaint$managedByMunicipalAdminArgs<ExtArgs>
    moderatedByMunicipalAdmin?: boolean | Complaint$moderatedByMunicipalAdminArgs<ExtArgs>
    crossDeptIssueSuperMunicipal?: boolean | Complaint$crossDeptIssueSuperMunicipalArgs<ExtArgs>
    escalatedToStateAdmin?: boolean | Complaint$escalatedToStateAdminArgs<ExtArgs>
    escalatedToSuperStateAdmin?: boolean | Complaint$escalatedToSuperStateAdminArgs<ExtArgs>
    managedBySuperAdmin?: boolean | Complaint$managedBySuperAdminArgs<ExtArgs>
    upvotes?: boolean | Complaint$upvotesArgs<ExtArgs>
    auditLogs?: boolean | Complaint$auditLogsArgs<ExtArgs>
    _count?: boolean | ComplaintCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ComplaintIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    complainant?: boolean | UserDefaultArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    assignedAgent?: boolean | Complaint$assignedAgentArgs<ExtArgs>
    managedByMunicipalAdmin?: boolean | Complaint$managedByMunicipalAdminArgs<ExtArgs>
    moderatedByMunicipalAdmin?: boolean | Complaint$moderatedByMunicipalAdminArgs<ExtArgs>
    crossDeptIssueSuperMunicipal?: boolean | Complaint$crossDeptIssueSuperMunicipalArgs<ExtArgs>
    escalatedToStateAdmin?: boolean | Complaint$escalatedToStateAdminArgs<ExtArgs>
    escalatedToSuperStateAdmin?: boolean | Complaint$escalatedToSuperStateAdminArgs<ExtArgs>
    managedBySuperAdmin?: boolean | Complaint$managedBySuperAdminArgs<ExtArgs>
  }
  export type ComplaintIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    complainant?: boolean | UserDefaultArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    assignedAgent?: boolean | Complaint$assignedAgentArgs<ExtArgs>
    managedByMunicipalAdmin?: boolean | Complaint$managedByMunicipalAdminArgs<ExtArgs>
    moderatedByMunicipalAdmin?: boolean | Complaint$moderatedByMunicipalAdminArgs<ExtArgs>
    crossDeptIssueSuperMunicipal?: boolean | Complaint$crossDeptIssueSuperMunicipalArgs<ExtArgs>
    escalatedToStateAdmin?: boolean | Complaint$escalatedToStateAdminArgs<ExtArgs>
    escalatedToSuperStateAdmin?: boolean | Complaint$escalatedToSuperStateAdminArgs<ExtArgs>
    managedBySuperAdmin?: boolean | Complaint$managedBySuperAdminArgs<ExtArgs>
  }

  export type $ComplaintPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Complaint"
    objects: {
      complainant: Prisma.$UserPayload<ExtArgs>
      category: Prisma.$CategoryPayload<ExtArgs>
      location: Prisma.$ComplaintLocationPayload<ExtArgs> | null
      assignedAgent: Prisma.$AgentPayload<ExtArgs> | null
      coAssignedAgents: Prisma.$AgentPayload<ExtArgs>[]
      managedByMunicipalAdmin: Prisma.$DepartmentMunicipalAdminPayload<ExtArgs> | null
      moderatedByMunicipalAdmin: Prisma.$DepartmentMunicipalAdminPayload<ExtArgs> | null
      crossDeptIssueSuperMunicipal: Prisma.$SuperMunicipalAdminPayload<ExtArgs> | null
      escalatedToStateAdmin: Prisma.$DepartmentStateAdminPayload<ExtArgs> | null
      escalatedToSuperStateAdmin: Prisma.$SuperStateAdminPayload<ExtArgs> | null
      managedBySuperAdmin: Prisma.$SuperAdminPayload<ExtArgs> | null
      upvotes: Prisma.$UpvotePayload<ExtArgs>[]
      auditLogs: Prisma.$AuditLogPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      submissionDate: Date
      seq: number
      complainantId: string
      categoryId: string
      subCategory: string
      standardizedSubCategory: string | null
      description: string
      urgency: $Enums.ComplaintUrgency
      attachmentUrl: string | null
      assignedDepartment: string
      status: $Enums.ComplaintStatus
      sla: string | null
      upvoteCount: number
      isPublic: boolean
      escalationLevel: string | null
      dateOfResolution: Date | null
      assignedAgentId: string | null
      managedByMunicipalAdminId: string | null
      moderatedByMunicipalAdminId: string | null
      crossDeptIssueSuperMunicipalId: string | null
      escalatedToStateAdminId: string | null
      escalatedToSuperStateAdminId: string | null
      managedBySuperAdminId: string | null
    }, ExtArgs["result"]["complaint"]>
    composites: {}
  }

  type ComplaintGetPayload<S extends boolean | null | undefined | ComplaintDefaultArgs> = $Result.GetResult<Prisma.$ComplaintPayload, S>

  type ComplaintCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ComplaintFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ComplaintCountAggregateInputType | true
    }

  export interface ComplaintDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Complaint'], meta: { name: 'Complaint' } }
    /**
     * Find zero or one Complaint that matches the filter.
     * @param {ComplaintFindUniqueArgs} args - Arguments to find a Complaint
     * @example
     * // Get one Complaint
     * const complaint = await prisma.complaint.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ComplaintFindUniqueArgs>(args: SelectSubset<T, ComplaintFindUniqueArgs<ExtArgs>>): Prisma__ComplaintClient<$Result.GetResult<Prisma.$ComplaintPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Complaint that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ComplaintFindUniqueOrThrowArgs} args - Arguments to find a Complaint
     * @example
     * // Get one Complaint
     * const complaint = await prisma.complaint.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ComplaintFindUniqueOrThrowArgs>(args: SelectSubset<T, ComplaintFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ComplaintClient<$Result.GetResult<Prisma.$ComplaintPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Complaint that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComplaintFindFirstArgs} args - Arguments to find a Complaint
     * @example
     * // Get one Complaint
     * const complaint = await prisma.complaint.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ComplaintFindFirstArgs>(args?: SelectSubset<T, ComplaintFindFirstArgs<ExtArgs>>): Prisma__ComplaintClient<$Result.GetResult<Prisma.$ComplaintPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Complaint that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComplaintFindFirstOrThrowArgs} args - Arguments to find a Complaint
     * @example
     * // Get one Complaint
     * const complaint = await prisma.complaint.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ComplaintFindFirstOrThrowArgs>(args?: SelectSubset<T, ComplaintFindFirstOrThrowArgs<ExtArgs>>): Prisma__ComplaintClient<$Result.GetResult<Prisma.$ComplaintPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Complaints that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComplaintFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Complaints
     * const complaints = await prisma.complaint.findMany()
     * 
     * // Get first 10 Complaints
     * const complaints = await prisma.complaint.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const complaintWithIdOnly = await prisma.complaint.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ComplaintFindManyArgs>(args?: SelectSubset<T, ComplaintFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComplaintPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Complaint.
     * @param {ComplaintCreateArgs} args - Arguments to create a Complaint.
     * @example
     * // Create one Complaint
     * const Complaint = await prisma.complaint.create({
     *   data: {
     *     // ... data to create a Complaint
     *   }
     * })
     * 
     */
    create<T extends ComplaintCreateArgs>(args: SelectSubset<T, ComplaintCreateArgs<ExtArgs>>): Prisma__ComplaintClient<$Result.GetResult<Prisma.$ComplaintPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Complaints.
     * @param {ComplaintCreateManyArgs} args - Arguments to create many Complaints.
     * @example
     * // Create many Complaints
     * const complaint = await prisma.complaint.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ComplaintCreateManyArgs>(args?: SelectSubset<T, ComplaintCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Complaints and returns the data saved in the database.
     * @param {ComplaintCreateManyAndReturnArgs} args - Arguments to create many Complaints.
     * @example
     * // Create many Complaints
     * const complaint = await prisma.complaint.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Complaints and only return the `id`
     * const complaintWithIdOnly = await prisma.complaint.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ComplaintCreateManyAndReturnArgs>(args?: SelectSubset<T, ComplaintCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComplaintPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Complaint.
     * @param {ComplaintDeleteArgs} args - Arguments to delete one Complaint.
     * @example
     * // Delete one Complaint
     * const Complaint = await prisma.complaint.delete({
     *   where: {
     *     // ... filter to delete one Complaint
     *   }
     * })
     * 
     */
    delete<T extends ComplaintDeleteArgs>(args: SelectSubset<T, ComplaintDeleteArgs<ExtArgs>>): Prisma__ComplaintClient<$Result.GetResult<Prisma.$ComplaintPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Complaint.
     * @param {ComplaintUpdateArgs} args - Arguments to update one Complaint.
     * @example
     * // Update one Complaint
     * const complaint = await prisma.complaint.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ComplaintUpdateArgs>(args: SelectSubset<T, ComplaintUpdateArgs<ExtArgs>>): Prisma__ComplaintClient<$Result.GetResult<Prisma.$ComplaintPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Complaints.
     * @param {ComplaintDeleteManyArgs} args - Arguments to filter Complaints to delete.
     * @example
     * // Delete a few Complaints
     * const { count } = await prisma.complaint.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ComplaintDeleteManyArgs>(args?: SelectSubset<T, ComplaintDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Complaints.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComplaintUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Complaints
     * const complaint = await prisma.complaint.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ComplaintUpdateManyArgs>(args: SelectSubset<T, ComplaintUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Complaints and returns the data updated in the database.
     * @param {ComplaintUpdateManyAndReturnArgs} args - Arguments to update many Complaints.
     * @example
     * // Update many Complaints
     * const complaint = await prisma.complaint.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Complaints and only return the `id`
     * const complaintWithIdOnly = await prisma.complaint.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ComplaintUpdateManyAndReturnArgs>(args: SelectSubset<T, ComplaintUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComplaintPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Complaint.
     * @param {ComplaintUpsertArgs} args - Arguments to update or create a Complaint.
     * @example
     * // Update or create a Complaint
     * const complaint = await prisma.complaint.upsert({
     *   create: {
     *     // ... data to create a Complaint
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Complaint we want to update
     *   }
     * })
     */
    upsert<T extends ComplaintUpsertArgs>(args: SelectSubset<T, ComplaintUpsertArgs<ExtArgs>>): Prisma__ComplaintClient<$Result.GetResult<Prisma.$ComplaintPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Complaints.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComplaintCountArgs} args - Arguments to filter Complaints to count.
     * @example
     * // Count the number of Complaints
     * const count = await prisma.complaint.count({
     *   where: {
     *     // ... the filter for the Complaints we want to count
     *   }
     * })
    **/
    count<T extends ComplaintCountArgs>(
      args?: Subset<T, ComplaintCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ComplaintCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Complaint.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComplaintAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ComplaintAggregateArgs>(args: Subset<T, ComplaintAggregateArgs>): Prisma.PrismaPromise<GetComplaintAggregateType<T>>

    /**
     * Group by Complaint.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComplaintGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ComplaintGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ComplaintGroupByArgs['orderBy'] }
        : { orderBy?: ComplaintGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ComplaintGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetComplaintGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Complaint model
   */
  readonly fields: ComplaintFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Complaint.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ComplaintClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    complainant<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    category<T extends CategoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CategoryDefaultArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    location<T extends Complaint$locationArgs<ExtArgs> = {}>(args?: Subset<T, Complaint$locationArgs<ExtArgs>>): Prisma__ComplaintLocationClient<$Result.GetResult<Prisma.$ComplaintLocationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    assignedAgent<T extends Complaint$assignedAgentArgs<ExtArgs> = {}>(args?: Subset<T, Complaint$assignedAgentArgs<ExtArgs>>): Prisma__AgentClient<$Result.GetResult<Prisma.$AgentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    coAssignedAgents<T extends Complaint$coAssignedAgentsArgs<ExtArgs> = {}>(args?: Subset<T, Complaint$coAssignedAgentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    managedByMunicipalAdmin<T extends Complaint$managedByMunicipalAdminArgs<ExtArgs> = {}>(args?: Subset<T, Complaint$managedByMunicipalAdminArgs<ExtArgs>>): Prisma__DepartmentMunicipalAdminClient<$Result.GetResult<Prisma.$DepartmentMunicipalAdminPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    moderatedByMunicipalAdmin<T extends Complaint$moderatedByMunicipalAdminArgs<ExtArgs> = {}>(args?: Subset<T, Complaint$moderatedByMunicipalAdminArgs<ExtArgs>>): Prisma__DepartmentMunicipalAdminClient<$Result.GetResult<Prisma.$DepartmentMunicipalAdminPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    crossDeptIssueSuperMunicipal<T extends Complaint$crossDeptIssueSuperMunicipalArgs<ExtArgs> = {}>(args?: Subset<T, Complaint$crossDeptIssueSuperMunicipalArgs<ExtArgs>>): Prisma__SuperMunicipalAdminClient<$Result.GetResult<Prisma.$SuperMunicipalAdminPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    escalatedToStateAdmin<T extends Complaint$escalatedToStateAdminArgs<ExtArgs> = {}>(args?: Subset<T, Complaint$escalatedToStateAdminArgs<ExtArgs>>): Prisma__DepartmentStateAdminClient<$Result.GetResult<Prisma.$DepartmentStateAdminPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    escalatedToSuperStateAdmin<T extends Complaint$escalatedToSuperStateAdminArgs<ExtArgs> = {}>(args?: Subset<T, Complaint$escalatedToSuperStateAdminArgs<ExtArgs>>): Prisma__SuperStateAdminClient<$Result.GetResult<Prisma.$SuperStateAdminPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    managedBySuperAdmin<T extends Complaint$managedBySuperAdminArgs<ExtArgs> = {}>(args?: Subset<T, Complaint$managedBySuperAdminArgs<ExtArgs>>): Prisma__SuperAdminClient<$Result.GetResult<Prisma.$SuperAdminPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    upvotes<T extends Complaint$upvotesArgs<ExtArgs> = {}>(args?: Subset<T, Complaint$upvotesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UpvotePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    auditLogs<T extends Complaint$auditLogsArgs<ExtArgs> = {}>(args?: Subset<T, Complaint$auditLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Complaint model
   */
  interface ComplaintFieldRefs {
    readonly id: FieldRef<"Complaint", 'String'>
    readonly submissionDate: FieldRef<"Complaint", 'DateTime'>
    readonly seq: FieldRef<"Complaint", 'Int'>
    readonly complainantId: FieldRef<"Complaint", 'String'>
    readonly categoryId: FieldRef<"Complaint", 'String'>
    readonly subCategory: FieldRef<"Complaint", 'String'>
    readonly standardizedSubCategory: FieldRef<"Complaint", 'String'>
    readonly description: FieldRef<"Complaint", 'String'>
    readonly urgency: FieldRef<"Complaint", 'ComplaintUrgency'>
    readonly attachmentUrl: FieldRef<"Complaint", 'String'>
    readonly assignedDepartment: FieldRef<"Complaint", 'String'>
    readonly status: FieldRef<"Complaint", 'ComplaintStatus'>
    readonly sla: FieldRef<"Complaint", 'String'>
    readonly upvoteCount: FieldRef<"Complaint", 'Int'>
    readonly isPublic: FieldRef<"Complaint", 'Boolean'>
    readonly escalationLevel: FieldRef<"Complaint", 'String'>
    readonly dateOfResolution: FieldRef<"Complaint", 'DateTime'>
    readonly assignedAgentId: FieldRef<"Complaint", 'String'>
    readonly managedByMunicipalAdminId: FieldRef<"Complaint", 'String'>
    readonly moderatedByMunicipalAdminId: FieldRef<"Complaint", 'String'>
    readonly crossDeptIssueSuperMunicipalId: FieldRef<"Complaint", 'String'>
    readonly escalatedToStateAdminId: FieldRef<"Complaint", 'String'>
    readonly escalatedToSuperStateAdminId: FieldRef<"Complaint", 'String'>
    readonly managedBySuperAdminId: FieldRef<"Complaint", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Complaint findUnique
   */
  export type ComplaintFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Complaint
     */
    select?: ComplaintSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Complaint
     */
    omit?: ComplaintOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintInclude<ExtArgs> | null
    /**
     * Filter, which Complaint to fetch.
     */
    where: ComplaintWhereUniqueInput
  }

  /**
   * Complaint findUniqueOrThrow
   */
  export type ComplaintFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Complaint
     */
    select?: ComplaintSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Complaint
     */
    omit?: ComplaintOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintInclude<ExtArgs> | null
    /**
     * Filter, which Complaint to fetch.
     */
    where: ComplaintWhereUniqueInput
  }

  /**
   * Complaint findFirst
   */
  export type ComplaintFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Complaint
     */
    select?: ComplaintSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Complaint
     */
    omit?: ComplaintOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintInclude<ExtArgs> | null
    /**
     * Filter, which Complaint to fetch.
     */
    where?: ComplaintWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Complaints to fetch.
     */
    orderBy?: ComplaintOrderByWithRelationInput | ComplaintOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Complaints.
     */
    cursor?: ComplaintWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Complaints from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Complaints.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Complaints.
     */
    distinct?: ComplaintScalarFieldEnum | ComplaintScalarFieldEnum[]
  }

  /**
   * Complaint findFirstOrThrow
   */
  export type ComplaintFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Complaint
     */
    select?: ComplaintSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Complaint
     */
    omit?: ComplaintOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintInclude<ExtArgs> | null
    /**
     * Filter, which Complaint to fetch.
     */
    where?: ComplaintWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Complaints to fetch.
     */
    orderBy?: ComplaintOrderByWithRelationInput | ComplaintOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Complaints.
     */
    cursor?: ComplaintWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Complaints from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Complaints.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Complaints.
     */
    distinct?: ComplaintScalarFieldEnum | ComplaintScalarFieldEnum[]
  }

  /**
   * Complaint findMany
   */
  export type ComplaintFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Complaint
     */
    select?: ComplaintSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Complaint
     */
    omit?: ComplaintOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintInclude<ExtArgs> | null
    /**
     * Filter, which Complaints to fetch.
     */
    where?: ComplaintWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Complaints to fetch.
     */
    orderBy?: ComplaintOrderByWithRelationInput | ComplaintOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Complaints.
     */
    cursor?: ComplaintWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Complaints from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Complaints.
     */
    skip?: number
    distinct?: ComplaintScalarFieldEnum | ComplaintScalarFieldEnum[]
  }

  /**
   * Complaint create
   */
  export type ComplaintCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Complaint
     */
    select?: ComplaintSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Complaint
     */
    omit?: ComplaintOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintInclude<ExtArgs> | null
    /**
     * The data needed to create a Complaint.
     */
    data: XOR<ComplaintCreateInput, ComplaintUncheckedCreateInput>
  }

  /**
   * Complaint createMany
   */
  export type ComplaintCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Complaints.
     */
    data: ComplaintCreateManyInput | ComplaintCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Complaint createManyAndReturn
   */
  export type ComplaintCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Complaint
     */
    select?: ComplaintSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Complaint
     */
    omit?: ComplaintOmit<ExtArgs> | null
    /**
     * The data used to create many Complaints.
     */
    data: ComplaintCreateManyInput | ComplaintCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Complaint update
   */
  export type ComplaintUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Complaint
     */
    select?: ComplaintSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Complaint
     */
    omit?: ComplaintOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintInclude<ExtArgs> | null
    /**
     * The data needed to update a Complaint.
     */
    data: XOR<ComplaintUpdateInput, ComplaintUncheckedUpdateInput>
    /**
     * Choose, which Complaint to update.
     */
    where: ComplaintWhereUniqueInput
  }

  /**
   * Complaint updateMany
   */
  export type ComplaintUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Complaints.
     */
    data: XOR<ComplaintUpdateManyMutationInput, ComplaintUncheckedUpdateManyInput>
    /**
     * Filter which Complaints to update
     */
    where?: ComplaintWhereInput
    /**
     * Limit how many Complaints to update.
     */
    limit?: number
  }

  /**
   * Complaint updateManyAndReturn
   */
  export type ComplaintUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Complaint
     */
    select?: ComplaintSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Complaint
     */
    omit?: ComplaintOmit<ExtArgs> | null
    /**
     * The data used to update Complaints.
     */
    data: XOR<ComplaintUpdateManyMutationInput, ComplaintUncheckedUpdateManyInput>
    /**
     * Filter which Complaints to update
     */
    where?: ComplaintWhereInput
    /**
     * Limit how many Complaints to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Complaint upsert
   */
  export type ComplaintUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Complaint
     */
    select?: ComplaintSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Complaint
     */
    omit?: ComplaintOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintInclude<ExtArgs> | null
    /**
     * The filter to search for the Complaint to update in case it exists.
     */
    where: ComplaintWhereUniqueInput
    /**
     * In case the Complaint found by the `where` argument doesn't exist, create a new Complaint with this data.
     */
    create: XOR<ComplaintCreateInput, ComplaintUncheckedCreateInput>
    /**
     * In case the Complaint was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ComplaintUpdateInput, ComplaintUncheckedUpdateInput>
  }

  /**
   * Complaint delete
   */
  export type ComplaintDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Complaint
     */
    select?: ComplaintSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Complaint
     */
    omit?: ComplaintOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintInclude<ExtArgs> | null
    /**
     * Filter which Complaint to delete.
     */
    where: ComplaintWhereUniqueInput
  }

  /**
   * Complaint deleteMany
   */
  export type ComplaintDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Complaints to delete
     */
    where?: ComplaintWhereInput
    /**
     * Limit how many Complaints to delete.
     */
    limit?: number
  }

  /**
   * Complaint.location
   */
  export type Complaint$locationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComplaintLocation
     */
    select?: ComplaintLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ComplaintLocation
     */
    omit?: ComplaintLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintLocationInclude<ExtArgs> | null
    where?: ComplaintLocationWhereInput
  }

  /**
   * Complaint.assignedAgent
   */
  export type Complaint$assignedAgentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agent
     */
    select?: AgentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Agent
     */
    omit?: AgentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentInclude<ExtArgs> | null
    where?: AgentWhereInput
  }

  /**
   * Complaint.coAssignedAgents
   */
  export type Complaint$coAssignedAgentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agent
     */
    select?: AgentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Agent
     */
    omit?: AgentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentInclude<ExtArgs> | null
    where?: AgentWhereInput
    orderBy?: AgentOrderByWithRelationInput | AgentOrderByWithRelationInput[]
    cursor?: AgentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AgentScalarFieldEnum | AgentScalarFieldEnum[]
  }

  /**
   * Complaint.managedByMunicipalAdmin
   */
  export type Complaint$managedByMunicipalAdminArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentMunicipalAdmin
     */
    select?: DepartmentMunicipalAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepartmentMunicipalAdmin
     */
    omit?: DepartmentMunicipalAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentMunicipalAdminInclude<ExtArgs> | null
    where?: DepartmentMunicipalAdminWhereInput
  }

  /**
   * Complaint.moderatedByMunicipalAdmin
   */
  export type Complaint$moderatedByMunicipalAdminArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentMunicipalAdmin
     */
    select?: DepartmentMunicipalAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepartmentMunicipalAdmin
     */
    omit?: DepartmentMunicipalAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentMunicipalAdminInclude<ExtArgs> | null
    where?: DepartmentMunicipalAdminWhereInput
  }

  /**
   * Complaint.crossDeptIssueSuperMunicipal
   */
  export type Complaint$crossDeptIssueSuperMunicipalArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuperMunicipalAdmin
     */
    select?: SuperMunicipalAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SuperMunicipalAdmin
     */
    omit?: SuperMunicipalAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SuperMunicipalAdminInclude<ExtArgs> | null
    where?: SuperMunicipalAdminWhereInput
  }

  /**
   * Complaint.escalatedToStateAdmin
   */
  export type Complaint$escalatedToStateAdminArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentStateAdmin
     */
    select?: DepartmentStateAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepartmentStateAdmin
     */
    omit?: DepartmentStateAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentStateAdminInclude<ExtArgs> | null
    where?: DepartmentStateAdminWhereInput
  }

  /**
   * Complaint.escalatedToSuperStateAdmin
   */
  export type Complaint$escalatedToSuperStateAdminArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuperStateAdmin
     */
    select?: SuperStateAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SuperStateAdmin
     */
    omit?: SuperStateAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SuperStateAdminInclude<ExtArgs> | null
    where?: SuperStateAdminWhereInput
  }

  /**
   * Complaint.managedBySuperAdmin
   */
  export type Complaint$managedBySuperAdminArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuperAdmin
     */
    select?: SuperAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SuperAdmin
     */
    omit?: SuperAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SuperAdminInclude<ExtArgs> | null
    where?: SuperAdminWhereInput
  }

  /**
   * Complaint.upvotes
   */
  export type Complaint$upvotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Upvote
     */
    select?: UpvoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Upvote
     */
    omit?: UpvoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UpvoteInclude<ExtArgs> | null
    where?: UpvoteWhereInput
    orderBy?: UpvoteOrderByWithRelationInput | UpvoteOrderByWithRelationInput[]
    cursor?: UpvoteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UpvoteScalarFieldEnum | UpvoteScalarFieldEnum[]
  }

  /**
   * Complaint.auditLogs
   */
  export type Complaint$auditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    cursor?: AuditLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * Complaint without action
   */
  export type ComplaintDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Complaint
     */
    select?: ComplaintSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Complaint
     */
    omit?: ComplaintOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintInclude<ExtArgs> | null
  }


  /**
   * Model ComplaintLocation
   */

  export type AggregateComplaintLocation = {
    _count: ComplaintLocationCountAggregateOutputType | null
    _avg: ComplaintLocationAvgAggregateOutputType | null
    _sum: ComplaintLocationSumAggregateOutputType | null
    _min: ComplaintLocationMinAggregateOutputType | null
    _max: ComplaintLocationMaxAggregateOutputType | null
  }

  export type ComplaintLocationAvgAggregateOutputType = {
    latitude: number | null
    longitude: number | null
  }

  export type ComplaintLocationSumAggregateOutputType = {
    latitude: number | null
    longitude: number | null
  }

  export type ComplaintLocationMinAggregateOutputType = {
    id: string | null
    complaintId: string | null
    pin: string | null
    district: string | null
    city: string | null
    locality: string | null
    street: string | null
    latitude: number | null
    longitude: number | null
  }

  export type ComplaintLocationMaxAggregateOutputType = {
    id: string | null
    complaintId: string | null
    pin: string | null
    district: string | null
    city: string | null
    locality: string | null
    street: string | null
    latitude: number | null
    longitude: number | null
  }

  export type ComplaintLocationCountAggregateOutputType = {
    id: number
    complaintId: number
    pin: number
    district: number
    city: number
    locality: number
    street: number
    latitude: number
    longitude: number
    _all: number
  }


  export type ComplaintLocationAvgAggregateInputType = {
    latitude?: true
    longitude?: true
  }

  export type ComplaintLocationSumAggregateInputType = {
    latitude?: true
    longitude?: true
  }

  export type ComplaintLocationMinAggregateInputType = {
    id?: true
    complaintId?: true
    pin?: true
    district?: true
    city?: true
    locality?: true
    street?: true
    latitude?: true
    longitude?: true
  }

  export type ComplaintLocationMaxAggregateInputType = {
    id?: true
    complaintId?: true
    pin?: true
    district?: true
    city?: true
    locality?: true
    street?: true
    latitude?: true
    longitude?: true
  }

  export type ComplaintLocationCountAggregateInputType = {
    id?: true
    complaintId?: true
    pin?: true
    district?: true
    city?: true
    locality?: true
    street?: true
    latitude?: true
    longitude?: true
    _all?: true
  }

  export type ComplaintLocationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ComplaintLocation to aggregate.
     */
    where?: ComplaintLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ComplaintLocations to fetch.
     */
    orderBy?: ComplaintLocationOrderByWithRelationInput | ComplaintLocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ComplaintLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ComplaintLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ComplaintLocations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ComplaintLocations
    **/
    _count?: true | ComplaintLocationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ComplaintLocationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ComplaintLocationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ComplaintLocationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ComplaintLocationMaxAggregateInputType
  }

  export type GetComplaintLocationAggregateType<T extends ComplaintLocationAggregateArgs> = {
        [P in keyof T & keyof AggregateComplaintLocation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComplaintLocation[P]>
      : GetScalarType<T[P], AggregateComplaintLocation[P]>
  }




  export type ComplaintLocationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ComplaintLocationWhereInput
    orderBy?: ComplaintLocationOrderByWithAggregationInput | ComplaintLocationOrderByWithAggregationInput[]
    by: ComplaintLocationScalarFieldEnum[] | ComplaintLocationScalarFieldEnum
    having?: ComplaintLocationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ComplaintLocationCountAggregateInputType | true
    _avg?: ComplaintLocationAvgAggregateInputType
    _sum?: ComplaintLocationSumAggregateInputType
    _min?: ComplaintLocationMinAggregateInputType
    _max?: ComplaintLocationMaxAggregateInputType
  }

  export type ComplaintLocationGroupByOutputType = {
    id: string
    complaintId: string
    pin: string
    district: string
    city: string
    locality: string
    street: string | null
    latitude: number | null
    longitude: number | null
    _count: ComplaintLocationCountAggregateOutputType | null
    _avg: ComplaintLocationAvgAggregateOutputType | null
    _sum: ComplaintLocationSumAggregateOutputType | null
    _min: ComplaintLocationMinAggregateOutputType | null
    _max: ComplaintLocationMaxAggregateOutputType | null
  }

  type GetComplaintLocationGroupByPayload<T extends ComplaintLocationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ComplaintLocationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ComplaintLocationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ComplaintLocationGroupByOutputType[P]>
            : GetScalarType<T[P], ComplaintLocationGroupByOutputType[P]>
        }
      >
    >


  export type ComplaintLocationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    complaintId?: boolean
    pin?: boolean
    district?: boolean
    city?: boolean
    locality?: boolean
    street?: boolean
    latitude?: boolean
    longitude?: boolean
    complaint?: boolean | ComplaintDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["complaintLocation"]>

  export type ComplaintLocationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    complaintId?: boolean
    pin?: boolean
    district?: boolean
    city?: boolean
    locality?: boolean
    street?: boolean
    latitude?: boolean
    longitude?: boolean
    complaint?: boolean | ComplaintDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["complaintLocation"]>

  export type ComplaintLocationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    complaintId?: boolean
    pin?: boolean
    district?: boolean
    city?: boolean
    locality?: boolean
    street?: boolean
    latitude?: boolean
    longitude?: boolean
    complaint?: boolean | ComplaintDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["complaintLocation"]>

  export type ComplaintLocationSelectScalar = {
    id?: boolean
    complaintId?: boolean
    pin?: boolean
    district?: boolean
    city?: boolean
    locality?: boolean
    street?: boolean
    latitude?: boolean
    longitude?: boolean
  }

  export type ComplaintLocationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "complaintId" | "pin" | "district" | "city" | "locality" | "street" | "latitude" | "longitude", ExtArgs["result"]["complaintLocation"]>
  export type ComplaintLocationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    complaint?: boolean | ComplaintDefaultArgs<ExtArgs>
  }
  export type ComplaintLocationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    complaint?: boolean | ComplaintDefaultArgs<ExtArgs>
  }
  export type ComplaintLocationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    complaint?: boolean | ComplaintDefaultArgs<ExtArgs>
  }

  export type $ComplaintLocationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ComplaintLocation"
    objects: {
      complaint: Prisma.$ComplaintPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      complaintId: string
      pin: string
      district: string
      city: string
      locality: string
      street: string | null
      latitude: number | null
      longitude: number | null
    }, ExtArgs["result"]["complaintLocation"]>
    composites: {}
  }

  type ComplaintLocationGetPayload<S extends boolean | null | undefined | ComplaintLocationDefaultArgs> = $Result.GetResult<Prisma.$ComplaintLocationPayload, S>

  type ComplaintLocationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ComplaintLocationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ComplaintLocationCountAggregateInputType | true
    }

  export interface ComplaintLocationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ComplaintLocation'], meta: { name: 'ComplaintLocation' } }
    /**
     * Find zero or one ComplaintLocation that matches the filter.
     * @param {ComplaintLocationFindUniqueArgs} args - Arguments to find a ComplaintLocation
     * @example
     * // Get one ComplaintLocation
     * const complaintLocation = await prisma.complaintLocation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ComplaintLocationFindUniqueArgs>(args: SelectSubset<T, ComplaintLocationFindUniqueArgs<ExtArgs>>): Prisma__ComplaintLocationClient<$Result.GetResult<Prisma.$ComplaintLocationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ComplaintLocation that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ComplaintLocationFindUniqueOrThrowArgs} args - Arguments to find a ComplaintLocation
     * @example
     * // Get one ComplaintLocation
     * const complaintLocation = await prisma.complaintLocation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ComplaintLocationFindUniqueOrThrowArgs>(args: SelectSubset<T, ComplaintLocationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ComplaintLocationClient<$Result.GetResult<Prisma.$ComplaintLocationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ComplaintLocation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComplaintLocationFindFirstArgs} args - Arguments to find a ComplaintLocation
     * @example
     * // Get one ComplaintLocation
     * const complaintLocation = await prisma.complaintLocation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ComplaintLocationFindFirstArgs>(args?: SelectSubset<T, ComplaintLocationFindFirstArgs<ExtArgs>>): Prisma__ComplaintLocationClient<$Result.GetResult<Prisma.$ComplaintLocationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ComplaintLocation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComplaintLocationFindFirstOrThrowArgs} args - Arguments to find a ComplaintLocation
     * @example
     * // Get one ComplaintLocation
     * const complaintLocation = await prisma.complaintLocation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ComplaintLocationFindFirstOrThrowArgs>(args?: SelectSubset<T, ComplaintLocationFindFirstOrThrowArgs<ExtArgs>>): Prisma__ComplaintLocationClient<$Result.GetResult<Prisma.$ComplaintLocationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ComplaintLocations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComplaintLocationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ComplaintLocations
     * const complaintLocations = await prisma.complaintLocation.findMany()
     * 
     * // Get first 10 ComplaintLocations
     * const complaintLocations = await prisma.complaintLocation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const complaintLocationWithIdOnly = await prisma.complaintLocation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ComplaintLocationFindManyArgs>(args?: SelectSubset<T, ComplaintLocationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComplaintLocationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ComplaintLocation.
     * @param {ComplaintLocationCreateArgs} args - Arguments to create a ComplaintLocation.
     * @example
     * // Create one ComplaintLocation
     * const ComplaintLocation = await prisma.complaintLocation.create({
     *   data: {
     *     // ... data to create a ComplaintLocation
     *   }
     * })
     * 
     */
    create<T extends ComplaintLocationCreateArgs>(args: SelectSubset<T, ComplaintLocationCreateArgs<ExtArgs>>): Prisma__ComplaintLocationClient<$Result.GetResult<Prisma.$ComplaintLocationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ComplaintLocations.
     * @param {ComplaintLocationCreateManyArgs} args - Arguments to create many ComplaintLocations.
     * @example
     * // Create many ComplaintLocations
     * const complaintLocation = await prisma.complaintLocation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ComplaintLocationCreateManyArgs>(args?: SelectSubset<T, ComplaintLocationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ComplaintLocations and returns the data saved in the database.
     * @param {ComplaintLocationCreateManyAndReturnArgs} args - Arguments to create many ComplaintLocations.
     * @example
     * // Create many ComplaintLocations
     * const complaintLocation = await prisma.complaintLocation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ComplaintLocations and only return the `id`
     * const complaintLocationWithIdOnly = await prisma.complaintLocation.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ComplaintLocationCreateManyAndReturnArgs>(args?: SelectSubset<T, ComplaintLocationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComplaintLocationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ComplaintLocation.
     * @param {ComplaintLocationDeleteArgs} args - Arguments to delete one ComplaintLocation.
     * @example
     * // Delete one ComplaintLocation
     * const ComplaintLocation = await prisma.complaintLocation.delete({
     *   where: {
     *     // ... filter to delete one ComplaintLocation
     *   }
     * })
     * 
     */
    delete<T extends ComplaintLocationDeleteArgs>(args: SelectSubset<T, ComplaintLocationDeleteArgs<ExtArgs>>): Prisma__ComplaintLocationClient<$Result.GetResult<Prisma.$ComplaintLocationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ComplaintLocation.
     * @param {ComplaintLocationUpdateArgs} args - Arguments to update one ComplaintLocation.
     * @example
     * // Update one ComplaintLocation
     * const complaintLocation = await prisma.complaintLocation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ComplaintLocationUpdateArgs>(args: SelectSubset<T, ComplaintLocationUpdateArgs<ExtArgs>>): Prisma__ComplaintLocationClient<$Result.GetResult<Prisma.$ComplaintLocationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ComplaintLocations.
     * @param {ComplaintLocationDeleteManyArgs} args - Arguments to filter ComplaintLocations to delete.
     * @example
     * // Delete a few ComplaintLocations
     * const { count } = await prisma.complaintLocation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ComplaintLocationDeleteManyArgs>(args?: SelectSubset<T, ComplaintLocationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ComplaintLocations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComplaintLocationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ComplaintLocations
     * const complaintLocation = await prisma.complaintLocation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ComplaintLocationUpdateManyArgs>(args: SelectSubset<T, ComplaintLocationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ComplaintLocations and returns the data updated in the database.
     * @param {ComplaintLocationUpdateManyAndReturnArgs} args - Arguments to update many ComplaintLocations.
     * @example
     * // Update many ComplaintLocations
     * const complaintLocation = await prisma.complaintLocation.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ComplaintLocations and only return the `id`
     * const complaintLocationWithIdOnly = await prisma.complaintLocation.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ComplaintLocationUpdateManyAndReturnArgs>(args: SelectSubset<T, ComplaintLocationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComplaintLocationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ComplaintLocation.
     * @param {ComplaintLocationUpsertArgs} args - Arguments to update or create a ComplaintLocation.
     * @example
     * // Update or create a ComplaintLocation
     * const complaintLocation = await prisma.complaintLocation.upsert({
     *   create: {
     *     // ... data to create a ComplaintLocation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ComplaintLocation we want to update
     *   }
     * })
     */
    upsert<T extends ComplaintLocationUpsertArgs>(args: SelectSubset<T, ComplaintLocationUpsertArgs<ExtArgs>>): Prisma__ComplaintLocationClient<$Result.GetResult<Prisma.$ComplaintLocationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ComplaintLocations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComplaintLocationCountArgs} args - Arguments to filter ComplaintLocations to count.
     * @example
     * // Count the number of ComplaintLocations
     * const count = await prisma.complaintLocation.count({
     *   where: {
     *     // ... the filter for the ComplaintLocations we want to count
     *   }
     * })
    **/
    count<T extends ComplaintLocationCountArgs>(
      args?: Subset<T, ComplaintLocationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ComplaintLocationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ComplaintLocation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComplaintLocationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ComplaintLocationAggregateArgs>(args: Subset<T, ComplaintLocationAggregateArgs>): Prisma.PrismaPromise<GetComplaintLocationAggregateType<T>>

    /**
     * Group by ComplaintLocation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComplaintLocationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ComplaintLocationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ComplaintLocationGroupByArgs['orderBy'] }
        : { orderBy?: ComplaintLocationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ComplaintLocationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetComplaintLocationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ComplaintLocation model
   */
  readonly fields: ComplaintLocationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ComplaintLocation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ComplaintLocationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    complaint<T extends ComplaintDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ComplaintDefaultArgs<ExtArgs>>): Prisma__ComplaintClient<$Result.GetResult<Prisma.$ComplaintPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ComplaintLocation model
   */
  interface ComplaintLocationFieldRefs {
    readonly id: FieldRef<"ComplaintLocation", 'String'>
    readonly complaintId: FieldRef<"ComplaintLocation", 'String'>
    readonly pin: FieldRef<"ComplaintLocation", 'String'>
    readonly district: FieldRef<"ComplaintLocation", 'String'>
    readonly city: FieldRef<"ComplaintLocation", 'String'>
    readonly locality: FieldRef<"ComplaintLocation", 'String'>
    readonly street: FieldRef<"ComplaintLocation", 'String'>
    readonly latitude: FieldRef<"ComplaintLocation", 'Float'>
    readonly longitude: FieldRef<"ComplaintLocation", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * ComplaintLocation findUnique
   */
  export type ComplaintLocationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComplaintLocation
     */
    select?: ComplaintLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ComplaintLocation
     */
    omit?: ComplaintLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintLocationInclude<ExtArgs> | null
    /**
     * Filter, which ComplaintLocation to fetch.
     */
    where: ComplaintLocationWhereUniqueInput
  }

  /**
   * ComplaintLocation findUniqueOrThrow
   */
  export type ComplaintLocationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComplaintLocation
     */
    select?: ComplaintLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ComplaintLocation
     */
    omit?: ComplaintLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintLocationInclude<ExtArgs> | null
    /**
     * Filter, which ComplaintLocation to fetch.
     */
    where: ComplaintLocationWhereUniqueInput
  }

  /**
   * ComplaintLocation findFirst
   */
  export type ComplaintLocationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComplaintLocation
     */
    select?: ComplaintLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ComplaintLocation
     */
    omit?: ComplaintLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintLocationInclude<ExtArgs> | null
    /**
     * Filter, which ComplaintLocation to fetch.
     */
    where?: ComplaintLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ComplaintLocations to fetch.
     */
    orderBy?: ComplaintLocationOrderByWithRelationInput | ComplaintLocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ComplaintLocations.
     */
    cursor?: ComplaintLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ComplaintLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ComplaintLocations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ComplaintLocations.
     */
    distinct?: ComplaintLocationScalarFieldEnum | ComplaintLocationScalarFieldEnum[]
  }

  /**
   * ComplaintLocation findFirstOrThrow
   */
  export type ComplaintLocationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComplaintLocation
     */
    select?: ComplaintLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ComplaintLocation
     */
    omit?: ComplaintLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintLocationInclude<ExtArgs> | null
    /**
     * Filter, which ComplaintLocation to fetch.
     */
    where?: ComplaintLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ComplaintLocations to fetch.
     */
    orderBy?: ComplaintLocationOrderByWithRelationInput | ComplaintLocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ComplaintLocations.
     */
    cursor?: ComplaintLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ComplaintLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ComplaintLocations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ComplaintLocations.
     */
    distinct?: ComplaintLocationScalarFieldEnum | ComplaintLocationScalarFieldEnum[]
  }

  /**
   * ComplaintLocation findMany
   */
  export type ComplaintLocationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComplaintLocation
     */
    select?: ComplaintLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ComplaintLocation
     */
    omit?: ComplaintLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintLocationInclude<ExtArgs> | null
    /**
     * Filter, which ComplaintLocations to fetch.
     */
    where?: ComplaintLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ComplaintLocations to fetch.
     */
    orderBy?: ComplaintLocationOrderByWithRelationInput | ComplaintLocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ComplaintLocations.
     */
    cursor?: ComplaintLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ComplaintLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ComplaintLocations.
     */
    skip?: number
    distinct?: ComplaintLocationScalarFieldEnum | ComplaintLocationScalarFieldEnum[]
  }

  /**
   * ComplaintLocation create
   */
  export type ComplaintLocationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComplaintLocation
     */
    select?: ComplaintLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ComplaintLocation
     */
    omit?: ComplaintLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintLocationInclude<ExtArgs> | null
    /**
     * The data needed to create a ComplaintLocation.
     */
    data: XOR<ComplaintLocationCreateInput, ComplaintLocationUncheckedCreateInput>
  }

  /**
   * ComplaintLocation createMany
   */
  export type ComplaintLocationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ComplaintLocations.
     */
    data: ComplaintLocationCreateManyInput | ComplaintLocationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ComplaintLocation createManyAndReturn
   */
  export type ComplaintLocationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComplaintLocation
     */
    select?: ComplaintLocationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ComplaintLocation
     */
    omit?: ComplaintLocationOmit<ExtArgs> | null
    /**
     * The data used to create many ComplaintLocations.
     */
    data: ComplaintLocationCreateManyInput | ComplaintLocationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintLocationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ComplaintLocation update
   */
  export type ComplaintLocationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComplaintLocation
     */
    select?: ComplaintLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ComplaintLocation
     */
    omit?: ComplaintLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintLocationInclude<ExtArgs> | null
    /**
     * The data needed to update a ComplaintLocation.
     */
    data: XOR<ComplaintLocationUpdateInput, ComplaintLocationUncheckedUpdateInput>
    /**
     * Choose, which ComplaintLocation to update.
     */
    where: ComplaintLocationWhereUniqueInput
  }

  /**
   * ComplaintLocation updateMany
   */
  export type ComplaintLocationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ComplaintLocations.
     */
    data: XOR<ComplaintLocationUpdateManyMutationInput, ComplaintLocationUncheckedUpdateManyInput>
    /**
     * Filter which ComplaintLocations to update
     */
    where?: ComplaintLocationWhereInput
    /**
     * Limit how many ComplaintLocations to update.
     */
    limit?: number
  }

  /**
   * ComplaintLocation updateManyAndReturn
   */
  export type ComplaintLocationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComplaintLocation
     */
    select?: ComplaintLocationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ComplaintLocation
     */
    omit?: ComplaintLocationOmit<ExtArgs> | null
    /**
     * The data used to update ComplaintLocations.
     */
    data: XOR<ComplaintLocationUpdateManyMutationInput, ComplaintLocationUncheckedUpdateManyInput>
    /**
     * Filter which ComplaintLocations to update
     */
    where?: ComplaintLocationWhereInput
    /**
     * Limit how many ComplaintLocations to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintLocationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ComplaintLocation upsert
   */
  export type ComplaintLocationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComplaintLocation
     */
    select?: ComplaintLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ComplaintLocation
     */
    omit?: ComplaintLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintLocationInclude<ExtArgs> | null
    /**
     * The filter to search for the ComplaintLocation to update in case it exists.
     */
    where: ComplaintLocationWhereUniqueInput
    /**
     * In case the ComplaintLocation found by the `where` argument doesn't exist, create a new ComplaintLocation with this data.
     */
    create: XOR<ComplaintLocationCreateInput, ComplaintLocationUncheckedCreateInput>
    /**
     * In case the ComplaintLocation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ComplaintLocationUpdateInput, ComplaintLocationUncheckedUpdateInput>
  }

  /**
   * ComplaintLocation delete
   */
  export type ComplaintLocationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComplaintLocation
     */
    select?: ComplaintLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ComplaintLocation
     */
    omit?: ComplaintLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintLocationInclude<ExtArgs> | null
    /**
     * Filter which ComplaintLocation to delete.
     */
    where: ComplaintLocationWhereUniqueInput
  }

  /**
   * ComplaintLocation deleteMany
   */
  export type ComplaintLocationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ComplaintLocations to delete
     */
    where?: ComplaintLocationWhereInput
    /**
     * Limit how many ComplaintLocations to delete.
     */
    limit?: number
  }

  /**
   * ComplaintLocation without action
   */
  export type ComplaintLocationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComplaintLocation
     */
    select?: ComplaintLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ComplaintLocation
     */
    omit?: ComplaintLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintLocationInclude<ExtArgs> | null
  }


  /**
   * Model Upvote
   */

  export type AggregateUpvote = {
    _count: UpvoteCountAggregateOutputType | null
    _min: UpvoteMinAggregateOutputType | null
    _max: UpvoteMaxAggregateOutputType | null
  }

  export type UpvoteMinAggregateOutputType = {
    id: string | null
    userId: string | null
    complaintId: string | null
    timestamp: Date | null
  }

  export type UpvoteMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    complaintId: string | null
    timestamp: Date | null
  }

  export type UpvoteCountAggregateOutputType = {
    id: number
    userId: number
    complaintId: number
    timestamp: number
    _all: number
  }


  export type UpvoteMinAggregateInputType = {
    id?: true
    userId?: true
    complaintId?: true
    timestamp?: true
  }

  export type UpvoteMaxAggregateInputType = {
    id?: true
    userId?: true
    complaintId?: true
    timestamp?: true
  }

  export type UpvoteCountAggregateInputType = {
    id?: true
    userId?: true
    complaintId?: true
    timestamp?: true
    _all?: true
  }

  export type UpvoteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Upvote to aggregate.
     */
    where?: UpvoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Upvotes to fetch.
     */
    orderBy?: UpvoteOrderByWithRelationInput | UpvoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UpvoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Upvotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Upvotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Upvotes
    **/
    _count?: true | UpvoteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UpvoteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UpvoteMaxAggregateInputType
  }

  export type GetUpvoteAggregateType<T extends UpvoteAggregateArgs> = {
        [P in keyof T & keyof AggregateUpvote]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUpvote[P]>
      : GetScalarType<T[P], AggregateUpvote[P]>
  }




  export type UpvoteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UpvoteWhereInput
    orderBy?: UpvoteOrderByWithAggregationInput | UpvoteOrderByWithAggregationInput[]
    by: UpvoteScalarFieldEnum[] | UpvoteScalarFieldEnum
    having?: UpvoteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UpvoteCountAggregateInputType | true
    _min?: UpvoteMinAggregateInputType
    _max?: UpvoteMaxAggregateInputType
  }

  export type UpvoteGroupByOutputType = {
    id: string
    userId: string
    complaintId: string
    timestamp: Date
    _count: UpvoteCountAggregateOutputType | null
    _min: UpvoteMinAggregateOutputType | null
    _max: UpvoteMaxAggregateOutputType | null
  }

  type GetUpvoteGroupByPayload<T extends UpvoteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UpvoteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UpvoteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UpvoteGroupByOutputType[P]>
            : GetScalarType<T[P], UpvoteGroupByOutputType[P]>
        }
      >
    >


  export type UpvoteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    complaintId?: boolean
    timestamp?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    complaint?: boolean | ComplaintDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["upvote"]>

  export type UpvoteSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    complaintId?: boolean
    timestamp?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    complaint?: boolean | ComplaintDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["upvote"]>

  export type UpvoteSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    complaintId?: boolean
    timestamp?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    complaint?: boolean | ComplaintDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["upvote"]>

  export type UpvoteSelectScalar = {
    id?: boolean
    userId?: boolean
    complaintId?: boolean
    timestamp?: boolean
  }

  export type UpvoteOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "complaintId" | "timestamp", ExtArgs["result"]["upvote"]>
  export type UpvoteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    complaint?: boolean | ComplaintDefaultArgs<ExtArgs>
  }
  export type UpvoteIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    complaint?: boolean | ComplaintDefaultArgs<ExtArgs>
  }
  export type UpvoteIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    complaint?: boolean | ComplaintDefaultArgs<ExtArgs>
  }

  export type $UpvotePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Upvote"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      complaint: Prisma.$ComplaintPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      complaintId: string
      timestamp: Date
    }, ExtArgs["result"]["upvote"]>
    composites: {}
  }

  type UpvoteGetPayload<S extends boolean | null | undefined | UpvoteDefaultArgs> = $Result.GetResult<Prisma.$UpvotePayload, S>

  type UpvoteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UpvoteFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UpvoteCountAggregateInputType | true
    }

  export interface UpvoteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Upvote'], meta: { name: 'Upvote' } }
    /**
     * Find zero or one Upvote that matches the filter.
     * @param {UpvoteFindUniqueArgs} args - Arguments to find a Upvote
     * @example
     * // Get one Upvote
     * const upvote = await prisma.upvote.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UpvoteFindUniqueArgs>(args: SelectSubset<T, UpvoteFindUniqueArgs<ExtArgs>>): Prisma__UpvoteClient<$Result.GetResult<Prisma.$UpvotePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Upvote that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UpvoteFindUniqueOrThrowArgs} args - Arguments to find a Upvote
     * @example
     * // Get one Upvote
     * const upvote = await prisma.upvote.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UpvoteFindUniqueOrThrowArgs>(args: SelectSubset<T, UpvoteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UpvoteClient<$Result.GetResult<Prisma.$UpvotePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Upvote that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UpvoteFindFirstArgs} args - Arguments to find a Upvote
     * @example
     * // Get one Upvote
     * const upvote = await prisma.upvote.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UpvoteFindFirstArgs>(args?: SelectSubset<T, UpvoteFindFirstArgs<ExtArgs>>): Prisma__UpvoteClient<$Result.GetResult<Prisma.$UpvotePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Upvote that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UpvoteFindFirstOrThrowArgs} args - Arguments to find a Upvote
     * @example
     * // Get one Upvote
     * const upvote = await prisma.upvote.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UpvoteFindFirstOrThrowArgs>(args?: SelectSubset<T, UpvoteFindFirstOrThrowArgs<ExtArgs>>): Prisma__UpvoteClient<$Result.GetResult<Prisma.$UpvotePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Upvotes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UpvoteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Upvotes
     * const upvotes = await prisma.upvote.findMany()
     * 
     * // Get first 10 Upvotes
     * const upvotes = await prisma.upvote.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const upvoteWithIdOnly = await prisma.upvote.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UpvoteFindManyArgs>(args?: SelectSubset<T, UpvoteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UpvotePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Upvote.
     * @param {UpvoteCreateArgs} args - Arguments to create a Upvote.
     * @example
     * // Create one Upvote
     * const Upvote = await prisma.upvote.create({
     *   data: {
     *     // ... data to create a Upvote
     *   }
     * })
     * 
     */
    create<T extends UpvoteCreateArgs>(args: SelectSubset<T, UpvoteCreateArgs<ExtArgs>>): Prisma__UpvoteClient<$Result.GetResult<Prisma.$UpvotePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Upvotes.
     * @param {UpvoteCreateManyArgs} args - Arguments to create many Upvotes.
     * @example
     * // Create many Upvotes
     * const upvote = await prisma.upvote.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UpvoteCreateManyArgs>(args?: SelectSubset<T, UpvoteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Upvotes and returns the data saved in the database.
     * @param {UpvoteCreateManyAndReturnArgs} args - Arguments to create many Upvotes.
     * @example
     * // Create many Upvotes
     * const upvote = await prisma.upvote.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Upvotes and only return the `id`
     * const upvoteWithIdOnly = await prisma.upvote.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UpvoteCreateManyAndReturnArgs>(args?: SelectSubset<T, UpvoteCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UpvotePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Upvote.
     * @param {UpvoteDeleteArgs} args - Arguments to delete one Upvote.
     * @example
     * // Delete one Upvote
     * const Upvote = await prisma.upvote.delete({
     *   where: {
     *     // ... filter to delete one Upvote
     *   }
     * })
     * 
     */
    delete<T extends UpvoteDeleteArgs>(args: SelectSubset<T, UpvoteDeleteArgs<ExtArgs>>): Prisma__UpvoteClient<$Result.GetResult<Prisma.$UpvotePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Upvote.
     * @param {UpvoteUpdateArgs} args - Arguments to update one Upvote.
     * @example
     * // Update one Upvote
     * const upvote = await prisma.upvote.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UpvoteUpdateArgs>(args: SelectSubset<T, UpvoteUpdateArgs<ExtArgs>>): Prisma__UpvoteClient<$Result.GetResult<Prisma.$UpvotePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Upvotes.
     * @param {UpvoteDeleteManyArgs} args - Arguments to filter Upvotes to delete.
     * @example
     * // Delete a few Upvotes
     * const { count } = await prisma.upvote.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UpvoteDeleteManyArgs>(args?: SelectSubset<T, UpvoteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Upvotes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UpvoteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Upvotes
     * const upvote = await prisma.upvote.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UpvoteUpdateManyArgs>(args: SelectSubset<T, UpvoteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Upvotes and returns the data updated in the database.
     * @param {UpvoteUpdateManyAndReturnArgs} args - Arguments to update many Upvotes.
     * @example
     * // Update many Upvotes
     * const upvote = await prisma.upvote.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Upvotes and only return the `id`
     * const upvoteWithIdOnly = await prisma.upvote.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UpvoteUpdateManyAndReturnArgs>(args: SelectSubset<T, UpvoteUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UpvotePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Upvote.
     * @param {UpvoteUpsertArgs} args - Arguments to update or create a Upvote.
     * @example
     * // Update or create a Upvote
     * const upvote = await prisma.upvote.upsert({
     *   create: {
     *     // ... data to create a Upvote
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Upvote we want to update
     *   }
     * })
     */
    upsert<T extends UpvoteUpsertArgs>(args: SelectSubset<T, UpvoteUpsertArgs<ExtArgs>>): Prisma__UpvoteClient<$Result.GetResult<Prisma.$UpvotePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Upvotes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UpvoteCountArgs} args - Arguments to filter Upvotes to count.
     * @example
     * // Count the number of Upvotes
     * const count = await prisma.upvote.count({
     *   where: {
     *     // ... the filter for the Upvotes we want to count
     *   }
     * })
    **/
    count<T extends UpvoteCountArgs>(
      args?: Subset<T, UpvoteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UpvoteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Upvote.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UpvoteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UpvoteAggregateArgs>(args: Subset<T, UpvoteAggregateArgs>): Prisma.PrismaPromise<GetUpvoteAggregateType<T>>

    /**
     * Group by Upvote.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UpvoteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UpvoteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UpvoteGroupByArgs['orderBy'] }
        : { orderBy?: UpvoteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UpvoteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUpvoteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Upvote model
   */
  readonly fields: UpvoteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Upvote.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UpvoteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    complaint<T extends ComplaintDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ComplaintDefaultArgs<ExtArgs>>): Prisma__ComplaintClient<$Result.GetResult<Prisma.$ComplaintPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Upvote model
   */
  interface UpvoteFieldRefs {
    readonly id: FieldRef<"Upvote", 'String'>
    readonly userId: FieldRef<"Upvote", 'String'>
    readonly complaintId: FieldRef<"Upvote", 'String'>
    readonly timestamp: FieldRef<"Upvote", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Upvote findUnique
   */
  export type UpvoteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Upvote
     */
    select?: UpvoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Upvote
     */
    omit?: UpvoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UpvoteInclude<ExtArgs> | null
    /**
     * Filter, which Upvote to fetch.
     */
    where: UpvoteWhereUniqueInput
  }

  /**
   * Upvote findUniqueOrThrow
   */
  export type UpvoteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Upvote
     */
    select?: UpvoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Upvote
     */
    omit?: UpvoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UpvoteInclude<ExtArgs> | null
    /**
     * Filter, which Upvote to fetch.
     */
    where: UpvoteWhereUniqueInput
  }

  /**
   * Upvote findFirst
   */
  export type UpvoteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Upvote
     */
    select?: UpvoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Upvote
     */
    omit?: UpvoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UpvoteInclude<ExtArgs> | null
    /**
     * Filter, which Upvote to fetch.
     */
    where?: UpvoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Upvotes to fetch.
     */
    orderBy?: UpvoteOrderByWithRelationInput | UpvoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Upvotes.
     */
    cursor?: UpvoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Upvotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Upvotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Upvotes.
     */
    distinct?: UpvoteScalarFieldEnum | UpvoteScalarFieldEnum[]
  }

  /**
   * Upvote findFirstOrThrow
   */
  export type UpvoteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Upvote
     */
    select?: UpvoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Upvote
     */
    omit?: UpvoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UpvoteInclude<ExtArgs> | null
    /**
     * Filter, which Upvote to fetch.
     */
    where?: UpvoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Upvotes to fetch.
     */
    orderBy?: UpvoteOrderByWithRelationInput | UpvoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Upvotes.
     */
    cursor?: UpvoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Upvotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Upvotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Upvotes.
     */
    distinct?: UpvoteScalarFieldEnum | UpvoteScalarFieldEnum[]
  }

  /**
   * Upvote findMany
   */
  export type UpvoteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Upvote
     */
    select?: UpvoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Upvote
     */
    omit?: UpvoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UpvoteInclude<ExtArgs> | null
    /**
     * Filter, which Upvotes to fetch.
     */
    where?: UpvoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Upvotes to fetch.
     */
    orderBy?: UpvoteOrderByWithRelationInput | UpvoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Upvotes.
     */
    cursor?: UpvoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Upvotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Upvotes.
     */
    skip?: number
    distinct?: UpvoteScalarFieldEnum | UpvoteScalarFieldEnum[]
  }

  /**
   * Upvote create
   */
  export type UpvoteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Upvote
     */
    select?: UpvoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Upvote
     */
    omit?: UpvoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UpvoteInclude<ExtArgs> | null
    /**
     * The data needed to create a Upvote.
     */
    data: XOR<UpvoteCreateInput, UpvoteUncheckedCreateInput>
  }

  /**
   * Upvote createMany
   */
  export type UpvoteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Upvotes.
     */
    data: UpvoteCreateManyInput | UpvoteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Upvote createManyAndReturn
   */
  export type UpvoteCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Upvote
     */
    select?: UpvoteSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Upvote
     */
    omit?: UpvoteOmit<ExtArgs> | null
    /**
     * The data used to create many Upvotes.
     */
    data: UpvoteCreateManyInput | UpvoteCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UpvoteIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Upvote update
   */
  export type UpvoteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Upvote
     */
    select?: UpvoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Upvote
     */
    omit?: UpvoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UpvoteInclude<ExtArgs> | null
    /**
     * The data needed to update a Upvote.
     */
    data: XOR<UpvoteUpdateInput, UpvoteUncheckedUpdateInput>
    /**
     * Choose, which Upvote to update.
     */
    where: UpvoteWhereUniqueInput
  }

  /**
   * Upvote updateMany
   */
  export type UpvoteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Upvotes.
     */
    data: XOR<UpvoteUpdateManyMutationInput, UpvoteUncheckedUpdateManyInput>
    /**
     * Filter which Upvotes to update
     */
    where?: UpvoteWhereInput
    /**
     * Limit how many Upvotes to update.
     */
    limit?: number
  }

  /**
   * Upvote updateManyAndReturn
   */
  export type UpvoteUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Upvote
     */
    select?: UpvoteSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Upvote
     */
    omit?: UpvoteOmit<ExtArgs> | null
    /**
     * The data used to update Upvotes.
     */
    data: XOR<UpvoteUpdateManyMutationInput, UpvoteUncheckedUpdateManyInput>
    /**
     * Filter which Upvotes to update
     */
    where?: UpvoteWhereInput
    /**
     * Limit how many Upvotes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UpvoteIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Upvote upsert
   */
  export type UpvoteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Upvote
     */
    select?: UpvoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Upvote
     */
    omit?: UpvoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UpvoteInclude<ExtArgs> | null
    /**
     * The filter to search for the Upvote to update in case it exists.
     */
    where: UpvoteWhereUniqueInput
    /**
     * In case the Upvote found by the `where` argument doesn't exist, create a new Upvote with this data.
     */
    create: XOR<UpvoteCreateInput, UpvoteUncheckedCreateInput>
    /**
     * In case the Upvote was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UpvoteUpdateInput, UpvoteUncheckedUpdateInput>
  }

  /**
   * Upvote delete
   */
  export type UpvoteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Upvote
     */
    select?: UpvoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Upvote
     */
    omit?: UpvoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UpvoteInclude<ExtArgs> | null
    /**
     * Filter which Upvote to delete.
     */
    where: UpvoteWhereUniqueInput
  }

  /**
   * Upvote deleteMany
   */
  export type UpvoteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Upvotes to delete
     */
    where?: UpvoteWhereInput
    /**
     * Limit how many Upvotes to delete.
     */
    limit?: number
  }

  /**
   * Upvote without action
   */
  export type UpvoteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Upvote
     */
    select?: UpvoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Upvote
     */
    omit?: UpvoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UpvoteInclude<ExtArgs> | null
  }


  /**
   * Model NewsUpdate
   */

  export type AggregateNewsUpdate = {
    _count: NewsUpdateCountAggregateOutputType | null
    _min: NewsUpdateMinAggregateOutputType | null
    _max: NewsUpdateMaxAggregateOutputType | null
  }

  export type NewsUpdateMinAggregateOutputType = {
    id: string | null
    title: string | null
    content: string | null
    date: Date | null
    createdById: string | null
  }

  export type NewsUpdateMaxAggregateOutputType = {
    id: string | null
    title: string | null
    content: string | null
    date: Date | null
    createdById: string | null
  }

  export type NewsUpdateCountAggregateOutputType = {
    id: number
    title: number
    content: number
    date: number
    createdById: number
    _all: number
  }


  export type NewsUpdateMinAggregateInputType = {
    id?: true
    title?: true
    content?: true
    date?: true
    createdById?: true
  }

  export type NewsUpdateMaxAggregateInputType = {
    id?: true
    title?: true
    content?: true
    date?: true
    createdById?: true
  }

  export type NewsUpdateCountAggregateInputType = {
    id?: true
    title?: true
    content?: true
    date?: true
    createdById?: true
    _all?: true
  }

  export type NewsUpdateAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NewsUpdate to aggregate.
     */
    where?: NewsUpdateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NewsUpdates to fetch.
     */
    orderBy?: NewsUpdateOrderByWithRelationInput | NewsUpdateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NewsUpdateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NewsUpdates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NewsUpdates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned NewsUpdates
    **/
    _count?: true | NewsUpdateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NewsUpdateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NewsUpdateMaxAggregateInputType
  }

  export type GetNewsUpdateAggregateType<T extends NewsUpdateAggregateArgs> = {
        [P in keyof T & keyof AggregateNewsUpdate]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNewsUpdate[P]>
      : GetScalarType<T[P], AggregateNewsUpdate[P]>
  }




  export type NewsUpdateGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NewsUpdateWhereInput
    orderBy?: NewsUpdateOrderByWithAggregationInput | NewsUpdateOrderByWithAggregationInput[]
    by: NewsUpdateScalarFieldEnum[] | NewsUpdateScalarFieldEnum
    having?: NewsUpdateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NewsUpdateCountAggregateInputType | true
    _min?: NewsUpdateMinAggregateInputType
    _max?: NewsUpdateMaxAggregateInputType
  }

  export type NewsUpdateGroupByOutputType = {
    id: string
    title: string
    content: string
    date: Date
    createdById: string
    _count: NewsUpdateCountAggregateOutputType | null
    _min: NewsUpdateMinAggregateOutputType | null
    _max: NewsUpdateMaxAggregateOutputType | null
  }

  type GetNewsUpdateGroupByPayload<T extends NewsUpdateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NewsUpdateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NewsUpdateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NewsUpdateGroupByOutputType[P]>
            : GetScalarType<T[P], NewsUpdateGroupByOutputType[P]>
        }
      >
    >


  export type NewsUpdateSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    content?: boolean
    date?: boolean
    createdById?: boolean
    createdBy?: boolean | DepartmentMunicipalAdminDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["newsUpdate"]>

  export type NewsUpdateSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    content?: boolean
    date?: boolean
    createdById?: boolean
    createdBy?: boolean | DepartmentMunicipalAdminDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["newsUpdate"]>

  export type NewsUpdateSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    content?: boolean
    date?: boolean
    createdById?: boolean
    createdBy?: boolean | DepartmentMunicipalAdminDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["newsUpdate"]>

  export type NewsUpdateSelectScalar = {
    id?: boolean
    title?: boolean
    content?: boolean
    date?: boolean
    createdById?: boolean
  }

  export type NewsUpdateOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "content" | "date" | "createdById", ExtArgs["result"]["newsUpdate"]>
  export type NewsUpdateInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | DepartmentMunicipalAdminDefaultArgs<ExtArgs>
  }
  export type NewsUpdateIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | DepartmentMunicipalAdminDefaultArgs<ExtArgs>
  }
  export type NewsUpdateIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | DepartmentMunicipalAdminDefaultArgs<ExtArgs>
  }

  export type $NewsUpdatePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "NewsUpdate"
    objects: {
      createdBy: Prisma.$DepartmentMunicipalAdminPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      content: string
      date: Date
      createdById: string
    }, ExtArgs["result"]["newsUpdate"]>
    composites: {}
  }

  type NewsUpdateGetPayload<S extends boolean | null | undefined | NewsUpdateDefaultArgs> = $Result.GetResult<Prisma.$NewsUpdatePayload, S>

  type NewsUpdateCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NewsUpdateFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NewsUpdateCountAggregateInputType | true
    }

  export interface NewsUpdateDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['NewsUpdate'], meta: { name: 'NewsUpdate' } }
    /**
     * Find zero or one NewsUpdate that matches the filter.
     * @param {NewsUpdateFindUniqueArgs} args - Arguments to find a NewsUpdate
     * @example
     * // Get one NewsUpdate
     * const newsUpdate = await prisma.newsUpdate.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NewsUpdateFindUniqueArgs>(args: SelectSubset<T, NewsUpdateFindUniqueArgs<ExtArgs>>): Prisma__NewsUpdateClient<$Result.GetResult<Prisma.$NewsUpdatePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one NewsUpdate that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NewsUpdateFindUniqueOrThrowArgs} args - Arguments to find a NewsUpdate
     * @example
     * // Get one NewsUpdate
     * const newsUpdate = await prisma.newsUpdate.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NewsUpdateFindUniqueOrThrowArgs>(args: SelectSubset<T, NewsUpdateFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NewsUpdateClient<$Result.GetResult<Prisma.$NewsUpdatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first NewsUpdate that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsUpdateFindFirstArgs} args - Arguments to find a NewsUpdate
     * @example
     * // Get one NewsUpdate
     * const newsUpdate = await prisma.newsUpdate.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NewsUpdateFindFirstArgs>(args?: SelectSubset<T, NewsUpdateFindFirstArgs<ExtArgs>>): Prisma__NewsUpdateClient<$Result.GetResult<Prisma.$NewsUpdatePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first NewsUpdate that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsUpdateFindFirstOrThrowArgs} args - Arguments to find a NewsUpdate
     * @example
     * // Get one NewsUpdate
     * const newsUpdate = await prisma.newsUpdate.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NewsUpdateFindFirstOrThrowArgs>(args?: SelectSubset<T, NewsUpdateFindFirstOrThrowArgs<ExtArgs>>): Prisma__NewsUpdateClient<$Result.GetResult<Prisma.$NewsUpdatePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more NewsUpdates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsUpdateFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all NewsUpdates
     * const newsUpdates = await prisma.newsUpdate.findMany()
     * 
     * // Get first 10 NewsUpdates
     * const newsUpdates = await prisma.newsUpdate.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const newsUpdateWithIdOnly = await prisma.newsUpdate.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NewsUpdateFindManyArgs>(args?: SelectSubset<T, NewsUpdateFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NewsUpdatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a NewsUpdate.
     * @param {NewsUpdateCreateArgs} args - Arguments to create a NewsUpdate.
     * @example
     * // Create one NewsUpdate
     * const NewsUpdate = await prisma.newsUpdate.create({
     *   data: {
     *     // ... data to create a NewsUpdate
     *   }
     * })
     * 
     */
    create<T extends NewsUpdateCreateArgs>(args: SelectSubset<T, NewsUpdateCreateArgs<ExtArgs>>): Prisma__NewsUpdateClient<$Result.GetResult<Prisma.$NewsUpdatePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many NewsUpdates.
     * @param {NewsUpdateCreateManyArgs} args - Arguments to create many NewsUpdates.
     * @example
     * // Create many NewsUpdates
     * const newsUpdate = await prisma.newsUpdate.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NewsUpdateCreateManyArgs>(args?: SelectSubset<T, NewsUpdateCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many NewsUpdates and returns the data saved in the database.
     * @param {NewsUpdateCreateManyAndReturnArgs} args - Arguments to create many NewsUpdates.
     * @example
     * // Create many NewsUpdates
     * const newsUpdate = await prisma.newsUpdate.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many NewsUpdates and only return the `id`
     * const newsUpdateWithIdOnly = await prisma.newsUpdate.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NewsUpdateCreateManyAndReturnArgs>(args?: SelectSubset<T, NewsUpdateCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NewsUpdatePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a NewsUpdate.
     * @param {NewsUpdateDeleteArgs} args - Arguments to delete one NewsUpdate.
     * @example
     * // Delete one NewsUpdate
     * const NewsUpdate = await prisma.newsUpdate.delete({
     *   where: {
     *     // ... filter to delete one NewsUpdate
     *   }
     * })
     * 
     */
    delete<T extends NewsUpdateDeleteArgs>(args: SelectSubset<T, NewsUpdateDeleteArgs<ExtArgs>>): Prisma__NewsUpdateClient<$Result.GetResult<Prisma.$NewsUpdatePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one NewsUpdate.
     * @param {NewsUpdateUpdateArgs} args - Arguments to update one NewsUpdate.
     * @example
     * // Update one NewsUpdate
     * const newsUpdate = await prisma.newsUpdate.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NewsUpdateUpdateArgs>(args: SelectSubset<T, NewsUpdateUpdateArgs<ExtArgs>>): Prisma__NewsUpdateClient<$Result.GetResult<Prisma.$NewsUpdatePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more NewsUpdates.
     * @param {NewsUpdateDeleteManyArgs} args - Arguments to filter NewsUpdates to delete.
     * @example
     * // Delete a few NewsUpdates
     * const { count } = await prisma.newsUpdate.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NewsUpdateDeleteManyArgs>(args?: SelectSubset<T, NewsUpdateDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NewsUpdates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsUpdateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many NewsUpdates
     * const newsUpdate = await prisma.newsUpdate.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NewsUpdateUpdateManyArgs>(args: SelectSubset<T, NewsUpdateUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NewsUpdates and returns the data updated in the database.
     * @param {NewsUpdateUpdateManyAndReturnArgs} args - Arguments to update many NewsUpdates.
     * @example
     * // Update many NewsUpdates
     * const newsUpdate = await prisma.newsUpdate.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more NewsUpdates and only return the `id`
     * const newsUpdateWithIdOnly = await prisma.newsUpdate.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends NewsUpdateUpdateManyAndReturnArgs>(args: SelectSubset<T, NewsUpdateUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NewsUpdatePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one NewsUpdate.
     * @param {NewsUpdateUpsertArgs} args - Arguments to update or create a NewsUpdate.
     * @example
     * // Update or create a NewsUpdate
     * const newsUpdate = await prisma.newsUpdate.upsert({
     *   create: {
     *     // ... data to create a NewsUpdate
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the NewsUpdate we want to update
     *   }
     * })
     */
    upsert<T extends NewsUpdateUpsertArgs>(args: SelectSubset<T, NewsUpdateUpsertArgs<ExtArgs>>): Prisma__NewsUpdateClient<$Result.GetResult<Prisma.$NewsUpdatePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of NewsUpdates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsUpdateCountArgs} args - Arguments to filter NewsUpdates to count.
     * @example
     * // Count the number of NewsUpdates
     * const count = await prisma.newsUpdate.count({
     *   where: {
     *     // ... the filter for the NewsUpdates we want to count
     *   }
     * })
    **/
    count<T extends NewsUpdateCountArgs>(
      args?: Subset<T, NewsUpdateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NewsUpdateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a NewsUpdate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsUpdateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NewsUpdateAggregateArgs>(args: Subset<T, NewsUpdateAggregateArgs>): Prisma.PrismaPromise<GetNewsUpdateAggregateType<T>>

    /**
     * Group by NewsUpdate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsUpdateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NewsUpdateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NewsUpdateGroupByArgs['orderBy'] }
        : { orderBy?: NewsUpdateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NewsUpdateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNewsUpdateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the NewsUpdate model
   */
  readonly fields: NewsUpdateFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for NewsUpdate.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NewsUpdateClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    createdBy<T extends DepartmentMunicipalAdminDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DepartmentMunicipalAdminDefaultArgs<ExtArgs>>): Prisma__DepartmentMunicipalAdminClient<$Result.GetResult<Prisma.$DepartmentMunicipalAdminPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the NewsUpdate model
   */
  interface NewsUpdateFieldRefs {
    readonly id: FieldRef<"NewsUpdate", 'String'>
    readonly title: FieldRef<"NewsUpdate", 'String'>
    readonly content: FieldRef<"NewsUpdate", 'String'>
    readonly date: FieldRef<"NewsUpdate", 'DateTime'>
    readonly createdById: FieldRef<"NewsUpdate", 'String'>
  }
    

  // Custom InputTypes
  /**
   * NewsUpdate findUnique
   */
  export type NewsUpdateFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewsUpdate
     */
    select?: NewsUpdateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NewsUpdate
     */
    omit?: NewsUpdateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NewsUpdateInclude<ExtArgs> | null
    /**
     * Filter, which NewsUpdate to fetch.
     */
    where: NewsUpdateWhereUniqueInput
  }

  /**
   * NewsUpdate findUniqueOrThrow
   */
  export type NewsUpdateFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewsUpdate
     */
    select?: NewsUpdateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NewsUpdate
     */
    omit?: NewsUpdateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NewsUpdateInclude<ExtArgs> | null
    /**
     * Filter, which NewsUpdate to fetch.
     */
    where: NewsUpdateWhereUniqueInput
  }

  /**
   * NewsUpdate findFirst
   */
  export type NewsUpdateFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewsUpdate
     */
    select?: NewsUpdateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NewsUpdate
     */
    omit?: NewsUpdateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NewsUpdateInclude<ExtArgs> | null
    /**
     * Filter, which NewsUpdate to fetch.
     */
    where?: NewsUpdateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NewsUpdates to fetch.
     */
    orderBy?: NewsUpdateOrderByWithRelationInput | NewsUpdateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NewsUpdates.
     */
    cursor?: NewsUpdateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NewsUpdates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NewsUpdates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NewsUpdates.
     */
    distinct?: NewsUpdateScalarFieldEnum | NewsUpdateScalarFieldEnum[]
  }

  /**
   * NewsUpdate findFirstOrThrow
   */
  export type NewsUpdateFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewsUpdate
     */
    select?: NewsUpdateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NewsUpdate
     */
    omit?: NewsUpdateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NewsUpdateInclude<ExtArgs> | null
    /**
     * Filter, which NewsUpdate to fetch.
     */
    where?: NewsUpdateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NewsUpdates to fetch.
     */
    orderBy?: NewsUpdateOrderByWithRelationInput | NewsUpdateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NewsUpdates.
     */
    cursor?: NewsUpdateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NewsUpdates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NewsUpdates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NewsUpdates.
     */
    distinct?: NewsUpdateScalarFieldEnum | NewsUpdateScalarFieldEnum[]
  }

  /**
   * NewsUpdate findMany
   */
  export type NewsUpdateFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewsUpdate
     */
    select?: NewsUpdateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NewsUpdate
     */
    omit?: NewsUpdateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NewsUpdateInclude<ExtArgs> | null
    /**
     * Filter, which NewsUpdates to fetch.
     */
    where?: NewsUpdateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NewsUpdates to fetch.
     */
    orderBy?: NewsUpdateOrderByWithRelationInput | NewsUpdateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing NewsUpdates.
     */
    cursor?: NewsUpdateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NewsUpdates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NewsUpdates.
     */
    skip?: number
    distinct?: NewsUpdateScalarFieldEnum | NewsUpdateScalarFieldEnum[]
  }

  /**
   * NewsUpdate create
   */
  export type NewsUpdateCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewsUpdate
     */
    select?: NewsUpdateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NewsUpdate
     */
    omit?: NewsUpdateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NewsUpdateInclude<ExtArgs> | null
    /**
     * The data needed to create a NewsUpdate.
     */
    data: XOR<NewsUpdateCreateInput, NewsUpdateUncheckedCreateInput>
  }

  /**
   * NewsUpdate createMany
   */
  export type NewsUpdateCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many NewsUpdates.
     */
    data: NewsUpdateCreateManyInput | NewsUpdateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * NewsUpdate createManyAndReturn
   */
  export type NewsUpdateCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewsUpdate
     */
    select?: NewsUpdateSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the NewsUpdate
     */
    omit?: NewsUpdateOmit<ExtArgs> | null
    /**
     * The data used to create many NewsUpdates.
     */
    data: NewsUpdateCreateManyInput | NewsUpdateCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NewsUpdateIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * NewsUpdate update
   */
  export type NewsUpdateUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewsUpdate
     */
    select?: NewsUpdateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NewsUpdate
     */
    omit?: NewsUpdateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NewsUpdateInclude<ExtArgs> | null
    /**
     * The data needed to update a NewsUpdate.
     */
    data: XOR<NewsUpdateUpdateInput, NewsUpdateUncheckedUpdateInput>
    /**
     * Choose, which NewsUpdate to update.
     */
    where: NewsUpdateWhereUniqueInput
  }

  /**
   * NewsUpdate updateMany
   */
  export type NewsUpdateUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update NewsUpdates.
     */
    data: XOR<NewsUpdateUpdateManyMutationInput, NewsUpdateUncheckedUpdateManyInput>
    /**
     * Filter which NewsUpdates to update
     */
    where?: NewsUpdateWhereInput
    /**
     * Limit how many NewsUpdates to update.
     */
    limit?: number
  }

  /**
   * NewsUpdate updateManyAndReturn
   */
  export type NewsUpdateUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewsUpdate
     */
    select?: NewsUpdateSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the NewsUpdate
     */
    omit?: NewsUpdateOmit<ExtArgs> | null
    /**
     * The data used to update NewsUpdates.
     */
    data: XOR<NewsUpdateUpdateManyMutationInput, NewsUpdateUncheckedUpdateManyInput>
    /**
     * Filter which NewsUpdates to update
     */
    where?: NewsUpdateWhereInput
    /**
     * Limit how many NewsUpdates to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NewsUpdateIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * NewsUpdate upsert
   */
  export type NewsUpdateUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewsUpdate
     */
    select?: NewsUpdateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NewsUpdate
     */
    omit?: NewsUpdateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NewsUpdateInclude<ExtArgs> | null
    /**
     * The filter to search for the NewsUpdate to update in case it exists.
     */
    where: NewsUpdateWhereUniqueInput
    /**
     * In case the NewsUpdate found by the `where` argument doesn't exist, create a new NewsUpdate with this data.
     */
    create: XOR<NewsUpdateCreateInput, NewsUpdateUncheckedCreateInput>
    /**
     * In case the NewsUpdate was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NewsUpdateUpdateInput, NewsUpdateUncheckedUpdateInput>
  }

  /**
   * NewsUpdate delete
   */
  export type NewsUpdateDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewsUpdate
     */
    select?: NewsUpdateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NewsUpdate
     */
    omit?: NewsUpdateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NewsUpdateInclude<ExtArgs> | null
    /**
     * Filter which NewsUpdate to delete.
     */
    where: NewsUpdateWhereUniqueInput
  }

  /**
   * NewsUpdate deleteMany
   */
  export type NewsUpdateDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NewsUpdates to delete
     */
    where?: NewsUpdateWhereInput
    /**
     * Limit how many NewsUpdates to delete.
     */
    limit?: number
  }

  /**
   * NewsUpdate without action
   */
  export type NewsUpdateDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewsUpdate
     */
    select?: NewsUpdateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NewsUpdate
     */
    omit?: NewsUpdateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NewsUpdateInclude<ExtArgs> | null
  }


  /**
   * Model AuditLog
   */

  export type AggregateAuditLog = {
    _count: AuditLogCountAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  export type AuditLogMinAggregateOutputType = {
    id: string | null
    action: string | null
    userId: string | null
    complaintId: string | null
    timestamp: Date | null
    details: string | null
  }

  export type AuditLogMaxAggregateOutputType = {
    id: string | null
    action: string | null
    userId: string | null
    complaintId: string | null
    timestamp: Date | null
    details: string | null
  }

  export type AuditLogCountAggregateOutputType = {
    id: number
    action: number
    userId: number
    complaintId: number
    timestamp: number
    details: number
    _all: number
  }


  export type AuditLogMinAggregateInputType = {
    id?: true
    action?: true
    userId?: true
    complaintId?: true
    timestamp?: true
    details?: true
  }

  export type AuditLogMaxAggregateInputType = {
    id?: true
    action?: true
    userId?: true
    complaintId?: true
    timestamp?: true
    details?: true
  }

  export type AuditLogCountAggregateInputType = {
    id?: true
    action?: true
    userId?: true
    complaintId?: true
    timestamp?: true
    details?: true
    _all?: true
  }

  export type AuditLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLog to aggregate.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AuditLogs
    **/
    _count?: true | AuditLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuditLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuditLogMaxAggregateInputType
  }

  export type GetAuditLogAggregateType<T extends AuditLogAggregateArgs> = {
        [P in keyof T & keyof AggregateAuditLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuditLog[P]>
      : GetScalarType<T[P], AggregateAuditLog[P]>
  }




  export type AuditLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithAggregationInput | AuditLogOrderByWithAggregationInput[]
    by: AuditLogScalarFieldEnum[] | AuditLogScalarFieldEnum
    having?: AuditLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuditLogCountAggregateInputType | true
    _min?: AuditLogMinAggregateInputType
    _max?: AuditLogMaxAggregateInputType
  }

  export type AuditLogGroupByOutputType = {
    id: string
    action: string
    userId: string
    complaintId: string | null
    timestamp: Date
    details: string | null
    _count: AuditLogCountAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  type GetAuditLogGroupByPayload<T extends AuditLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AuditLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuditLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
            : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
        }
      >
    >


  export type AuditLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    action?: boolean
    userId?: boolean
    complaintId?: boolean
    timestamp?: boolean
    details?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    complaint?: boolean | AuditLog$complaintArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    action?: boolean
    userId?: boolean
    complaintId?: boolean
    timestamp?: boolean
    details?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    complaint?: boolean | AuditLog$complaintArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    action?: boolean
    userId?: boolean
    complaintId?: boolean
    timestamp?: boolean
    details?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    complaint?: boolean | AuditLog$complaintArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectScalar = {
    id?: boolean
    action?: boolean
    userId?: boolean
    complaintId?: boolean
    timestamp?: boolean
    details?: boolean
  }

  export type AuditLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "action" | "userId" | "complaintId" | "timestamp" | "details", ExtArgs["result"]["auditLog"]>
  export type AuditLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    complaint?: boolean | AuditLog$complaintArgs<ExtArgs>
  }
  export type AuditLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    complaint?: boolean | AuditLog$complaintArgs<ExtArgs>
  }
  export type AuditLogIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    complaint?: boolean | AuditLog$complaintArgs<ExtArgs>
  }

  export type $AuditLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AuditLog"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      complaint: Prisma.$ComplaintPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      action: string
      userId: string
      complaintId: string | null
      timestamp: Date
      details: string | null
    }, ExtArgs["result"]["auditLog"]>
    composites: {}
  }

  type AuditLogGetPayload<S extends boolean | null | undefined | AuditLogDefaultArgs> = $Result.GetResult<Prisma.$AuditLogPayload, S>

  type AuditLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AuditLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AuditLogCountAggregateInputType | true
    }

  export interface AuditLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AuditLog'], meta: { name: 'AuditLog' } }
    /**
     * Find zero or one AuditLog that matches the filter.
     * @param {AuditLogFindUniqueArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AuditLogFindUniqueArgs>(args: SelectSubset<T, AuditLogFindUniqueArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AuditLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AuditLogFindUniqueOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AuditLogFindUniqueOrThrowArgs>(args: SelectSubset<T, AuditLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AuditLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AuditLogFindFirstArgs>(args?: SelectSubset<T, AuditLogFindFirstArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AuditLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AuditLogFindFirstOrThrowArgs>(args?: SelectSubset<T, AuditLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AuditLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AuditLogs
     * const auditLogs = await prisma.auditLog.findMany()
     * 
     * // Get first 10 AuditLogs
     * const auditLogs = await prisma.auditLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AuditLogFindManyArgs>(args?: SelectSubset<T, AuditLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AuditLog.
     * @param {AuditLogCreateArgs} args - Arguments to create a AuditLog.
     * @example
     * // Create one AuditLog
     * const AuditLog = await prisma.auditLog.create({
     *   data: {
     *     // ... data to create a AuditLog
     *   }
     * })
     * 
     */
    create<T extends AuditLogCreateArgs>(args: SelectSubset<T, AuditLogCreateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AuditLogs.
     * @param {AuditLogCreateManyArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AuditLogCreateManyArgs>(args?: SelectSubset<T, AuditLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AuditLogs and returns the data saved in the database.
     * @param {AuditLogCreateManyAndReturnArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AuditLogs and only return the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AuditLogCreateManyAndReturnArgs>(args?: SelectSubset<T, AuditLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AuditLog.
     * @param {AuditLogDeleteArgs} args - Arguments to delete one AuditLog.
     * @example
     * // Delete one AuditLog
     * const AuditLog = await prisma.auditLog.delete({
     *   where: {
     *     // ... filter to delete one AuditLog
     *   }
     * })
     * 
     */
    delete<T extends AuditLogDeleteArgs>(args: SelectSubset<T, AuditLogDeleteArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AuditLog.
     * @param {AuditLogUpdateArgs} args - Arguments to update one AuditLog.
     * @example
     * // Update one AuditLog
     * const auditLog = await prisma.auditLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AuditLogUpdateArgs>(args: SelectSubset<T, AuditLogUpdateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AuditLogs.
     * @param {AuditLogDeleteManyArgs} args - Arguments to filter AuditLogs to delete.
     * @example
     * // Delete a few AuditLogs
     * const { count } = await prisma.auditLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AuditLogDeleteManyArgs>(args?: SelectSubset<T, AuditLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AuditLogs
     * const auditLog = await prisma.auditLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AuditLogUpdateManyArgs>(args: SelectSubset<T, AuditLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuditLogs and returns the data updated in the database.
     * @param {AuditLogUpdateManyAndReturnArgs} args - Arguments to update many AuditLogs.
     * @example
     * // Update many AuditLogs
     * const auditLog = await prisma.auditLog.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AuditLogs and only return the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AuditLogUpdateManyAndReturnArgs>(args: SelectSubset<T, AuditLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AuditLog.
     * @param {AuditLogUpsertArgs} args - Arguments to update or create a AuditLog.
     * @example
     * // Update or create a AuditLog
     * const auditLog = await prisma.auditLog.upsert({
     *   create: {
     *     // ... data to create a AuditLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AuditLog we want to update
     *   }
     * })
     */
    upsert<T extends AuditLogUpsertArgs>(args: SelectSubset<T, AuditLogUpsertArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogCountArgs} args - Arguments to filter AuditLogs to count.
     * @example
     * // Count the number of AuditLogs
     * const count = await prisma.auditLog.count({
     *   where: {
     *     // ... the filter for the AuditLogs we want to count
     *   }
     * })
    **/
    count<T extends AuditLogCountArgs>(
      args?: Subset<T, AuditLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuditLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuditLogAggregateArgs>(args: Subset<T, AuditLogAggregateArgs>): Prisma.PrismaPromise<GetAuditLogAggregateType<T>>

    /**
     * Group by AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuditLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuditLogGroupByArgs['orderBy'] }
        : { orderBy?: AuditLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuditLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuditLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AuditLog model
   */
  readonly fields: AuditLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AuditLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AuditLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    complaint<T extends AuditLog$complaintArgs<ExtArgs> = {}>(args?: Subset<T, AuditLog$complaintArgs<ExtArgs>>): Prisma__ComplaintClient<$Result.GetResult<Prisma.$ComplaintPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AuditLog model
   */
  interface AuditLogFieldRefs {
    readonly id: FieldRef<"AuditLog", 'String'>
    readonly action: FieldRef<"AuditLog", 'String'>
    readonly userId: FieldRef<"AuditLog", 'String'>
    readonly complaintId: FieldRef<"AuditLog", 'String'>
    readonly timestamp: FieldRef<"AuditLog", 'DateTime'>
    readonly details: FieldRef<"AuditLog", 'String'>
  }
    

  // Custom InputTypes
  /**
   * AuditLog findUnique
   */
  export type AuditLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findUniqueOrThrow
   */
  export type AuditLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findFirst
   */
  export type AuditLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findFirstOrThrow
   */
  export type AuditLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findMany
   */
  export type AuditLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLogs to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog create
   */
  export type AuditLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The data needed to create a AuditLog.
     */
    data: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
  }

  /**
   * AuditLog createMany
   */
  export type AuditLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AuditLog createManyAndReturn
   */
  export type AuditLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AuditLog update
   */
  export type AuditLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The data needed to update a AuditLog.
     */
    data: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
    /**
     * Choose, which AuditLog to update.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog updateMany
   */
  export type AuditLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AuditLogs.
     */
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyInput>
    /**
     * Filter which AuditLogs to update
     */
    where?: AuditLogWhereInput
    /**
     * Limit how many AuditLogs to update.
     */
    limit?: number
  }

  /**
   * AuditLog updateManyAndReturn
   */
  export type AuditLogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * The data used to update AuditLogs.
     */
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyInput>
    /**
     * Filter which AuditLogs to update
     */
    where?: AuditLogWhereInput
    /**
     * Limit how many AuditLogs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AuditLog upsert
   */
  export type AuditLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The filter to search for the AuditLog to update in case it exists.
     */
    where: AuditLogWhereUniqueInput
    /**
     * In case the AuditLog found by the `where` argument doesn't exist, create a new AuditLog with this data.
     */
    create: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
    /**
     * In case the AuditLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
  }

  /**
   * AuditLog delete
   */
  export type AuditLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter which AuditLog to delete.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog deleteMany
   */
  export type AuditLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLogs to delete
     */
    where?: AuditLogWhereInput
    /**
     * Limit how many AuditLogs to delete.
     */
    limit?: number
  }

  /**
   * AuditLog.complaint
   */
  export type AuditLog$complaintArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Complaint
     */
    select?: ComplaintSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Complaint
     */
    omit?: ComplaintOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintInclude<ExtArgs> | null
    where?: ComplaintWhereInput
  }

  /**
   * AuditLog without action
   */
  export type AuditLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
  }


  /**
   * Model RegionalWorkflow
   */

  export type AggregateRegionalWorkflow = {
    _count: RegionalWorkflowCountAggregateOutputType | null
    _min: RegionalWorkflowMinAggregateOutputType | null
    _max: RegionalWorkflowMaxAggregateOutputType | null
  }

  export type RegionalWorkflowMinAggregateOutputType = {
    id: string | null
    state: string | null
    municipality: string | null
    category: string | null
    sla: string | null
    createdById: string | null
  }

  export type RegionalWorkflowMaxAggregateOutputType = {
    id: string | null
    state: string | null
    municipality: string | null
    category: string | null
    sla: string | null
    createdById: string | null
  }

  export type RegionalWorkflowCountAggregateOutputType = {
    id: number
    state: number
    municipality: number
    category: number
    sla: number
    createdById: number
    _all: number
  }


  export type RegionalWorkflowMinAggregateInputType = {
    id?: true
    state?: true
    municipality?: true
    category?: true
    sla?: true
    createdById?: true
  }

  export type RegionalWorkflowMaxAggregateInputType = {
    id?: true
    state?: true
    municipality?: true
    category?: true
    sla?: true
    createdById?: true
  }

  export type RegionalWorkflowCountAggregateInputType = {
    id?: true
    state?: true
    municipality?: true
    category?: true
    sla?: true
    createdById?: true
    _all?: true
  }

  export type RegionalWorkflowAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RegionalWorkflow to aggregate.
     */
    where?: RegionalWorkflowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RegionalWorkflows to fetch.
     */
    orderBy?: RegionalWorkflowOrderByWithRelationInput | RegionalWorkflowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RegionalWorkflowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RegionalWorkflows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RegionalWorkflows.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RegionalWorkflows
    **/
    _count?: true | RegionalWorkflowCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RegionalWorkflowMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RegionalWorkflowMaxAggregateInputType
  }

  export type GetRegionalWorkflowAggregateType<T extends RegionalWorkflowAggregateArgs> = {
        [P in keyof T & keyof AggregateRegionalWorkflow]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRegionalWorkflow[P]>
      : GetScalarType<T[P], AggregateRegionalWorkflow[P]>
  }




  export type RegionalWorkflowGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RegionalWorkflowWhereInput
    orderBy?: RegionalWorkflowOrderByWithAggregationInput | RegionalWorkflowOrderByWithAggregationInput[]
    by: RegionalWorkflowScalarFieldEnum[] | RegionalWorkflowScalarFieldEnum
    having?: RegionalWorkflowScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RegionalWorkflowCountAggregateInputType | true
    _min?: RegionalWorkflowMinAggregateInputType
    _max?: RegionalWorkflowMaxAggregateInputType
  }

  export type RegionalWorkflowGroupByOutputType = {
    id: string
    state: string
    municipality: string | null
    category: string
    sla: string
    createdById: string
    _count: RegionalWorkflowCountAggregateOutputType | null
    _min: RegionalWorkflowMinAggregateOutputType | null
    _max: RegionalWorkflowMaxAggregateOutputType | null
  }

  type GetRegionalWorkflowGroupByPayload<T extends RegionalWorkflowGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RegionalWorkflowGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RegionalWorkflowGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RegionalWorkflowGroupByOutputType[P]>
            : GetScalarType<T[P], RegionalWorkflowGroupByOutputType[P]>
        }
      >
    >


  export type RegionalWorkflowSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    state?: boolean
    municipality?: boolean
    category?: boolean
    sla?: boolean
    createdById?: boolean
    createdBy?: boolean | DepartmentStateAdminDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["regionalWorkflow"]>

  export type RegionalWorkflowSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    state?: boolean
    municipality?: boolean
    category?: boolean
    sla?: boolean
    createdById?: boolean
    createdBy?: boolean | DepartmentStateAdminDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["regionalWorkflow"]>

  export type RegionalWorkflowSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    state?: boolean
    municipality?: boolean
    category?: boolean
    sla?: boolean
    createdById?: boolean
    createdBy?: boolean | DepartmentStateAdminDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["regionalWorkflow"]>

  export type RegionalWorkflowSelectScalar = {
    id?: boolean
    state?: boolean
    municipality?: boolean
    category?: boolean
    sla?: boolean
    createdById?: boolean
  }

  export type RegionalWorkflowOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "state" | "municipality" | "category" | "sla" | "createdById", ExtArgs["result"]["regionalWorkflow"]>
  export type RegionalWorkflowInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | DepartmentStateAdminDefaultArgs<ExtArgs>
  }
  export type RegionalWorkflowIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | DepartmentStateAdminDefaultArgs<ExtArgs>
  }
  export type RegionalWorkflowIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | DepartmentStateAdminDefaultArgs<ExtArgs>
  }

  export type $RegionalWorkflowPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RegionalWorkflow"
    objects: {
      createdBy: Prisma.$DepartmentStateAdminPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      state: string
      municipality: string | null
      category: string
      sla: string
      createdById: string
    }, ExtArgs["result"]["regionalWorkflow"]>
    composites: {}
  }

  type RegionalWorkflowGetPayload<S extends boolean | null | undefined | RegionalWorkflowDefaultArgs> = $Result.GetResult<Prisma.$RegionalWorkflowPayload, S>

  type RegionalWorkflowCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RegionalWorkflowFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RegionalWorkflowCountAggregateInputType | true
    }

  export interface RegionalWorkflowDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RegionalWorkflow'], meta: { name: 'RegionalWorkflow' } }
    /**
     * Find zero or one RegionalWorkflow that matches the filter.
     * @param {RegionalWorkflowFindUniqueArgs} args - Arguments to find a RegionalWorkflow
     * @example
     * // Get one RegionalWorkflow
     * const regionalWorkflow = await prisma.regionalWorkflow.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RegionalWorkflowFindUniqueArgs>(args: SelectSubset<T, RegionalWorkflowFindUniqueArgs<ExtArgs>>): Prisma__RegionalWorkflowClient<$Result.GetResult<Prisma.$RegionalWorkflowPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one RegionalWorkflow that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RegionalWorkflowFindUniqueOrThrowArgs} args - Arguments to find a RegionalWorkflow
     * @example
     * // Get one RegionalWorkflow
     * const regionalWorkflow = await prisma.regionalWorkflow.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RegionalWorkflowFindUniqueOrThrowArgs>(args: SelectSubset<T, RegionalWorkflowFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RegionalWorkflowClient<$Result.GetResult<Prisma.$RegionalWorkflowPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RegionalWorkflow that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionalWorkflowFindFirstArgs} args - Arguments to find a RegionalWorkflow
     * @example
     * // Get one RegionalWorkflow
     * const regionalWorkflow = await prisma.regionalWorkflow.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RegionalWorkflowFindFirstArgs>(args?: SelectSubset<T, RegionalWorkflowFindFirstArgs<ExtArgs>>): Prisma__RegionalWorkflowClient<$Result.GetResult<Prisma.$RegionalWorkflowPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RegionalWorkflow that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionalWorkflowFindFirstOrThrowArgs} args - Arguments to find a RegionalWorkflow
     * @example
     * // Get one RegionalWorkflow
     * const regionalWorkflow = await prisma.regionalWorkflow.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RegionalWorkflowFindFirstOrThrowArgs>(args?: SelectSubset<T, RegionalWorkflowFindFirstOrThrowArgs<ExtArgs>>): Prisma__RegionalWorkflowClient<$Result.GetResult<Prisma.$RegionalWorkflowPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RegionalWorkflows that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionalWorkflowFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RegionalWorkflows
     * const regionalWorkflows = await prisma.regionalWorkflow.findMany()
     * 
     * // Get first 10 RegionalWorkflows
     * const regionalWorkflows = await prisma.regionalWorkflow.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const regionalWorkflowWithIdOnly = await prisma.regionalWorkflow.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RegionalWorkflowFindManyArgs>(args?: SelectSubset<T, RegionalWorkflowFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegionalWorkflowPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a RegionalWorkflow.
     * @param {RegionalWorkflowCreateArgs} args - Arguments to create a RegionalWorkflow.
     * @example
     * // Create one RegionalWorkflow
     * const RegionalWorkflow = await prisma.regionalWorkflow.create({
     *   data: {
     *     // ... data to create a RegionalWorkflow
     *   }
     * })
     * 
     */
    create<T extends RegionalWorkflowCreateArgs>(args: SelectSubset<T, RegionalWorkflowCreateArgs<ExtArgs>>): Prisma__RegionalWorkflowClient<$Result.GetResult<Prisma.$RegionalWorkflowPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many RegionalWorkflows.
     * @param {RegionalWorkflowCreateManyArgs} args - Arguments to create many RegionalWorkflows.
     * @example
     * // Create many RegionalWorkflows
     * const regionalWorkflow = await prisma.regionalWorkflow.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RegionalWorkflowCreateManyArgs>(args?: SelectSubset<T, RegionalWorkflowCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RegionalWorkflows and returns the data saved in the database.
     * @param {RegionalWorkflowCreateManyAndReturnArgs} args - Arguments to create many RegionalWorkflows.
     * @example
     * // Create many RegionalWorkflows
     * const regionalWorkflow = await prisma.regionalWorkflow.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RegionalWorkflows and only return the `id`
     * const regionalWorkflowWithIdOnly = await prisma.regionalWorkflow.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RegionalWorkflowCreateManyAndReturnArgs>(args?: SelectSubset<T, RegionalWorkflowCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegionalWorkflowPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a RegionalWorkflow.
     * @param {RegionalWorkflowDeleteArgs} args - Arguments to delete one RegionalWorkflow.
     * @example
     * // Delete one RegionalWorkflow
     * const RegionalWorkflow = await prisma.regionalWorkflow.delete({
     *   where: {
     *     // ... filter to delete one RegionalWorkflow
     *   }
     * })
     * 
     */
    delete<T extends RegionalWorkflowDeleteArgs>(args: SelectSubset<T, RegionalWorkflowDeleteArgs<ExtArgs>>): Prisma__RegionalWorkflowClient<$Result.GetResult<Prisma.$RegionalWorkflowPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one RegionalWorkflow.
     * @param {RegionalWorkflowUpdateArgs} args - Arguments to update one RegionalWorkflow.
     * @example
     * // Update one RegionalWorkflow
     * const regionalWorkflow = await prisma.regionalWorkflow.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RegionalWorkflowUpdateArgs>(args: SelectSubset<T, RegionalWorkflowUpdateArgs<ExtArgs>>): Prisma__RegionalWorkflowClient<$Result.GetResult<Prisma.$RegionalWorkflowPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more RegionalWorkflows.
     * @param {RegionalWorkflowDeleteManyArgs} args - Arguments to filter RegionalWorkflows to delete.
     * @example
     * // Delete a few RegionalWorkflows
     * const { count } = await prisma.regionalWorkflow.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RegionalWorkflowDeleteManyArgs>(args?: SelectSubset<T, RegionalWorkflowDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RegionalWorkflows.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionalWorkflowUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RegionalWorkflows
     * const regionalWorkflow = await prisma.regionalWorkflow.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RegionalWorkflowUpdateManyArgs>(args: SelectSubset<T, RegionalWorkflowUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RegionalWorkflows and returns the data updated in the database.
     * @param {RegionalWorkflowUpdateManyAndReturnArgs} args - Arguments to update many RegionalWorkflows.
     * @example
     * // Update many RegionalWorkflows
     * const regionalWorkflow = await prisma.regionalWorkflow.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more RegionalWorkflows and only return the `id`
     * const regionalWorkflowWithIdOnly = await prisma.regionalWorkflow.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RegionalWorkflowUpdateManyAndReturnArgs>(args: SelectSubset<T, RegionalWorkflowUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegionalWorkflowPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one RegionalWorkflow.
     * @param {RegionalWorkflowUpsertArgs} args - Arguments to update or create a RegionalWorkflow.
     * @example
     * // Update or create a RegionalWorkflow
     * const regionalWorkflow = await prisma.regionalWorkflow.upsert({
     *   create: {
     *     // ... data to create a RegionalWorkflow
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RegionalWorkflow we want to update
     *   }
     * })
     */
    upsert<T extends RegionalWorkflowUpsertArgs>(args: SelectSubset<T, RegionalWorkflowUpsertArgs<ExtArgs>>): Prisma__RegionalWorkflowClient<$Result.GetResult<Prisma.$RegionalWorkflowPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of RegionalWorkflows.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionalWorkflowCountArgs} args - Arguments to filter RegionalWorkflows to count.
     * @example
     * // Count the number of RegionalWorkflows
     * const count = await prisma.regionalWorkflow.count({
     *   where: {
     *     // ... the filter for the RegionalWorkflows we want to count
     *   }
     * })
    **/
    count<T extends RegionalWorkflowCountArgs>(
      args?: Subset<T, RegionalWorkflowCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RegionalWorkflowCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RegionalWorkflow.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionalWorkflowAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RegionalWorkflowAggregateArgs>(args: Subset<T, RegionalWorkflowAggregateArgs>): Prisma.PrismaPromise<GetRegionalWorkflowAggregateType<T>>

    /**
     * Group by RegionalWorkflow.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionalWorkflowGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RegionalWorkflowGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RegionalWorkflowGroupByArgs['orderBy'] }
        : { orderBy?: RegionalWorkflowGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RegionalWorkflowGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRegionalWorkflowGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RegionalWorkflow model
   */
  readonly fields: RegionalWorkflowFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RegionalWorkflow.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RegionalWorkflowClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    createdBy<T extends DepartmentStateAdminDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DepartmentStateAdminDefaultArgs<ExtArgs>>): Prisma__DepartmentStateAdminClient<$Result.GetResult<Prisma.$DepartmentStateAdminPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RegionalWorkflow model
   */
  interface RegionalWorkflowFieldRefs {
    readonly id: FieldRef<"RegionalWorkflow", 'String'>
    readonly state: FieldRef<"RegionalWorkflow", 'String'>
    readonly municipality: FieldRef<"RegionalWorkflow", 'String'>
    readonly category: FieldRef<"RegionalWorkflow", 'String'>
    readonly sla: FieldRef<"RegionalWorkflow", 'String'>
    readonly createdById: FieldRef<"RegionalWorkflow", 'String'>
  }
    

  // Custom InputTypes
  /**
   * RegionalWorkflow findUnique
   */
  export type RegionalWorkflowFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegionalWorkflow
     */
    select?: RegionalWorkflowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RegionalWorkflow
     */
    omit?: RegionalWorkflowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionalWorkflowInclude<ExtArgs> | null
    /**
     * Filter, which RegionalWorkflow to fetch.
     */
    where: RegionalWorkflowWhereUniqueInput
  }

  /**
   * RegionalWorkflow findUniqueOrThrow
   */
  export type RegionalWorkflowFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegionalWorkflow
     */
    select?: RegionalWorkflowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RegionalWorkflow
     */
    omit?: RegionalWorkflowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionalWorkflowInclude<ExtArgs> | null
    /**
     * Filter, which RegionalWorkflow to fetch.
     */
    where: RegionalWorkflowWhereUniqueInput
  }

  /**
   * RegionalWorkflow findFirst
   */
  export type RegionalWorkflowFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegionalWorkflow
     */
    select?: RegionalWorkflowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RegionalWorkflow
     */
    omit?: RegionalWorkflowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionalWorkflowInclude<ExtArgs> | null
    /**
     * Filter, which RegionalWorkflow to fetch.
     */
    where?: RegionalWorkflowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RegionalWorkflows to fetch.
     */
    orderBy?: RegionalWorkflowOrderByWithRelationInput | RegionalWorkflowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RegionalWorkflows.
     */
    cursor?: RegionalWorkflowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RegionalWorkflows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RegionalWorkflows.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RegionalWorkflows.
     */
    distinct?: RegionalWorkflowScalarFieldEnum | RegionalWorkflowScalarFieldEnum[]
  }

  /**
   * RegionalWorkflow findFirstOrThrow
   */
  export type RegionalWorkflowFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegionalWorkflow
     */
    select?: RegionalWorkflowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RegionalWorkflow
     */
    omit?: RegionalWorkflowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionalWorkflowInclude<ExtArgs> | null
    /**
     * Filter, which RegionalWorkflow to fetch.
     */
    where?: RegionalWorkflowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RegionalWorkflows to fetch.
     */
    orderBy?: RegionalWorkflowOrderByWithRelationInput | RegionalWorkflowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RegionalWorkflows.
     */
    cursor?: RegionalWorkflowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RegionalWorkflows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RegionalWorkflows.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RegionalWorkflows.
     */
    distinct?: RegionalWorkflowScalarFieldEnum | RegionalWorkflowScalarFieldEnum[]
  }

  /**
   * RegionalWorkflow findMany
   */
  export type RegionalWorkflowFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegionalWorkflow
     */
    select?: RegionalWorkflowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RegionalWorkflow
     */
    omit?: RegionalWorkflowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionalWorkflowInclude<ExtArgs> | null
    /**
     * Filter, which RegionalWorkflows to fetch.
     */
    where?: RegionalWorkflowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RegionalWorkflows to fetch.
     */
    orderBy?: RegionalWorkflowOrderByWithRelationInput | RegionalWorkflowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RegionalWorkflows.
     */
    cursor?: RegionalWorkflowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RegionalWorkflows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RegionalWorkflows.
     */
    skip?: number
    distinct?: RegionalWorkflowScalarFieldEnum | RegionalWorkflowScalarFieldEnum[]
  }

  /**
   * RegionalWorkflow create
   */
  export type RegionalWorkflowCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegionalWorkflow
     */
    select?: RegionalWorkflowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RegionalWorkflow
     */
    omit?: RegionalWorkflowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionalWorkflowInclude<ExtArgs> | null
    /**
     * The data needed to create a RegionalWorkflow.
     */
    data: XOR<RegionalWorkflowCreateInput, RegionalWorkflowUncheckedCreateInput>
  }

  /**
   * RegionalWorkflow createMany
   */
  export type RegionalWorkflowCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RegionalWorkflows.
     */
    data: RegionalWorkflowCreateManyInput | RegionalWorkflowCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RegionalWorkflow createManyAndReturn
   */
  export type RegionalWorkflowCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegionalWorkflow
     */
    select?: RegionalWorkflowSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RegionalWorkflow
     */
    omit?: RegionalWorkflowOmit<ExtArgs> | null
    /**
     * The data used to create many RegionalWorkflows.
     */
    data: RegionalWorkflowCreateManyInput | RegionalWorkflowCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionalWorkflowIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RegionalWorkflow update
   */
  export type RegionalWorkflowUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegionalWorkflow
     */
    select?: RegionalWorkflowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RegionalWorkflow
     */
    omit?: RegionalWorkflowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionalWorkflowInclude<ExtArgs> | null
    /**
     * The data needed to update a RegionalWorkflow.
     */
    data: XOR<RegionalWorkflowUpdateInput, RegionalWorkflowUncheckedUpdateInput>
    /**
     * Choose, which RegionalWorkflow to update.
     */
    where: RegionalWorkflowWhereUniqueInput
  }

  /**
   * RegionalWorkflow updateMany
   */
  export type RegionalWorkflowUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RegionalWorkflows.
     */
    data: XOR<RegionalWorkflowUpdateManyMutationInput, RegionalWorkflowUncheckedUpdateManyInput>
    /**
     * Filter which RegionalWorkflows to update
     */
    where?: RegionalWorkflowWhereInput
    /**
     * Limit how many RegionalWorkflows to update.
     */
    limit?: number
  }

  /**
   * RegionalWorkflow updateManyAndReturn
   */
  export type RegionalWorkflowUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegionalWorkflow
     */
    select?: RegionalWorkflowSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RegionalWorkflow
     */
    omit?: RegionalWorkflowOmit<ExtArgs> | null
    /**
     * The data used to update RegionalWorkflows.
     */
    data: XOR<RegionalWorkflowUpdateManyMutationInput, RegionalWorkflowUncheckedUpdateManyInput>
    /**
     * Filter which RegionalWorkflows to update
     */
    where?: RegionalWorkflowWhereInput
    /**
     * Limit how many RegionalWorkflows to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionalWorkflowIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * RegionalWorkflow upsert
   */
  export type RegionalWorkflowUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegionalWorkflow
     */
    select?: RegionalWorkflowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RegionalWorkflow
     */
    omit?: RegionalWorkflowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionalWorkflowInclude<ExtArgs> | null
    /**
     * The filter to search for the RegionalWorkflow to update in case it exists.
     */
    where: RegionalWorkflowWhereUniqueInput
    /**
     * In case the RegionalWorkflow found by the `where` argument doesn't exist, create a new RegionalWorkflow with this data.
     */
    create: XOR<RegionalWorkflowCreateInput, RegionalWorkflowUncheckedCreateInput>
    /**
     * In case the RegionalWorkflow was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RegionalWorkflowUpdateInput, RegionalWorkflowUncheckedUpdateInput>
  }

  /**
   * RegionalWorkflow delete
   */
  export type RegionalWorkflowDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegionalWorkflow
     */
    select?: RegionalWorkflowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RegionalWorkflow
     */
    omit?: RegionalWorkflowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionalWorkflowInclude<ExtArgs> | null
    /**
     * Filter which RegionalWorkflow to delete.
     */
    where: RegionalWorkflowWhereUniqueInput
  }

  /**
   * RegionalWorkflow deleteMany
   */
  export type RegionalWorkflowDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RegionalWorkflows to delete
     */
    where?: RegionalWorkflowWhereInput
    /**
     * Limit how many RegionalWorkflows to delete.
     */
    limit?: number
  }

  /**
   * RegionalWorkflow without action
   */
  export type RegionalWorkflowDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegionalWorkflow
     */
    select?: RegionalWorkflowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RegionalWorkflow
     */
    omit?: RegionalWorkflowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionalWorkflowInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    name: 'name',
    phoneNumber: 'phoneNumber',
    dateOfBirth: 'dateOfBirth',
    password: 'password',
    aadhaarId: 'aadhaarId',
    preferredLanguage: 'preferredLanguage',
    disability: 'disability',
    consentDataCollection: 'consentDataCollection',
    dateOfCreation: 'dateOfCreation',
    lastUpdated: 'lastUpdated',
    status: 'status'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const UserLocationScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    pin: 'pin',
    district: 'district',
    city: 'city',
    locality: 'locality',
    street: 'street',
    municipal: 'municipal'
  };

  export type UserLocationScalarFieldEnum = (typeof UserLocationScalarFieldEnum)[keyof typeof UserLocationScalarFieldEnum]


  export const AgentScalarFieldEnum: {
    id: 'id',
    email: 'email',
    fullName: 'fullName',
    employeeId: 'employeeId',
    password: 'password',
    phoneNumber: 'phoneNumber',
    officialEmail: 'officialEmail',
    department: 'department',
    municipality: 'municipality',
    autonomyLevel: 'autonomyLevel',
    accessLevel: 'accessLevel',
    workloadLimit: 'workloadLimit',
    currentWorkload: 'currentWorkload',
    availabilityStatus: 'availabilityStatus',
    dateOfCreation: 'dateOfCreation',
    lastUpdated: 'lastUpdated',
    status: 'status',
    lastLogin: 'lastLogin',
    resolutionRate: 'resolutionRate',
    avgResolutionTime: 'avgResolutionTime',
    collaborationMetric: 'collaborationMetric',
    managedByMunicipalId: 'managedByMunicipalId'
  };

  export type AgentScalarFieldEnum = (typeof AgentScalarFieldEnum)[keyof typeof AgentScalarFieldEnum]


  export const DepartmentMunicipalAdminScalarFieldEnum: {
    id: 'id',
    fullName: 'fullName',
    adminId: 'adminId',
    officialEmail: 'officialEmail',
    phoneNumber: 'phoneNumber',
    password: 'password',
    department: 'department',
    municipality: 'municipality',
    accessLevel: 'accessLevel',
    dateOfCreation: 'dateOfCreation',
    lastUpdated: 'lastUpdated',
    status: 'status',
    lastLogin: 'lastLogin',
    resolutionRate: 'resolutionRate',
    slaComplianceRate: 'slaComplianceRate',
    escalationCount: 'escalationCount',
    managedByStateAdminId: 'managedByStateAdminId',
    managedBySuperMunicipalId: 'managedBySuperMunicipalId'
  };

  export type DepartmentMunicipalAdminScalarFieldEnum = (typeof DepartmentMunicipalAdminScalarFieldEnum)[keyof typeof DepartmentMunicipalAdminScalarFieldEnum]


  export const SuperMunicipalAdminScalarFieldEnum: {
    id: 'id',
    fullName: 'fullName',
    adminId: 'adminId',
    officialEmail: 'officialEmail',
    password: 'password',
    phoneNumber: 'phoneNumber',
    municipality: 'municipality',
    accessLevel: 'accessLevel',
    dateOfCreation: 'dateOfCreation',
    lastUpdated: 'lastUpdated',
    status: 'status',
    lastLogin: 'lastLogin',
    municipalityResolutionRate: 'municipalityResolutionRate',
    crossDepartmentSuccess: 'crossDepartmentSuccess',
    managedBySuperStateId: 'managedBySuperStateId'
  };

  export type SuperMunicipalAdminScalarFieldEnum = (typeof SuperMunicipalAdminScalarFieldEnum)[keyof typeof SuperMunicipalAdminScalarFieldEnum]


  export const DepartmentStateAdminScalarFieldEnum: {
    id: 'id',
    fullName: 'fullName',
    adminId: 'adminId',
    officialEmail: 'officialEmail',
    password: 'password',
    phoneNumber: 'phoneNumber',
    department: 'department',
    state: 'state',
    accessLevel: 'accessLevel',
    dateOfCreation: 'dateOfCreation',
    lastUpdated: 'lastUpdated',
    status: 'status',
    lastLogin: 'lastLogin',
    stateResolutionRate: 'stateResolutionRate',
    systemicIssuesIdentified: 'systemicIssuesIdentified',
    managedMunicipalities: 'managedMunicipalities',
    managedBySuperStateId: 'managedBySuperStateId'
  };

  export type DepartmentStateAdminScalarFieldEnum = (typeof DepartmentStateAdminScalarFieldEnum)[keyof typeof DepartmentStateAdminScalarFieldEnum]


  export const SuperStateAdminScalarFieldEnum: {
    id: 'id',
    fullName: 'fullName',
    adminId: 'adminId',
    officialEmail: 'officialEmail',
    phoneNumber: 'phoneNumber',
    password: 'password',
    state: 'state',
    accessLevel: 'accessLevel',
    dateOfCreation: 'dateOfCreation',
    lastUpdated: 'lastUpdated',
    status: 'status',
    lastLogin: 'lastLogin',
    stateResolutionRate: 'stateResolutionRate',
    crossDepartmentSuccess: 'crossDepartmentSuccess',
    managedBySuperAdminId: 'managedBySuperAdminId'
  };

  export type SuperStateAdminScalarFieldEnum = (typeof SuperStateAdminScalarFieldEnum)[keyof typeof SuperStateAdminScalarFieldEnum]


  export const SuperAdminScalarFieldEnum: {
    id: 'id',
    fullName: 'fullName',
    adminId: 'adminId',
    officialEmail: 'officialEmail',
    phoneNumber: 'phoneNumber',
    password: 'password',
    accessLevel: 'accessLevel',
    dateOfCreation: 'dateOfCreation',
    lastUpdated: 'lastUpdated',
    status: 'status',
    lastLogin: 'lastLogin'
  };

  export type SuperAdminScalarFieldEnum = (typeof SuperAdminScalarFieldEnum)[keyof typeof SuperAdminScalarFieldEnum]


  export const CategoryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    subCategories: 'subCategories',
    learnedSubCategories: 'learnedSubCategories',
    assignedDepartment: 'assignedDepartment',
    creationDate: 'creationDate',
    lastUpdated: 'lastUpdated',
    createdBySuperAdminId: 'createdBySuperAdminId',
    managedByDeptStateAdminId: 'managedByDeptStateAdminId'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const ComplaintScalarFieldEnum: {
    id: 'id',
    submissionDate: 'submissionDate',
    seq: 'seq',
    complainantId: 'complainantId',
    categoryId: 'categoryId',
    subCategory: 'subCategory',
    standardizedSubCategory: 'standardizedSubCategory',
    description: 'description',
    urgency: 'urgency',
    attachmentUrl: 'attachmentUrl',
    assignedDepartment: 'assignedDepartment',
    status: 'status',
    sla: 'sla',
    upvoteCount: 'upvoteCount',
    isPublic: 'isPublic',
    escalationLevel: 'escalationLevel',
    dateOfResolution: 'dateOfResolution',
    assignedAgentId: 'assignedAgentId',
    managedByMunicipalAdminId: 'managedByMunicipalAdminId',
    moderatedByMunicipalAdminId: 'moderatedByMunicipalAdminId',
    crossDeptIssueSuperMunicipalId: 'crossDeptIssueSuperMunicipalId',
    escalatedToStateAdminId: 'escalatedToStateAdminId',
    escalatedToSuperStateAdminId: 'escalatedToSuperStateAdminId',
    managedBySuperAdminId: 'managedBySuperAdminId'
  };

  export type ComplaintScalarFieldEnum = (typeof ComplaintScalarFieldEnum)[keyof typeof ComplaintScalarFieldEnum]


  export const ComplaintLocationScalarFieldEnum: {
    id: 'id',
    complaintId: 'complaintId',
    pin: 'pin',
    district: 'district',
    city: 'city',
    locality: 'locality',
    street: 'street',
    latitude: 'latitude',
    longitude: 'longitude'
  };

  export type ComplaintLocationScalarFieldEnum = (typeof ComplaintLocationScalarFieldEnum)[keyof typeof ComplaintLocationScalarFieldEnum]


  export const UpvoteScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    complaintId: 'complaintId',
    timestamp: 'timestamp'
  };

  export type UpvoteScalarFieldEnum = (typeof UpvoteScalarFieldEnum)[keyof typeof UpvoteScalarFieldEnum]


  export const NewsUpdateScalarFieldEnum: {
    id: 'id',
    title: 'title',
    content: 'content',
    date: 'date',
    createdById: 'createdById'
  };

  export type NewsUpdateScalarFieldEnum = (typeof NewsUpdateScalarFieldEnum)[keyof typeof NewsUpdateScalarFieldEnum]


  export const AuditLogScalarFieldEnum: {
    id: 'id',
    action: 'action',
    userId: 'userId',
    complaintId: 'complaintId',
    timestamp: 'timestamp',
    details: 'details'
  };

  export type AuditLogScalarFieldEnum = (typeof AuditLogScalarFieldEnum)[keyof typeof AuditLogScalarFieldEnum]


  export const RegionalWorkflowScalarFieldEnum: {
    id: 'id',
    state: 'state',
    municipality: 'municipality',
    category: 'category',
    sla: 'sla',
    createdById: 'createdById'
  };

  export type RegionalWorkflowScalarFieldEnum = (typeof RegionalWorkflowScalarFieldEnum)[keyof typeof RegionalWorkflowScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'ComplaintUrgency'
   */
  export type EnumComplaintUrgencyFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ComplaintUrgency'>
    


  /**
   * Reference to a field of type 'ComplaintUrgency[]'
   */
  export type ListEnumComplaintUrgencyFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ComplaintUrgency[]'>
    


  /**
   * Reference to a field of type 'ComplaintStatus'
   */
  export type EnumComplaintStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ComplaintStatus'>
    


  /**
   * Reference to a field of type 'ComplaintStatus[]'
   */
  export type ListEnumComplaintStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ComplaintStatus[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    phoneNumber?: StringFilter<"User"> | string
    dateOfBirth?: DateTimeFilter<"User"> | Date | string
    password?: StringFilter<"User"> | string
    aadhaarId?: StringFilter<"User"> | string
    preferredLanguage?: StringFilter<"User"> | string
    disability?: StringNullableFilter<"User"> | string | null
    consentDataCollection?: BoolFilter<"User"> | boolean
    dateOfCreation?: DateTimeFilter<"User"> | Date | string
    lastUpdated?: DateTimeFilter<"User"> | Date | string
    status?: StringFilter<"User"> | string
    location?: XOR<UserLocationNullableScalarRelationFilter, UserLocationWhereInput> | null
    complaints?: ComplaintListRelationFilter
    upvotes?: UpvoteListRelationFilter
    auditLogsCreated?: AuditLogListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    phoneNumber?: SortOrder
    dateOfBirth?: SortOrder
    password?: SortOrder
    aadhaarId?: SortOrder
    preferredLanguage?: SortOrder
    disability?: SortOrderInput | SortOrder
    consentDataCollection?: SortOrder
    dateOfCreation?: SortOrder
    lastUpdated?: SortOrder
    status?: SortOrder
    location?: UserLocationOrderByWithRelationInput
    complaints?: ComplaintOrderByRelationAggregateInput
    upvotes?: UpvoteOrderByRelationAggregateInput
    auditLogsCreated?: AuditLogOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    phoneNumber?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    dateOfBirth?: DateTimeFilter<"User"> | Date | string
    password?: StringFilter<"User"> | string
    aadhaarId?: StringFilter<"User"> | string
    preferredLanguage?: StringFilter<"User"> | string
    disability?: StringNullableFilter<"User"> | string | null
    consentDataCollection?: BoolFilter<"User"> | boolean
    dateOfCreation?: DateTimeFilter<"User"> | Date | string
    lastUpdated?: DateTimeFilter<"User"> | Date | string
    status?: StringFilter<"User"> | string
    location?: XOR<UserLocationNullableScalarRelationFilter, UserLocationWhereInput> | null
    complaints?: ComplaintListRelationFilter
    upvotes?: UpvoteListRelationFilter
    auditLogsCreated?: AuditLogListRelationFilter
  }, "id" | "email" | "phoneNumber">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    phoneNumber?: SortOrder
    dateOfBirth?: SortOrder
    password?: SortOrder
    aadhaarId?: SortOrder
    preferredLanguage?: SortOrder
    disability?: SortOrderInput | SortOrder
    consentDataCollection?: SortOrder
    dateOfCreation?: SortOrder
    lastUpdated?: SortOrder
    status?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    phoneNumber?: StringWithAggregatesFilter<"User"> | string
    dateOfBirth?: DateTimeWithAggregatesFilter<"User"> | Date | string
    password?: StringWithAggregatesFilter<"User"> | string
    aadhaarId?: StringWithAggregatesFilter<"User"> | string
    preferredLanguage?: StringWithAggregatesFilter<"User"> | string
    disability?: StringNullableWithAggregatesFilter<"User"> | string | null
    consentDataCollection?: BoolWithAggregatesFilter<"User"> | boolean
    dateOfCreation?: DateTimeWithAggregatesFilter<"User"> | Date | string
    lastUpdated?: DateTimeWithAggregatesFilter<"User"> | Date | string
    status?: StringWithAggregatesFilter<"User"> | string
  }

  export type UserLocationWhereInput = {
    AND?: UserLocationWhereInput | UserLocationWhereInput[]
    OR?: UserLocationWhereInput[]
    NOT?: UserLocationWhereInput | UserLocationWhereInput[]
    id?: StringFilter<"UserLocation"> | string
    userId?: StringFilter<"UserLocation"> | string
    pin?: StringFilter<"UserLocation"> | string
    district?: StringFilter<"UserLocation"> | string
    city?: StringFilter<"UserLocation"> | string
    locality?: StringFilter<"UserLocation"> | string
    street?: StringFilter<"UserLocation"> | string
    municipal?: StringFilter<"UserLocation"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type UserLocationOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    pin?: SortOrder
    district?: SortOrder
    city?: SortOrder
    locality?: SortOrder
    street?: SortOrder
    municipal?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type UserLocationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: UserLocationWhereInput | UserLocationWhereInput[]
    OR?: UserLocationWhereInput[]
    NOT?: UserLocationWhereInput | UserLocationWhereInput[]
    pin?: StringFilter<"UserLocation"> | string
    district?: StringFilter<"UserLocation"> | string
    city?: StringFilter<"UserLocation"> | string
    locality?: StringFilter<"UserLocation"> | string
    street?: StringFilter<"UserLocation"> | string
    municipal?: StringFilter<"UserLocation"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "userId">

  export type UserLocationOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    pin?: SortOrder
    district?: SortOrder
    city?: SortOrder
    locality?: SortOrder
    street?: SortOrder
    municipal?: SortOrder
    _count?: UserLocationCountOrderByAggregateInput
    _max?: UserLocationMaxOrderByAggregateInput
    _min?: UserLocationMinOrderByAggregateInput
  }

  export type UserLocationScalarWhereWithAggregatesInput = {
    AND?: UserLocationScalarWhereWithAggregatesInput | UserLocationScalarWhereWithAggregatesInput[]
    OR?: UserLocationScalarWhereWithAggregatesInput[]
    NOT?: UserLocationScalarWhereWithAggregatesInput | UserLocationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserLocation"> | string
    userId?: StringWithAggregatesFilter<"UserLocation"> | string
    pin?: StringWithAggregatesFilter<"UserLocation"> | string
    district?: StringWithAggregatesFilter<"UserLocation"> | string
    city?: StringWithAggregatesFilter<"UserLocation"> | string
    locality?: StringWithAggregatesFilter<"UserLocation"> | string
    street?: StringWithAggregatesFilter<"UserLocation"> | string
    municipal?: StringWithAggregatesFilter<"UserLocation"> | string
  }

  export type AgentWhereInput = {
    AND?: AgentWhereInput | AgentWhereInput[]
    OR?: AgentWhereInput[]
    NOT?: AgentWhereInput | AgentWhereInput[]
    id?: StringFilter<"Agent"> | string
    email?: StringFilter<"Agent"> | string
    fullName?: StringFilter<"Agent"> | string
    employeeId?: StringFilter<"Agent"> | string
    password?: StringFilter<"Agent"> | string
    phoneNumber?: StringFilter<"Agent"> | string
    officialEmail?: StringFilter<"Agent"> | string
    department?: StringFilter<"Agent"> | string
    municipality?: StringFilter<"Agent"> | string
    autonomyLevel?: StringFilter<"Agent"> | string
    accessLevel?: StringFilter<"Agent"> | string
    workloadLimit?: IntFilter<"Agent"> | number
    currentWorkload?: IntFilter<"Agent"> | number
    availabilityStatus?: StringFilter<"Agent"> | string
    dateOfCreation?: DateTimeFilter<"Agent"> | Date | string
    lastUpdated?: DateTimeFilter<"Agent"> | Date | string
    status?: StringFilter<"Agent"> | string
    lastLogin?: DateTimeNullableFilter<"Agent"> | Date | string | null
    resolutionRate?: FloatFilter<"Agent"> | number
    avgResolutionTime?: StringNullableFilter<"Agent"> | string | null
    collaborationMetric?: IntFilter<"Agent"> | number
    managedByMunicipalId?: StringNullableFilter<"Agent"> | string | null
    assignedComplaints?: ComplaintListRelationFilter
    coAssignedComplaints?: ComplaintListRelationFilter
    managedByMunicipal?: XOR<DepartmentMunicipalAdminNullableScalarRelationFilter, DepartmentMunicipalAdminWhereInput> | null
  }

  export type AgentOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    fullName?: SortOrder
    employeeId?: SortOrder
    password?: SortOrder
    phoneNumber?: SortOrder
    officialEmail?: SortOrder
    department?: SortOrder
    municipality?: SortOrder
    autonomyLevel?: SortOrder
    accessLevel?: SortOrder
    workloadLimit?: SortOrder
    currentWorkload?: SortOrder
    availabilityStatus?: SortOrder
    dateOfCreation?: SortOrder
    lastUpdated?: SortOrder
    status?: SortOrder
    lastLogin?: SortOrderInput | SortOrder
    resolutionRate?: SortOrder
    avgResolutionTime?: SortOrderInput | SortOrder
    collaborationMetric?: SortOrder
    managedByMunicipalId?: SortOrderInput | SortOrder
    assignedComplaints?: ComplaintOrderByRelationAggregateInput
    coAssignedComplaints?: ComplaintOrderByRelationAggregateInput
    managedByMunicipal?: DepartmentMunicipalAdminOrderByWithRelationInput
  }

  export type AgentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    employeeId?: string
    officialEmail?: string
    AND?: AgentWhereInput | AgentWhereInput[]
    OR?: AgentWhereInput[]
    NOT?: AgentWhereInput | AgentWhereInput[]
    fullName?: StringFilter<"Agent"> | string
    password?: StringFilter<"Agent"> | string
    phoneNumber?: StringFilter<"Agent"> | string
    department?: StringFilter<"Agent"> | string
    municipality?: StringFilter<"Agent"> | string
    autonomyLevel?: StringFilter<"Agent"> | string
    accessLevel?: StringFilter<"Agent"> | string
    workloadLimit?: IntFilter<"Agent"> | number
    currentWorkload?: IntFilter<"Agent"> | number
    availabilityStatus?: StringFilter<"Agent"> | string
    dateOfCreation?: DateTimeFilter<"Agent"> | Date | string
    lastUpdated?: DateTimeFilter<"Agent"> | Date | string
    status?: StringFilter<"Agent"> | string
    lastLogin?: DateTimeNullableFilter<"Agent"> | Date | string | null
    resolutionRate?: FloatFilter<"Agent"> | number
    avgResolutionTime?: StringNullableFilter<"Agent"> | string | null
    collaborationMetric?: IntFilter<"Agent"> | number
    managedByMunicipalId?: StringNullableFilter<"Agent"> | string | null
    assignedComplaints?: ComplaintListRelationFilter
    coAssignedComplaints?: ComplaintListRelationFilter
    managedByMunicipal?: XOR<DepartmentMunicipalAdminNullableScalarRelationFilter, DepartmentMunicipalAdminWhereInput> | null
  }, "id" | "email" | "employeeId" | "officialEmail">

  export type AgentOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    fullName?: SortOrder
    employeeId?: SortOrder
    password?: SortOrder
    phoneNumber?: SortOrder
    officialEmail?: SortOrder
    department?: SortOrder
    municipality?: SortOrder
    autonomyLevel?: SortOrder
    accessLevel?: SortOrder
    workloadLimit?: SortOrder
    currentWorkload?: SortOrder
    availabilityStatus?: SortOrder
    dateOfCreation?: SortOrder
    lastUpdated?: SortOrder
    status?: SortOrder
    lastLogin?: SortOrderInput | SortOrder
    resolutionRate?: SortOrder
    avgResolutionTime?: SortOrderInput | SortOrder
    collaborationMetric?: SortOrder
    managedByMunicipalId?: SortOrderInput | SortOrder
    _count?: AgentCountOrderByAggregateInput
    _avg?: AgentAvgOrderByAggregateInput
    _max?: AgentMaxOrderByAggregateInput
    _min?: AgentMinOrderByAggregateInput
    _sum?: AgentSumOrderByAggregateInput
  }

  export type AgentScalarWhereWithAggregatesInput = {
    AND?: AgentScalarWhereWithAggregatesInput | AgentScalarWhereWithAggregatesInput[]
    OR?: AgentScalarWhereWithAggregatesInput[]
    NOT?: AgentScalarWhereWithAggregatesInput | AgentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Agent"> | string
    email?: StringWithAggregatesFilter<"Agent"> | string
    fullName?: StringWithAggregatesFilter<"Agent"> | string
    employeeId?: StringWithAggregatesFilter<"Agent"> | string
    password?: StringWithAggregatesFilter<"Agent"> | string
    phoneNumber?: StringWithAggregatesFilter<"Agent"> | string
    officialEmail?: StringWithAggregatesFilter<"Agent"> | string
    department?: StringWithAggregatesFilter<"Agent"> | string
    municipality?: StringWithAggregatesFilter<"Agent"> | string
    autonomyLevel?: StringWithAggregatesFilter<"Agent"> | string
    accessLevel?: StringWithAggregatesFilter<"Agent"> | string
    workloadLimit?: IntWithAggregatesFilter<"Agent"> | number
    currentWorkload?: IntWithAggregatesFilter<"Agent"> | number
    availabilityStatus?: StringWithAggregatesFilter<"Agent"> | string
    dateOfCreation?: DateTimeWithAggregatesFilter<"Agent"> | Date | string
    lastUpdated?: DateTimeWithAggregatesFilter<"Agent"> | Date | string
    status?: StringWithAggregatesFilter<"Agent"> | string
    lastLogin?: DateTimeNullableWithAggregatesFilter<"Agent"> | Date | string | null
    resolutionRate?: FloatWithAggregatesFilter<"Agent"> | number
    avgResolutionTime?: StringNullableWithAggregatesFilter<"Agent"> | string | null
    collaborationMetric?: IntWithAggregatesFilter<"Agent"> | number
    managedByMunicipalId?: StringNullableWithAggregatesFilter<"Agent"> | string | null
  }

  export type DepartmentMunicipalAdminWhereInput = {
    AND?: DepartmentMunicipalAdminWhereInput | DepartmentMunicipalAdminWhereInput[]
    OR?: DepartmentMunicipalAdminWhereInput[]
    NOT?: DepartmentMunicipalAdminWhereInput | DepartmentMunicipalAdminWhereInput[]
    id?: StringFilter<"DepartmentMunicipalAdmin"> | string
    fullName?: StringFilter<"DepartmentMunicipalAdmin"> | string
    adminId?: StringFilter<"DepartmentMunicipalAdmin"> | string
    officialEmail?: StringFilter<"DepartmentMunicipalAdmin"> | string
    phoneNumber?: StringFilter<"DepartmentMunicipalAdmin"> | string
    password?: StringFilter<"DepartmentMunicipalAdmin"> | string
    department?: StringFilter<"DepartmentMunicipalAdmin"> | string
    municipality?: StringFilter<"DepartmentMunicipalAdmin"> | string
    accessLevel?: StringFilter<"DepartmentMunicipalAdmin"> | string
    dateOfCreation?: DateTimeFilter<"DepartmentMunicipalAdmin"> | Date | string
    lastUpdated?: DateTimeFilter<"DepartmentMunicipalAdmin"> | Date | string
    status?: StringFilter<"DepartmentMunicipalAdmin"> | string
    lastLogin?: DateTimeNullableFilter<"DepartmentMunicipalAdmin"> | Date | string | null
    resolutionRate?: FloatFilter<"DepartmentMunicipalAdmin"> | number
    slaComplianceRate?: FloatNullableFilter<"DepartmentMunicipalAdmin"> | number | null
    escalationCount?: IntFilter<"DepartmentMunicipalAdmin"> | number
    managedByStateAdminId?: StringNullableFilter<"DepartmentMunicipalAdmin"> | string | null
    managedBySuperMunicipalId?: StringNullableFilter<"DepartmentMunicipalAdmin"> | string | null
    managedAgents?: AgentListRelationFilter
    managedComplaints?: ComplaintListRelationFilter
    communityModeration?: ComplaintListRelationFilter
    newsUpdates?: NewsUpdateListRelationFilter
    managedByStateAdmin?: XOR<DepartmentStateAdminNullableScalarRelationFilter, DepartmentStateAdminWhereInput> | null
    managedBySuperMunicipal?: XOR<SuperMunicipalAdminNullableScalarRelationFilter, SuperMunicipalAdminWhereInput> | null
  }

  export type DepartmentMunicipalAdminOrderByWithRelationInput = {
    id?: SortOrder
    fullName?: SortOrder
    adminId?: SortOrder
    officialEmail?: SortOrder
    phoneNumber?: SortOrder
    password?: SortOrder
    department?: SortOrder
    municipality?: SortOrder
    accessLevel?: SortOrder
    dateOfCreation?: SortOrder
    lastUpdated?: SortOrder
    status?: SortOrder
    lastLogin?: SortOrderInput | SortOrder
    resolutionRate?: SortOrder
    slaComplianceRate?: SortOrderInput | SortOrder
    escalationCount?: SortOrder
    managedByStateAdminId?: SortOrderInput | SortOrder
    managedBySuperMunicipalId?: SortOrderInput | SortOrder
    managedAgents?: AgentOrderByRelationAggregateInput
    managedComplaints?: ComplaintOrderByRelationAggregateInput
    communityModeration?: ComplaintOrderByRelationAggregateInput
    newsUpdates?: NewsUpdateOrderByRelationAggregateInput
    managedByStateAdmin?: DepartmentStateAdminOrderByWithRelationInput
    managedBySuperMunicipal?: SuperMunicipalAdminOrderByWithRelationInput
  }

  export type DepartmentMunicipalAdminWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    adminId?: string
    officialEmail?: string
    AND?: DepartmentMunicipalAdminWhereInput | DepartmentMunicipalAdminWhereInput[]
    OR?: DepartmentMunicipalAdminWhereInput[]
    NOT?: DepartmentMunicipalAdminWhereInput | DepartmentMunicipalAdminWhereInput[]
    fullName?: StringFilter<"DepartmentMunicipalAdmin"> | string
    phoneNumber?: StringFilter<"DepartmentMunicipalAdmin"> | string
    password?: StringFilter<"DepartmentMunicipalAdmin"> | string
    department?: StringFilter<"DepartmentMunicipalAdmin"> | string
    municipality?: StringFilter<"DepartmentMunicipalAdmin"> | string
    accessLevel?: StringFilter<"DepartmentMunicipalAdmin"> | string
    dateOfCreation?: DateTimeFilter<"DepartmentMunicipalAdmin"> | Date | string
    lastUpdated?: DateTimeFilter<"DepartmentMunicipalAdmin"> | Date | string
    status?: StringFilter<"DepartmentMunicipalAdmin"> | string
    lastLogin?: DateTimeNullableFilter<"DepartmentMunicipalAdmin"> | Date | string | null
    resolutionRate?: FloatFilter<"DepartmentMunicipalAdmin"> | number
    slaComplianceRate?: FloatNullableFilter<"DepartmentMunicipalAdmin"> | number | null
    escalationCount?: IntFilter<"DepartmentMunicipalAdmin"> | number
    managedByStateAdminId?: StringNullableFilter<"DepartmentMunicipalAdmin"> | string | null
    managedBySuperMunicipalId?: StringNullableFilter<"DepartmentMunicipalAdmin"> | string | null
    managedAgents?: AgentListRelationFilter
    managedComplaints?: ComplaintListRelationFilter
    communityModeration?: ComplaintListRelationFilter
    newsUpdates?: NewsUpdateListRelationFilter
    managedByStateAdmin?: XOR<DepartmentStateAdminNullableScalarRelationFilter, DepartmentStateAdminWhereInput> | null
    managedBySuperMunicipal?: XOR<SuperMunicipalAdminNullableScalarRelationFilter, SuperMunicipalAdminWhereInput> | null
  }, "id" | "adminId" | "officialEmail">

  export type DepartmentMunicipalAdminOrderByWithAggregationInput = {
    id?: SortOrder
    fullName?: SortOrder
    adminId?: SortOrder
    officialEmail?: SortOrder
    phoneNumber?: SortOrder
    password?: SortOrder
    department?: SortOrder
    municipality?: SortOrder
    accessLevel?: SortOrder
    dateOfCreation?: SortOrder
    lastUpdated?: SortOrder
    status?: SortOrder
    lastLogin?: SortOrderInput | SortOrder
    resolutionRate?: SortOrder
    slaComplianceRate?: SortOrderInput | SortOrder
    escalationCount?: SortOrder
    managedByStateAdminId?: SortOrderInput | SortOrder
    managedBySuperMunicipalId?: SortOrderInput | SortOrder
    _count?: DepartmentMunicipalAdminCountOrderByAggregateInput
    _avg?: DepartmentMunicipalAdminAvgOrderByAggregateInput
    _max?: DepartmentMunicipalAdminMaxOrderByAggregateInput
    _min?: DepartmentMunicipalAdminMinOrderByAggregateInput
    _sum?: DepartmentMunicipalAdminSumOrderByAggregateInput
  }

  export type DepartmentMunicipalAdminScalarWhereWithAggregatesInput = {
    AND?: DepartmentMunicipalAdminScalarWhereWithAggregatesInput | DepartmentMunicipalAdminScalarWhereWithAggregatesInput[]
    OR?: DepartmentMunicipalAdminScalarWhereWithAggregatesInput[]
    NOT?: DepartmentMunicipalAdminScalarWhereWithAggregatesInput | DepartmentMunicipalAdminScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DepartmentMunicipalAdmin"> | string
    fullName?: StringWithAggregatesFilter<"DepartmentMunicipalAdmin"> | string
    adminId?: StringWithAggregatesFilter<"DepartmentMunicipalAdmin"> | string
    officialEmail?: StringWithAggregatesFilter<"DepartmentMunicipalAdmin"> | string
    phoneNumber?: StringWithAggregatesFilter<"DepartmentMunicipalAdmin"> | string
    password?: StringWithAggregatesFilter<"DepartmentMunicipalAdmin"> | string
    department?: StringWithAggregatesFilter<"DepartmentMunicipalAdmin"> | string
    municipality?: StringWithAggregatesFilter<"DepartmentMunicipalAdmin"> | string
    accessLevel?: StringWithAggregatesFilter<"DepartmentMunicipalAdmin"> | string
    dateOfCreation?: DateTimeWithAggregatesFilter<"DepartmentMunicipalAdmin"> | Date | string
    lastUpdated?: DateTimeWithAggregatesFilter<"DepartmentMunicipalAdmin"> | Date | string
    status?: StringWithAggregatesFilter<"DepartmentMunicipalAdmin"> | string
    lastLogin?: DateTimeNullableWithAggregatesFilter<"DepartmentMunicipalAdmin"> | Date | string | null
    resolutionRate?: FloatWithAggregatesFilter<"DepartmentMunicipalAdmin"> | number
    slaComplianceRate?: FloatNullableWithAggregatesFilter<"DepartmentMunicipalAdmin"> | number | null
    escalationCount?: IntWithAggregatesFilter<"DepartmentMunicipalAdmin"> | number
    managedByStateAdminId?: StringNullableWithAggregatesFilter<"DepartmentMunicipalAdmin"> | string | null
    managedBySuperMunicipalId?: StringNullableWithAggregatesFilter<"DepartmentMunicipalAdmin"> | string | null
  }

  export type SuperMunicipalAdminWhereInput = {
    AND?: SuperMunicipalAdminWhereInput | SuperMunicipalAdminWhereInput[]
    OR?: SuperMunicipalAdminWhereInput[]
    NOT?: SuperMunicipalAdminWhereInput | SuperMunicipalAdminWhereInput[]
    id?: StringFilter<"SuperMunicipalAdmin"> | string
    fullName?: StringFilter<"SuperMunicipalAdmin"> | string
    adminId?: StringFilter<"SuperMunicipalAdmin"> | string
    officialEmail?: StringFilter<"SuperMunicipalAdmin"> | string
    password?: StringFilter<"SuperMunicipalAdmin"> | string
    phoneNumber?: StringNullableFilter<"SuperMunicipalAdmin"> | string | null
    municipality?: StringFilter<"SuperMunicipalAdmin"> | string
    accessLevel?: StringFilter<"SuperMunicipalAdmin"> | string
    dateOfCreation?: DateTimeFilter<"SuperMunicipalAdmin"> | Date | string
    lastUpdated?: DateTimeFilter<"SuperMunicipalAdmin"> | Date | string
    status?: StringFilter<"SuperMunicipalAdmin"> | string
    lastLogin?: DateTimeNullableFilter<"SuperMunicipalAdmin"> | Date | string | null
    municipalityResolutionRate?: FloatFilter<"SuperMunicipalAdmin"> | number
    crossDepartmentSuccess?: IntFilter<"SuperMunicipalAdmin"> | number
    managedBySuperStateId?: StringNullableFilter<"SuperMunicipalAdmin"> | string | null
    managedDepartmentAdmins?: DepartmentMunicipalAdminListRelationFilter
    crossDepartmentIssues?: ComplaintListRelationFilter
    managedBySuperState?: XOR<SuperStateAdminNullableScalarRelationFilter, SuperStateAdminWhereInput> | null
  }

  export type SuperMunicipalAdminOrderByWithRelationInput = {
    id?: SortOrder
    fullName?: SortOrder
    adminId?: SortOrder
    officialEmail?: SortOrder
    password?: SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    municipality?: SortOrder
    accessLevel?: SortOrder
    dateOfCreation?: SortOrder
    lastUpdated?: SortOrder
    status?: SortOrder
    lastLogin?: SortOrderInput | SortOrder
    municipalityResolutionRate?: SortOrder
    crossDepartmentSuccess?: SortOrder
    managedBySuperStateId?: SortOrderInput | SortOrder
    managedDepartmentAdmins?: DepartmentMunicipalAdminOrderByRelationAggregateInput
    crossDepartmentIssues?: ComplaintOrderByRelationAggregateInput
    managedBySuperState?: SuperStateAdminOrderByWithRelationInput
  }

  export type SuperMunicipalAdminWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    adminId?: string
    officialEmail?: string
    AND?: SuperMunicipalAdminWhereInput | SuperMunicipalAdminWhereInput[]
    OR?: SuperMunicipalAdminWhereInput[]
    NOT?: SuperMunicipalAdminWhereInput | SuperMunicipalAdminWhereInput[]
    fullName?: StringFilter<"SuperMunicipalAdmin"> | string
    password?: StringFilter<"SuperMunicipalAdmin"> | string
    phoneNumber?: StringNullableFilter<"SuperMunicipalAdmin"> | string | null
    municipality?: StringFilter<"SuperMunicipalAdmin"> | string
    accessLevel?: StringFilter<"SuperMunicipalAdmin"> | string
    dateOfCreation?: DateTimeFilter<"SuperMunicipalAdmin"> | Date | string
    lastUpdated?: DateTimeFilter<"SuperMunicipalAdmin"> | Date | string
    status?: StringFilter<"SuperMunicipalAdmin"> | string
    lastLogin?: DateTimeNullableFilter<"SuperMunicipalAdmin"> | Date | string | null
    municipalityResolutionRate?: FloatFilter<"SuperMunicipalAdmin"> | number
    crossDepartmentSuccess?: IntFilter<"SuperMunicipalAdmin"> | number
    managedBySuperStateId?: StringNullableFilter<"SuperMunicipalAdmin"> | string | null
    managedDepartmentAdmins?: DepartmentMunicipalAdminListRelationFilter
    crossDepartmentIssues?: ComplaintListRelationFilter
    managedBySuperState?: XOR<SuperStateAdminNullableScalarRelationFilter, SuperStateAdminWhereInput> | null
  }, "id" | "adminId" | "officialEmail">

  export type SuperMunicipalAdminOrderByWithAggregationInput = {
    id?: SortOrder
    fullName?: SortOrder
    adminId?: SortOrder
    officialEmail?: SortOrder
    password?: SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    municipality?: SortOrder
    accessLevel?: SortOrder
    dateOfCreation?: SortOrder
    lastUpdated?: SortOrder
    status?: SortOrder
    lastLogin?: SortOrderInput | SortOrder
    municipalityResolutionRate?: SortOrder
    crossDepartmentSuccess?: SortOrder
    managedBySuperStateId?: SortOrderInput | SortOrder
    _count?: SuperMunicipalAdminCountOrderByAggregateInput
    _avg?: SuperMunicipalAdminAvgOrderByAggregateInput
    _max?: SuperMunicipalAdminMaxOrderByAggregateInput
    _min?: SuperMunicipalAdminMinOrderByAggregateInput
    _sum?: SuperMunicipalAdminSumOrderByAggregateInput
  }

  export type SuperMunicipalAdminScalarWhereWithAggregatesInput = {
    AND?: SuperMunicipalAdminScalarWhereWithAggregatesInput | SuperMunicipalAdminScalarWhereWithAggregatesInput[]
    OR?: SuperMunicipalAdminScalarWhereWithAggregatesInput[]
    NOT?: SuperMunicipalAdminScalarWhereWithAggregatesInput | SuperMunicipalAdminScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SuperMunicipalAdmin"> | string
    fullName?: StringWithAggregatesFilter<"SuperMunicipalAdmin"> | string
    adminId?: StringWithAggregatesFilter<"SuperMunicipalAdmin"> | string
    officialEmail?: StringWithAggregatesFilter<"SuperMunicipalAdmin"> | string
    password?: StringWithAggregatesFilter<"SuperMunicipalAdmin"> | string
    phoneNumber?: StringNullableWithAggregatesFilter<"SuperMunicipalAdmin"> | string | null
    municipality?: StringWithAggregatesFilter<"SuperMunicipalAdmin"> | string
    accessLevel?: StringWithAggregatesFilter<"SuperMunicipalAdmin"> | string
    dateOfCreation?: DateTimeWithAggregatesFilter<"SuperMunicipalAdmin"> | Date | string
    lastUpdated?: DateTimeWithAggregatesFilter<"SuperMunicipalAdmin"> | Date | string
    status?: StringWithAggregatesFilter<"SuperMunicipalAdmin"> | string
    lastLogin?: DateTimeNullableWithAggregatesFilter<"SuperMunicipalAdmin"> | Date | string | null
    municipalityResolutionRate?: FloatWithAggregatesFilter<"SuperMunicipalAdmin"> | number
    crossDepartmentSuccess?: IntWithAggregatesFilter<"SuperMunicipalAdmin"> | number
    managedBySuperStateId?: StringNullableWithAggregatesFilter<"SuperMunicipalAdmin"> | string | null
  }

  export type DepartmentStateAdminWhereInput = {
    AND?: DepartmentStateAdminWhereInput | DepartmentStateAdminWhereInput[]
    OR?: DepartmentStateAdminWhereInput[]
    NOT?: DepartmentStateAdminWhereInput | DepartmentStateAdminWhereInput[]
    id?: StringFilter<"DepartmentStateAdmin"> | string
    fullName?: StringFilter<"DepartmentStateAdmin"> | string
    adminId?: StringFilter<"DepartmentStateAdmin"> | string
    officialEmail?: StringFilter<"DepartmentStateAdmin"> | string
    password?: StringFilter<"DepartmentStateAdmin"> | string
    phoneNumber?: StringNullableFilter<"DepartmentStateAdmin"> | string | null
    department?: StringFilter<"DepartmentStateAdmin"> | string
    state?: StringFilter<"DepartmentStateAdmin"> | string
    accessLevel?: StringFilter<"DepartmentStateAdmin"> | string
    dateOfCreation?: DateTimeFilter<"DepartmentStateAdmin"> | Date | string
    lastUpdated?: DateTimeFilter<"DepartmentStateAdmin"> | Date | string
    status?: StringFilter<"DepartmentStateAdmin"> | string
    lastLogin?: DateTimeNullableFilter<"DepartmentStateAdmin"> | Date | string | null
    stateResolutionRate?: FloatFilter<"DepartmentStateAdmin"> | number
    systemicIssuesIdentified?: IntFilter<"DepartmentStateAdmin"> | number
    managedMunicipalities?: StringNullableListFilter<"DepartmentStateAdmin">
    managedBySuperStateId?: StringNullableFilter<"DepartmentStateAdmin"> | string | null
    managedMunicipalAdmins?: DepartmentMunicipalAdminListRelationFilter
    escalatedComplaints?: ComplaintListRelationFilter
    regionalWorkflows?: RegionalWorkflowListRelationFilter
    managedCategories?: CategoryListRelationFilter
    managedBySuperState?: XOR<SuperStateAdminNullableScalarRelationFilter, SuperStateAdminWhereInput> | null
  }

  export type DepartmentStateAdminOrderByWithRelationInput = {
    id?: SortOrder
    fullName?: SortOrder
    adminId?: SortOrder
    officialEmail?: SortOrder
    password?: SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    department?: SortOrder
    state?: SortOrder
    accessLevel?: SortOrder
    dateOfCreation?: SortOrder
    lastUpdated?: SortOrder
    status?: SortOrder
    lastLogin?: SortOrderInput | SortOrder
    stateResolutionRate?: SortOrder
    systemicIssuesIdentified?: SortOrder
    managedMunicipalities?: SortOrder
    managedBySuperStateId?: SortOrderInput | SortOrder
    managedMunicipalAdmins?: DepartmentMunicipalAdminOrderByRelationAggregateInput
    escalatedComplaints?: ComplaintOrderByRelationAggregateInput
    regionalWorkflows?: RegionalWorkflowOrderByRelationAggregateInput
    managedCategories?: CategoryOrderByRelationAggregateInput
    managedBySuperState?: SuperStateAdminOrderByWithRelationInput
  }

  export type DepartmentStateAdminWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    adminId?: string
    officialEmail?: string
    AND?: DepartmentStateAdminWhereInput | DepartmentStateAdminWhereInput[]
    OR?: DepartmentStateAdminWhereInput[]
    NOT?: DepartmentStateAdminWhereInput | DepartmentStateAdminWhereInput[]
    fullName?: StringFilter<"DepartmentStateAdmin"> | string
    password?: StringFilter<"DepartmentStateAdmin"> | string
    phoneNumber?: StringNullableFilter<"DepartmentStateAdmin"> | string | null
    department?: StringFilter<"DepartmentStateAdmin"> | string
    state?: StringFilter<"DepartmentStateAdmin"> | string
    accessLevel?: StringFilter<"DepartmentStateAdmin"> | string
    dateOfCreation?: DateTimeFilter<"DepartmentStateAdmin"> | Date | string
    lastUpdated?: DateTimeFilter<"DepartmentStateAdmin"> | Date | string
    status?: StringFilter<"DepartmentStateAdmin"> | string
    lastLogin?: DateTimeNullableFilter<"DepartmentStateAdmin"> | Date | string | null
    stateResolutionRate?: FloatFilter<"DepartmentStateAdmin"> | number
    systemicIssuesIdentified?: IntFilter<"DepartmentStateAdmin"> | number
    managedMunicipalities?: StringNullableListFilter<"DepartmentStateAdmin">
    managedBySuperStateId?: StringNullableFilter<"DepartmentStateAdmin"> | string | null
    managedMunicipalAdmins?: DepartmentMunicipalAdminListRelationFilter
    escalatedComplaints?: ComplaintListRelationFilter
    regionalWorkflows?: RegionalWorkflowListRelationFilter
    managedCategories?: CategoryListRelationFilter
    managedBySuperState?: XOR<SuperStateAdminNullableScalarRelationFilter, SuperStateAdminWhereInput> | null
  }, "id" | "adminId" | "officialEmail">

  export type DepartmentStateAdminOrderByWithAggregationInput = {
    id?: SortOrder
    fullName?: SortOrder
    adminId?: SortOrder
    officialEmail?: SortOrder
    password?: SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    department?: SortOrder
    state?: SortOrder
    accessLevel?: SortOrder
    dateOfCreation?: SortOrder
    lastUpdated?: SortOrder
    status?: SortOrder
    lastLogin?: SortOrderInput | SortOrder
    stateResolutionRate?: SortOrder
    systemicIssuesIdentified?: SortOrder
    managedMunicipalities?: SortOrder
    managedBySuperStateId?: SortOrderInput | SortOrder
    _count?: DepartmentStateAdminCountOrderByAggregateInput
    _avg?: DepartmentStateAdminAvgOrderByAggregateInput
    _max?: DepartmentStateAdminMaxOrderByAggregateInput
    _min?: DepartmentStateAdminMinOrderByAggregateInput
    _sum?: DepartmentStateAdminSumOrderByAggregateInput
  }

  export type DepartmentStateAdminScalarWhereWithAggregatesInput = {
    AND?: DepartmentStateAdminScalarWhereWithAggregatesInput | DepartmentStateAdminScalarWhereWithAggregatesInput[]
    OR?: DepartmentStateAdminScalarWhereWithAggregatesInput[]
    NOT?: DepartmentStateAdminScalarWhereWithAggregatesInput | DepartmentStateAdminScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DepartmentStateAdmin"> | string
    fullName?: StringWithAggregatesFilter<"DepartmentStateAdmin"> | string
    adminId?: StringWithAggregatesFilter<"DepartmentStateAdmin"> | string
    officialEmail?: StringWithAggregatesFilter<"DepartmentStateAdmin"> | string
    password?: StringWithAggregatesFilter<"DepartmentStateAdmin"> | string
    phoneNumber?: StringNullableWithAggregatesFilter<"DepartmentStateAdmin"> | string | null
    department?: StringWithAggregatesFilter<"DepartmentStateAdmin"> | string
    state?: StringWithAggregatesFilter<"DepartmentStateAdmin"> | string
    accessLevel?: StringWithAggregatesFilter<"DepartmentStateAdmin"> | string
    dateOfCreation?: DateTimeWithAggregatesFilter<"DepartmentStateAdmin"> | Date | string
    lastUpdated?: DateTimeWithAggregatesFilter<"DepartmentStateAdmin"> | Date | string
    status?: StringWithAggregatesFilter<"DepartmentStateAdmin"> | string
    lastLogin?: DateTimeNullableWithAggregatesFilter<"DepartmentStateAdmin"> | Date | string | null
    stateResolutionRate?: FloatWithAggregatesFilter<"DepartmentStateAdmin"> | number
    systemicIssuesIdentified?: IntWithAggregatesFilter<"DepartmentStateAdmin"> | number
    managedMunicipalities?: StringNullableListFilter<"DepartmentStateAdmin">
    managedBySuperStateId?: StringNullableWithAggregatesFilter<"DepartmentStateAdmin"> | string | null
  }

  export type SuperStateAdminWhereInput = {
    AND?: SuperStateAdminWhereInput | SuperStateAdminWhereInput[]
    OR?: SuperStateAdminWhereInput[]
    NOT?: SuperStateAdminWhereInput | SuperStateAdminWhereInput[]
    id?: StringFilter<"SuperStateAdmin"> | string
    fullName?: StringFilter<"SuperStateAdmin"> | string
    adminId?: StringFilter<"SuperStateAdmin"> | string
    officialEmail?: StringFilter<"SuperStateAdmin"> | string
    phoneNumber?: StringNullableFilter<"SuperStateAdmin"> | string | null
    password?: StringFilter<"SuperStateAdmin"> | string
    state?: StringFilter<"SuperStateAdmin"> | string
    accessLevel?: StringFilter<"SuperStateAdmin"> | string
    dateOfCreation?: DateTimeFilter<"SuperStateAdmin"> | Date | string
    lastUpdated?: DateTimeFilter<"SuperStateAdmin"> | Date | string
    status?: StringFilter<"SuperStateAdmin"> | string
    lastLogin?: DateTimeNullableFilter<"SuperStateAdmin"> | Date | string | null
    stateResolutionRate?: FloatFilter<"SuperStateAdmin"> | number
    crossDepartmentSuccess?: IntFilter<"SuperStateAdmin"> | number
    managedBySuperAdminId?: StringNullableFilter<"SuperStateAdmin"> | string | null
    managedDepartmentAdmins?: DepartmentStateAdminListRelationFilter
    managedSuperMunicipalAdmins?: SuperMunicipalAdminListRelationFilter
    escalatedComplaints?: ComplaintListRelationFilter
    managedBySuperAdmin?: XOR<SuperAdminNullableScalarRelationFilter, SuperAdminWhereInput> | null
  }

  export type SuperStateAdminOrderByWithRelationInput = {
    id?: SortOrder
    fullName?: SortOrder
    adminId?: SortOrder
    officialEmail?: SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    password?: SortOrder
    state?: SortOrder
    accessLevel?: SortOrder
    dateOfCreation?: SortOrder
    lastUpdated?: SortOrder
    status?: SortOrder
    lastLogin?: SortOrderInput | SortOrder
    stateResolutionRate?: SortOrder
    crossDepartmentSuccess?: SortOrder
    managedBySuperAdminId?: SortOrderInput | SortOrder
    managedDepartmentAdmins?: DepartmentStateAdminOrderByRelationAggregateInput
    managedSuperMunicipalAdmins?: SuperMunicipalAdminOrderByRelationAggregateInput
    escalatedComplaints?: ComplaintOrderByRelationAggregateInput
    managedBySuperAdmin?: SuperAdminOrderByWithRelationInput
  }

  export type SuperStateAdminWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    adminId?: string
    officialEmail?: string
    AND?: SuperStateAdminWhereInput | SuperStateAdminWhereInput[]
    OR?: SuperStateAdminWhereInput[]
    NOT?: SuperStateAdminWhereInput | SuperStateAdminWhereInput[]
    fullName?: StringFilter<"SuperStateAdmin"> | string
    phoneNumber?: StringNullableFilter<"SuperStateAdmin"> | string | null
    password?: StringFilter<"SuperStateAdmin"> | string
    state?: StringFilter<"SuperStateAdmin"> | string
    accessLevel?: StringFilter<"SuperStateAdmin"> | string
    dateOfCreation?: DateTimeFilter<"SuperStateAdmin"> | Date | string
    lastUpdated?: DateTimeFilter<"SuperStateAdmin"> | Date | string
    status?: StringFilter<"SuperStateAdmin"> | string
    lastLogin?: DateTimeNullableFilter<"SuperStateAdmin"> | Date | string | null
    stateResolutionRate?: FloatFilter<"SuperStateAdmin"> | number
    crossDepartmentSuccess?: IntFilter<"SuperStateAdmin"> | number
    managedBySuperAdminId?: StringNullableFilter<"SuperStateAdmin"> | string | null
    managedDepartmentAdmins?: DepartmentStateAdminListRelationFilter
    managedSuperMunicipalAdmins?: SuperMunicipalAdminListRelationFilter
    escalatedComplaints?: ComplaintListRelationFilter
    managedBySuperAdmin?: XOR<SuperAdminNullableScalarRelationFilter, SuperAdminWhereInput> | null
  }, "id" | "adminId" | "officialEmail">

  export type SuperStateAdminOrderByWithAggregationInput = {
    id?: SortOrder
    fullName?: SortOrder
    adminId?: SortOrder
    officialEmail?: SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    password?: SortOrder
    state?: SortOrder
    accessLevel?: SortOrder
    dateOfCreation?: SortOrder
    lastUpdated?: SortOrder
    status?: SortOrder
    lastLogin?: SortOrderInput | SortOrder
    stateResolutionRate?: SortOrder
    crossDepartmentSuccess?: SortOrder
    managedBySuperAdminId?: SortOrderInput | SortOrder
    _count?: SuperStateAdminCountOrderByAggregateInput
    _avg?: SuperStateAdminAvgOrderByAggregateInput
    _max?: SuperStateAdminMaxOrderByAggregateInput
    _min?: SuperStateAdminMinOrderByAggregateInput
    _sum?: SuperStateAdminSumOrderByAggregateInput
  }

  export type SuperStateAdminScalarWhereWithAggregatesInput = {
    AND?: SuperStateAdminScalarWhereWithAggregatesInput | SuperStateAdminScalarWhereWithAggregatesInput[]
    OR?: SuperStateAdminScalarWhereWithAggregatesInput[]
    NOT?: SuperStateAdminScalarWhereWithAggregatesInput | SuperStateAdminScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SuperStateAdmin"> | string
    fullName?: StringWithAggregatesFilter<"SuperStateAdmin"> | string
    adminId?: StringWithAggregatesFilter<"SuperStateAdmin"> | string
    officialEmail?: StringWithAggregatesFilter<"SuperStateAdmin"> | string
    phoneNumber?: StringNullableWithAggregatesFilter<"SuperStateAdmin"> | string | null
    password?: StringWithAggregatesFilter<"SuperStateAdmin"> | string
    state?: StringWithAggregatesFilter<"SuperStateAdmin"> | string
    accessLevel?: StringWithAggregatesFilter<"SuperStateAdmin"> | string
    dateOfCreation?: DateTimeWithAggregatesFilter<"SuperStateAdmin"> | Date | string
    lastUpdated?: DateTimeWithAggregatesFilter<"SuperStateAdmin"> | Date | string
    status?: StringWithAggregatesFilter<"SuperStateAdmin"> | string
    lastLogin?: DateTimeNullableWithAggregatesFilter<"SuperStateAdmin"> | Date | string | null
    stateResolutionRate?: FloatWithAggregatesFilter<"SuperStateAdmin"> | number
    crossDepartmentSuccess?: IntWithAggregatesFilter<"SuperStateAdmin"> | number
    managedBySuperAdminId?: StringNullableWithAggregatesFilter<"SuperStateAdmin"> | string | null
  }

  export type SuperAdminWhereInput = {
    AND?: SuperAdminWhereInput | SuperAdminWhereInput[]
    OR?: SuperAdminWhereInput[]
    NOT?: SuperAdminWhereInput | SuperAdminWhereInput[]
    id?: StringFilter<"SuperAdmin"> | string
    fullName?: StringFilter<"SuperAdmin"> | string
    adminId?: StringFilter<"SuperAdmin"> | string
    officialEmail?: StringFilter<"SuperAdmin"> | string
    phoneNumber?: StringNullableFilter<"SuperAdmin"> | string | null
    password?: StringFilter<"SuperAdmin"> | string
    accessLevel?: StringFilter<"SuperAdmin"> | string
    dateOfCreation?: DateTimeFilter<"SuperAdmin"> | Date | string
    lastUpdated?: DateTimeFilter<"SuperAdmin"> | Date | string
    status?: StringFilter<"SuperAdmin"> | string
    lastLogin?: DateTimeNullableFilter<"SuperAdmin"> | Date | string | null
    managedCategories?: CategoryListRelationFilter
    managedSuperStateAdmins?: SuperStateAdminListRelationFilter
    managedComplaints?: ComplaintListRelationFilter
  }

  export type SuperAdminOrderByWithRelationInput = {
    id?: SortOrder
    fullName?: SortOrder
    adminId?: SortOrder
    officialEmail?: SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    password?: SortOrder
    accessLevel?: SortOrder
    dateOfCreation?: SortOrder
    lastUpdated?: SortOrder
    status?: SortOrder
    lastLogin?: SortOrderInput | SortOrder
    managedCategories?: CategoryOrderByRelationAggregateInput
    managedSuperStateAdmins?: SuperStateAdminOrderByRelationAggregateInput
    managedComplaints?: ComplaintOrderByRelationAggregateInput
  }

  export type SuperAdminWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    adminId?: string
    officialEmail?: string
    AND?: SuperAdminWhereInput | SuperAdminWhereInput[]
    OR?: SuperAdminWhereInput[]
    NOT?: SuperAdminWhereInput | SuperAdminWhereInput[]
    fullName?: StringFilter<"SuperAdmin"> | string
    phoneNumber?: StringNullableFilter<"SuperAdmin"> | string | null
    password?: StringFilter<"SuperAdmin"> | string
    accessLevel?: StringFilter<"SuperAdmin"> | string
    dateOfCreation?: DateTimeFilter<"SuperAdmin"> | Date | string
    lastUpdated?: DateTimeFilter<"SuperAdmin"> | Date | string
    status?: StringFilter<"SuperAdmin"> | string
    lastLogin?: DateTimeNullableFilter<"SuperAdmin"> | Date | string | null
    managedCategories?: CategoryListRelationFilter
    managedSuperStateAdmins?: SuperStateAdminListRelationFilter
    managedComplaints?: ComplaintListRelationFilter
  }, "id" | "adminId" | "officialEmail">

  export type SuperAdminOrderByWithAggregationInput = {
    id?: SortOrder
    fullName?: SortOrder
    adminId?: SortOrder
    officialEmail?: SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    password?: SortOrder
    accessLevel?: SortOrder
    dateOfCreation?: SortOrder
    lastUpdated?: SortOrder
    status?: SortOrder
    lastLogin?: SortOrderInput | SortOrder
    _count?: SuperAdminCountOrderByAggregateInput
    _max?: SuperAdminMaxOrderByAggregateInput
    _min?: SuperAdminMinOrderByAggregateInput
  }

  export type SuperAdminScalarWhereWithAggregatesInput = {
    AND?: SuperAdminScalarWhereWithAggregatesInput | SuperAdminScalarWhereWithAggregatesInput[]
    OR?: SuperAdminScalarWhereWithAggregatesInput[]
    NOT?: SuperAdminScalarWhereWithAggregatesInput | SuperAdminScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SuperAdmin"> | string
    fullName?: StringWithAggregatesFilter<"SuperAdmin"> | string
    adminId?: StringWithAggregatesFilter<"SuperAdmin"> | string
    officialEmail?: StringWithAggregatesFilter<"SuperAdmin"> | string
    phoneNumber?: StringNullableWithAggregatesFilter<"SuperAdmin"> | string | null
    password?: StringWithAggregatesFilter<"SuperAdmin"> | string
    accessLevel?: StringWithAggregatesFilter<"SuperAdmin"> | string
    dateOfCreation?: DateTimeWithAggregatesFilter<"SuperAdmin"> | Date | string
    lastUpdated?: DateTimeWithAggregatesFilter<"SuperAdmin"> | Date | string
    status?: StringWithAggregatesFilter<"SuperAdmin"> | string
    lastLogin?: DateTimeNullableWithAggregatesFilter<"SuperAdmin"> | Date | string | null
  }

  export type CategoryWhereInput = {
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    id?: StringFilter<"Category"> | string
    name?: StringFilter<"Category"> | string
    subCategories?: StringNullableListFilter<"Category">
    learnedSubCategories?: StringNullableListFilter<"Category">
    assignedDepartment?: StringFilter<"Category"> | string
    creationDate?: DateTimeFilter<"Category"> | Date | string
    lastUpdated?: DateTimeFilter<"Category"> | Date | string
    createdBySuperAdminId?: StringNullableFilter<"Category"> | string | null
    managedByDeptStateAdminId?: StringNullableFilter<"Category"> | string | null
    complaints?: ComplaintListRelationFilter
    createdBySuperAdmin?: XOR<SuperAdminNullableScalarRelationFilter, SuperAdminWhereInput> | null
    managedByDeptStateAdmin?: XOR<DepartmentStateAdminNullableScalarRelationFilter, DepartmentStateAdminWhereInput> | null
  }

  export type CategoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    subCategories?: SortOrder
    learnedSubCategories?: SortOrder
    assignedDepartment?: SortOrder
    creationDate?: SortOrder
    lastUpdated?: SortOrder
    createdBySuperAdminId?: SortOrderInput | SortOrder
    managedByDeptStateAdminId?: SortOrderInput | SortOrder
    complaints?: ComplaintOrderByRelationAggregateInput
    createdBySuperAdmin?: SuperAdminOrderByWithRelationInput
    managedByDeptStateAdmin?: DepartmentStateAdminOrderByWithRelationInput
  }

  export type CategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    subCategories?: StringNullableListFilter<"Category">
    learnedSubCategories?: StringNullableListFilter<"Category">
    assignedDepartment?: StringFilter<"Category"> | string
    creationDate?: DateTimeFilter<"Category"> | Date | string
    lastUpdated?: DateTimeFilter<"Category"> | Date | string
    createdBySuperAdminId?: StringNullableFilter<"Category"> | string | null
    managedByDeptStateAdminId?: StringNullableFilter<"Category"> | string | null
    complaints?: ComplaintListRelationFilter
    createdBySuperAdmin?: XOR<SuperAdminNullableScalarRelationFilter, SuperAdminWhereInput> | null
    managedByDeptStateAdmin?: XOR<DepartmentStateAdminNullableScalarRelationFilter, DepartmentStateAdminWhereInput> | null
  }, "id" | "name">

  export type CategoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    subCategories?: SortOrder
    learnedSubCategories?: SortOrder
    assignedDepartment?: SortOrder
    creationDate?: SortOrder
    lastUpdated?: SortOrder
    createdBySuperAdminId?: SortOrderInput | SortOrder
    managedByDeptStateAdminId?: SortOrderInput | SortOrder
    _count?: CategoryCountOrderByAggregateInput
    _max?: CategoryMaxOrderByAggregateInput
    _min?: CategoryMinOrderByAggregateInput
  }

  export type CategoryScalarWhereWithAggregatesInput = {
    AND?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    OR?: CategoryScalarWhereWithAggregatesInput[]
    NOT?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Category"> | string
    name?: StringWithAggregatesFilter<"Category"> | string
    subCategories?: StringNullableListFilter<"Category">
    learnedSubCategories?: StringNullableListFilter<"Category">
    assignedDepartment?: StringWithAggregatesFilter<"Category"> | string
    creationDate?: DateTimeWithAggregatesFilter<"Category"> | Date | string
    lastUpdated?: DateTimeWithAggregatesFilter<"Category"> | Date | string
    createdBySuperAdminId?: StringNullableWithAggregatesFilter<"Category"> | string | null
    managedByDeptStateAdminId?: StringNullableWithAggregatesFilter<"Category"> | string | null
  }

  export type ComplaintWhereInput = {
    AND?: ComplaintWhereInput | ComplaintWhereInput[]
    OR?: ComplaintWhereInput[]
    NOT?: ComplaintWhereInput | ComplaintWhereInput[]
    id?: StringFilter<"Complaint"> | string
    submissionDate?: DateTimeFilter<"Complaint"> | Date | string
    seq?: IntFilter<"Complaint"> | number
    complainantId?: StringFilter<"Complaint"> | string
    categoryId?: StringFilter<"Complaint"> | string
    subCategory?: StringFilter<"Complaint"> | string
    standardizedSubCategory?: StringNullableFilter<"Complaint"> | string | null
    description?: StringFilter<"Complaint"> | string
    urgency?: EnumComplaintUrgencyFilter<"Complaint"> | $Enums.ComplaintUrgency
    attachmentUrl?: StringNullableFilter<"Complaint"> | string | null
    assignedDepartment?: StringFilter<"Complaint"> | string
    status?: EnumComplaintStatusFilter<"Complaint"> | $Enums.ComplaintStatus
    sla?: StringNullableFilter<"Complaint"> | string | null
    upvoteCount?: IntFilter<"Complaint"> | number
    isPublic?: BoolFilter<"Complaint"> | boolean
    escalationLevel?: StringNullableFilter<"Complaint"> | string | null
    dateOfResolution?: DateTimeNullableFilter<"Complaint"> | Date | string | null
    assignedAgentId?: StringNullableFilter<"Complaint"> | string | null
    managedByMunicipalAdminId?: StringNullableFilter<"Complaint"> | string | null
    moderatedByMunicipalAdminId?: StringNullableFilter<"Complaint"> | string | null
    crossDeptIssueSuperMunicipalId?: StringNullableFilter<"Complaint"> | string | null
    escalatedToStateAdminId?: StringNullableFilter<"Complaint"> | string | null
    escalatedToSuperStateAdminId?: StringNullableFilter<"Complaint"> | string | null
    managedBySuperAdminId?: StringNullableFilter<"Complaint"> | string | null
    complainant?: XOR<UserScalarRelationFilter, UserWhereInput>
    category?: XOR<CategoryScalarRelationFilter, CategoryWhereInput>
    location?: XOR<ComplaintLocationNullableScalarRelationFilter, ComplaintLocationWhereInput> | null
    assignedAgent?: XOR<AgentNullableScalarRelationFilter, AgentWhereInput> | null
    coAssignedAgents?: AgentListRelationFilter
    managedByMunicipalAdmin?: XOR<DepartmentMunicipalAdminNullableScalarRelationFilter, DepartmentMunicipalAdminWhereInput> | null
    moderatedByMunicipalAdmin?: XOR<DepartmentMunicipalAdminNullableScalarRelationFilter, DepartmentMunicipalAdminWhereInput> | null
    crossDeptIssueSuperMunicipal?: XOR<SuperMunicipalAdminNullableScalarRelationFilter, SuperMunicipalAdminWhereInput> | null
    escalatedToStateAdmin?: XOR<DepartmentStateAdminNullableScalarRelationFilter, DepartmentStateAdminWhereInput> | null
    escalatedToSuperStateAdmin?: XOR<SuperStateAdminNullableScalarRelationFilter, SuperStateAdminWhereInput> | null
    managedBySuperAdmin?: XOR<SuperAdminNullableScalarRelationFilter, SuperAdminWhereInput> | null
    upvotes?: UpvoteListRelationFilter
    auditLogs?: AuditLogListRelationFilter
  }

  export type ComplaintOrderByWithRelationInput = {
    id?: SortOrder
    submissionDate?: SortOrder
    seq?: SortOrder
    complainantId?: SortOrder
    categoryId?: SortOrder
    subCategory?: SortOrder
    standardizedSubCategory?: SortOrderInput | SortOrder
    description?: SortOrder
    urgency?: SortOrder
    attachmentUrl?: SortOrderInput | SortOrder
    assignedDepartment?: SortOrder
    status?: SortOrder
    sla?: SortOrderInput | SortOrder
    upvoteCount?: SortOrder
    isPublic?: SortOrder
    escalationLevel?: SortOrderInput | SortOrder
    dateOfResolution?: SortOrderInput | SortOrder
    assignedAgentId?: SortOrderInput | SortOrder
    managedByMunicipalAdminId?: SortOrderInput | SortOrder
    moderatedByMunicipalAdminId?: SortOrderInput | SortOrder
    crossDeptIssueSuperMunicipalId?: SortOrderInput | SortOrder
    escalatedToStateAdminId?: SortOrderInput | SortOrder
    escalatedToSuperStateAdminId?: SortOrderInput | SortOrder
    managedBySuperAdminId?: SortOrderInput | SortOrder
    complainant?: UserOrderByWithRelationInput
    category?: CategoryOrderByWithRelationInput
    location?: ComplaintLocationOrderByWithRelationInput
    assignedAgent?: AgentOrderByWithRelationInput
    coAssignedAgents?: AgentOrderByRelationAggregateInput
    managedByMunicipalAdmin?: DepartmentMunicipalAdminOrderByWithRelationInput
    moderatedByMunicipalAdmin?: DepartmentMunicipalAdminOrderByWithRelationInput
    crossDeptIssueSuperMunicipal?: SuperMunicipalAdminOrderByWithRelationInput
    escalatedToStateAdmin?: DepartmentStateAdminOrderByWithRelationInput
    escalatedToSuperStateAdmin?: SuperStateAdminOrderByWithRelationInput
    managedBySuperAdmin?: SuperAdminOrderByWithRelationInput
    upvotes?: UpvoteOrderByRelationAggregateInput
    auditLogs?: AuditLogOrderByRelationAggregateInput
  }

  export type ComplaintWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    seq?: number
    AND?: ComplaintWhereInput | ComplaintWhereInput[]
    OR?: ComplaintWhereInput[]
    NOT?: ComplaintWhereInput | ComplaintWhereInput[]
    submissionDate?: DateTimeFilter<"Complaint"> | Date | string
    complainantId?: StringFilter<"Complaint"> | string
    categoryId?: StringFilter<"Complaint"> | string
    subCategory?: StringFilter<"Complaint"> | string
    standardizedSubCategory?: StringNullableFilter<"Complaint"> | string | null
    description?: StringFilter<"Complaint"> | string
    urgency?: EnumComplaintUrgencyFilter<"Complaint"> | $Enums.ComplaintUrgency
    attachmentUrl?: StringNullableFilter<"Complaint"> | string | null
    assignedDepartment?: StringFilter<"Complaint"> | string
    status?: EnumComplaintStatusFilter<"Complaint"> | $Enums.ComplaintStatus
    sla?: StringNullableFilter<"Complaint"> | string | null
    upvoteCount?: IntFilter<"Complaint"> | number
    isPublic?: BoolFilter<"Complaint"> | boolean
    escalationLevel?: StringNullableFilter<"Complaint"> | string | null
    dateOfResolution?: DateTimeNullableFilter<"Complaint"> | Date | string | null
    assignedAgentId?: StringNullableFilter<"Complaint"> | string | null
    managedByMunicipalAdminId?: StringNullableFilter<"Complaint"> | string | null
    moderatedByMunicipalAdminId?: StringNullableFilter<"Complaint"> | string | null
    crossDeptIssueSuperMunicipalId?: StringNullableFilter<"Complaint"> | string | null
    escalatedToStateAdminId?: StringNullableFilter<"Complaint"> | string | null
    escalatedToSuperStateAdminId?: StringNullableFilter<"Complaint"> | string | null
    managedBySuperAdminId?: StringNullableFilter<"Complaint"> | string | null
    complainant?: XOR<UserScalarRelationFilter, UserWhereInput>
    category?: XOR<CategoryScalarRelationFilter, CategoryWhereInput>
    location?: XOR<ComplaintLocationNullableScalarRelationFilter, ComplaintLocationWhereInput> | null
    assignedAgent?: XOR<AgentNullableScalarRelationFilter, AgentWhereInput> | null
    coAssignedAgents?: AgentListRelationFilter
    managedByMunicipalAdmin?: XOR<DepartmentMunicipalAdminNullableScalarRelationFilter, DepartmentMunicipalAdminWhereInput> | null
    moderatedByMunicipalAdmin?: XOR<DepartmentMunicipalAdminNullableScalarRelationFilter, DepartmentMunicipalAdminWhereInput> | null
    crossDeptIssueSuperMunicipal?: XOR<SuperMunicipalAdminNullableScalarRelationFilter, SuperMunicipalAdminWhereInput> | null
    escalatedToStateAdmin?: XOR<DepartmentStateAdminNullableScalarRelationFilter, DepartmentStateAdminWhereInput> | null
    escalatedToSuperStateAdmin?: XOR<SuperStateAdminNullableScalarRelationFilter, SuperStateAdminWhereInput> | null
    managedBySuperAdmin?: XOR<SuperAdminNullableScalarRelationFilter, SuperAdminWhereInput> | null
    upvotes?: UpvoteListRelationFilter
    auditLogs?: AuditLogListRelationFilter
  }, "id" | "seq">

  export type ComplaintOrderByWithAggregationInput = {
    id?: SortOrder
    submissionDate?: SortOrder
    seq?: SortOrder
    complainantId?: SortOrder
    categoryId?: SortOrder
    subCategory?: SortOrder
    standardizedSubCategory?: SortOrderInput | SortOrder
    description?: SortOrder
    urgency?: SortOrder
    attachmentUrl?: SortOrderInput | SortOrder
    assignedDepartment?: SortOrder
    status?: SortOrder
    sla?: SortOrderInput | SortOrder
    upvoteCount?: SortOrder
    isPublic?: SortOrder
    escalationLevel?: SortOrderInput | SortOrder
    dateOfResolution?: SortOrderInput | SortOrder
    assignedAgentId?: SortOrderInput | SortOrder
    managedByMunicipalAdminId?: SortOrderInput | SortOrder
    moderatedByMunicipalAdminId?: SortOrderInput | SortOrder
    crossDeptIssueSuperMunicipalId?: SortOrderInput | SortOrder
    escalatedToStateAdminId?: SortOrderInput | SortOrder
    escalatedToSuperStateAdminId?: SortOrderInput | SortOrder
    managedBySuperAdminId?: SortOrderInput | SortOrder
    _count?: ComplaintCountOrderByAggregateInput
    _avg?: ComplaintAvgOrderByAggregateInput
    _max?: ComplaintMaxOrderByAggregateInput
    _min?: ComplaintMinOrderByAggregateInput
    _sum?: ComplaintSumOrderByAggregateInput
  }

  export type ComplaintScalarWhereWithAggregatesInput = {
    AND?: ComplaintScalarWhereWithAggregatesInput | ComplaintScalarWhereWithAggregatesInput[]
    OR?: ComplaintScalarWhereWithAggregatesInput[]
    NOT?: ComplaintScalarWhereWithAggregatesInput | ComplaintScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Complaint"> | string
    submissionDate?: DateTimeWithAggregatesFilter<"Complaint"> | Date | string
    seq?: IntWithAggregatesFilter<"Complaint"> | number
    complainantId?: StringWithAggregatesFilter<"Complaint"> | string
    categoryId?: StringWithAggregatesFilter<"Complaint"> | string
    subCategory?: StringWithAggregatesFilter<"Complaint"> | string
    standardizedSubCategory?: StringNullableWithAggregatesFilter<"Complaint"> | string | null
    description?: StringWithAggregatesFilter<"Complaint"> | string
    urgency?: EnumComplaintUrgencyWithAggregatesFilter<"Complaint"> | $Enums.ComplaintUrgency
    attachmentUrl?: StringNullableWithAggregatesFilter<"Complaint"> | string | null
    assignedDepartment?: StringWithAggregatesFilter<"Complaint"> | string
    status?: EnumComplaintStatusWithAggregatesFilter<"Complaint"> | $Enums.ComplaintStatus
    sla?: StringNullableWithAggregatesFilter<"Complaint"> | string | null
    upvoteCount?: IntWithAggregatesFilter<"Complaint"> | number
    isPublic?: BoolWithAggregatesFilter<"Complaint"> | boolean
    escalationLevel?: StringNullableWithAggregatesFilter<"Complaint"> | string | null
    dateOfResolution?: DateTimeNullableWithAggregatesFilter<"Complaint"> | Date | string | null
    assignedAgentId?: StringNullableWithAggregatesFilter<"Complaint"> | string | null
    managedByMunicipalAdminId?: StringNullableWithAggregatesFilter<"Complaint"> | string | null
    moderatedByMunicipalAdminId?: StringNullableWithAggregatesFilter<"Complaint"> | string | null
    crossDeptIssueSuperMunicipalId?: StringNullableWithAggregatesFilter<"Complaint"> | string | null
    escalatedToStateAdminId?: StringNullableWithAggregatesFilter<"Complaint"> | string | null
    escalatedToSuperStateAdminId?: StringNullableWithAggregatesFilter<"Complaint"> | string | null
    managedBySuperAdminId?: StringNullableWithAggregatesFilter<"Complaint"> | string | null
  }

  export type ComplaintLocationWhereInput = {
    AND?: ComplaintLocationWhereInput | ComplaintLocationWhereInput[]
    OR?: ComplaintLocationWhereInput[]
    NOT?: ComplaintLocationWhereInput | ComplaintLocationWhereInput[]
    id?: StringFilter<"ComplaintLocation"> | string
    complaintId?: StringFilter<"ComplaintLocation"> | string
    pin?: StringFilter<"ComplaintLocation"> | string
    district?: StringFilter<"ComplaintLocation"> | string
    city?: StringFilter<"ComplaintLocation"> | string
    locality?: StringFilter<"ComplaintLocation"> | string
    street?: StringNullableFilter<"ComplaintLocation"> | string | null
    latitude?: FloatNullableFilter<"ComplaintLocation"> | number | null
    longitude?: FloatNullableFilter<"ComplaintLocation"> | number | null
    complaint?: XOR<ComplaintScalarRelationFilter, ComplaintWhereInput>
  }

  export type ComplaintLocationOrderByWithRelationInput = {
    id?: SortOrder
    complaintId?: SortOrder
    pin?: SortOrder
    district?: SortOrder
    city?: SortOrder
    locality?: SortOrder
    street?: SortOrderInput | SortOrder
    latitude?: SortOrderInput | SortOrder
    longitude?: SortOrderInput | SortOrder
    complaint?: ComplaintOrderByWithRelationInput
  }

  export type ComplaintLocationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    complaintId?: string
    AND?: ComplaintLocationWhereInput | ComplaintLocationWhereInput[]
    OR?: ComplaintLocationWhereInput[]
    NOT?: ComplaintLocationWhereInput | ComplaintLocationWhereInput[]
    pin?: StringFilter<"ComplaintLocation"> | string
    district?: StringFilter<"ComplaintLocation"> | string
    city?: StringFilter<"ComplaintLocation"> | string
    locality?: StringFilter<"ComplaintLocation"> | string
    street?: StringNullableFilter<"ComplaintLocation"> | string | null
    latitude?: FloatNullableFilter<"ComplaintLocation"> | number | null
    longitude?: FloatNullableFilter<"ComplaintLocation"> | number | null
    complaint?: XOR<ComplaintScalarRelationFilter, ComplaintWhereInput>
  }, "id" | "complaintId">

  export type ComplaintLocationOrderByWithAggregationInput = {
    id?: SortOrder
    complaintId?: SortOrder
    pin?: SortOrder
    district?: SortOrder
    city?: SortOrder
    locality?: SortOrder
    street?: SortOrderInput | SortOrder
    latitude?: SortOrderInput | SortOrder
    longitude?: SortOrderInput | SortOrder
    _count?: ComplaintLocationCountOrderByAggregateInput
    _avg?: ComplaintLocationAvgOrderByAggregateInput
    _max?: ComplaintLocationMaxOrderByAggregateInput
    _min?: ComplaintLocationMinOrderByAggregateInput
    _sum?: ComplaintLocationSumOrderByAggregateInput
  }

  export type ComplaintLocationScalarWhereWithAggregatesInput = {
    AND?: ComplaintLocationScalarWhereWithAggregatesInput | ComplaintLocationScalarWhereWithAggregatesInput[]
    OR?: ComplaintLocationScalarWhereWithAggregatesInput[]
    NOT?: ComplaintLocationScalarWhereWithAggregatesInput | ComplaintLocationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ComplaintLocation"> | string
    complaintId?: StringWithAggregatesFilter<"ComplaintLocation"> | string
    pin?: StringWithAggregatesFilter<"ComplaintLocation"> | string
    district?: StringWithAggregatesFilter<"ComplaintLocation"> | string
    city?: StringWithAggregatesFilter<"ComplaintLocation"> | string
    locality?: StringWithAggregatesFilter<"ComplaintLocation"> | string
    street?: StringNullableWithAggregatesFilter<"ComplaintLocation"> | string | null
    latitude?: FloatNullableWithAggregatesFilter<"ComplaintLocation"> | number | null
    longitude?: FloatNullableWithAggregatesFilter<"ComplaintLocation"> | number | null
  }

  export type UpvoteWhereInput = {
    AND?: UpvoteWhereInput | UpvoteWhereInput[]
    OR?: UpvoteWhereInput[]
    NOT?: UpvoteWhereInput | UpvoteWhereInput[]
    id?: StringFilter<"Upvote"> | string
    userId?: StringFilter<"Upvote"> | string
    complaintId?: StringFilter<"Upvote"> | string
    timestamp?: DateTimeFilter<"Upvote"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    complaint?: XOR<ComplaintScalarRelationFilter, ComplaintWhereInput>
  }

  export type UpvoteOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    complaintId?: SortOrder
    timestamp?: SortOrder
    user?: UserOrderByWithRelationInput
    complaint?: ComplaintOrderByWithRelationInput
  }

  export type UpvoteWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_complaintId?: UpvoteUserIdComplaintIdCompoundUniqueInput
    AND?: UpvoteWhereInput | UpvoteWhereInput[]
    OR?: UpvoteWhereInput[]
    NOT?: UpvoteWhereInput | UpvoteWhereInput[]
    userId?: StringFilter<"Upvote"> | string
    complaintId?: StringFilter<"Upvote"> | string
    timestamp?: DateTimeFilter<"Upvote"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    complaint?: XOR<ComplaintScalarRelationFilter, ComplaintWhereInput>
  }, "id" | "userId_complaintId">

  export type UpvoteOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    complaintId?: SortOrder
    timestamp?: SortOrder
    _count?: UpvoteCountOrderByAggregateInput
    _max?: UpvoteMaxOrderByAggregateInput
    _min?: UpvoteMinOrderByAggregateInput
  }

  export type UpvoteScalarWhereWithAggregatesInput = {
    AND?: UpvoteScalarWhereWithAggregatesInput | UpvoteScalarWhereWithAggregatesInput[]
    OR?: UpvoteScalarWhereWithAggregatesInput[]
    NOT?: UpvoteScalarWhereWithAggregatesInput | UpvoteScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Upvote"> | string
    userId?: StringWithAggregatesFilter<"Upvote"> | string
    complaintId?: StringWithAggregatesFilter<"Upvote"> | string
    timestamp?: DateTimeWithAggregatesFilter<"Upvote"> | Date | string
  }

  export type NewsUpdateWhereInput = {
    AND?: NewsUpdateWhereInput | NewsUpdateWhereInput[]
    OR?: NewsUpdateWhereInput[]
    NOT?: NewsUpdateWhereInput | NewsUpdateWhereInput[]
    id?: StringFilter<"NewsUpdate"> | string
    title?: StringFilter<"NewsUpdate"> | string
    content?: StringFilter<"NewsUpdate"> | string
    date?: DateTimeFilter<"NewsUpdate"> | Date | string
    createdById?: StringFilter<"NewsUpdate"> | string
    createdBy?: XOR<DepartmentMunicipalAdminScalarRelationFilter, DepartmentMunicipalAdminWhereInput>
  }

  export type NewsUpdateOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    date?: SortOrder
    createdById?: SortOrder
    createdBy?: DepartmentMunicipalAdminOrderByWithRelationInput
  }

  export type NewsUpdateWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: NewsUpdateWhereInput | NewsUpdateWhereInput[]
    OR?: NewsUpdateWhereInput[]
    NOT?: NewsUpdateWhereInput | NewsUpdateWhereInput[]
    title?: StringFilter<"NewsUpdate"> | string
    content?: StringFilter<"NewsUpdate"> | string
    date?: DateTimeFilter<"NewsUpdate"> | Date | string
    createdById?: StringFilter<"NewsUpdate"> | string
    createdBy?: XOR<DepartmentMunicipalAdminScalarRelationFilter, DepartmentMunicipalAdminWhereInput>
  }, "id">

  export type NewsUpdateOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    date?: SortOrder
    createdById?: SortOrder
    _count?: NewsUpdateCountOrderByAggregateInput
    _max?: NewsUpdateMaxOrderByAggregateInput
    _min?: NewsUpdateMinOrderByAggregateInput
  }

  export type NewsUpdateScalarWhereWithAggregatesInput = {
    AND?: NewsUpdateScalarWhereWithAggregatesInput | NewsUpdateScalarWhereWithAggregatesInput[]
    OR?: NewsUpdateScalarWhereWithAggregatesInput[]
    NOT?: NewsUpdateScalarWhereWithAggregatesInput | NewsUpdateScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"NewsUpdate"> | string
    title?: StringWithAggregatesFilter<"NewsUpdate"> | string
    content?: StringWithAggregatesFilter<"NewsUpdate"> | string
    date?: DateTimeWithAggregatesFilter<"NewsUpdate"> | Date | string
    createdById?: StringWithAggregatesFilter<"NewsUpdate"> | string
  }

  export type AuditLogWhereInput = {
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    id?: StringFilter<"AuditLog"> | string
    action?: StringFilter<"AuditLog"> | string
    userId?: StringFilter<"AuditLog"> | string
    complaintId?: StringNullableFilter<"AuditLog"> | string | null
    timestamp?: DateTimeFilter<"AuditLog"> | Date | string
    details?: StringNullableFilter<"AuditLog"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    complaint?: XOR<ComplaintNullableScalarRelationFilter, ComplaintWhereInput> | null
  }

  export type AuditLogOrderByWithRelationInput = {
    id?: SortOrder
    action?: SortOrder
    userId?: SortOrder
    complaintId?: SortOrderInput | SortOrder
    timestamp?: SortOrder
    details?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    complaint?: ComplaintOrderByWithRelationInput
  }

  export type AuditLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    action?: StringFilter<"AuditLog"> | string
    userId?: StringFilter<"AuditLog"> | string
    complaintId?: StringNullableFilter<"AuditLog"> | string | null
    timestamp?: DateTimeFilter<"AuditLog"> | Date | string
    details?: StringNullableFilter<"AuditLog"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    complaint?: XOR<ComplaintNullableScalarRelationFilter, ComplaintWhereInput> | null
  }, "id">

  export type AuditLogOrderByWithAggregationInput = {
    id?: SortOrder
    action?: SortOrder
    userId?: SortOrder
    complaintId?: SortOrderInput | SortOrder
    timestamp?: SortOrder
    details?: SortOrderInput | SortOrder
    _count?: AuditLogCountOrderByAggregateInput
    _max?: AuditLogMaxOrderByAggregateInput
    _min?: AuditLogMinOrderByAggregateInput
  }

  export type AuditLogScalarWhereWithAggregatesInput = {
    AND?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    OR?: AuditLogScalarWhereWithAggregatesInput[]
    NOT?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AuditLog"> | string
    action?: StringWithAggregatesFilter<"AuditLog"> | string
    userId?: StringWithAggregatesFilter<"AuditLog"> | string
    complaintId?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    timestamp?: DateTimeWithAggregatesFilter<"AuditLog"> | Date | string
    details?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
  }

  export type RegionalWorkflowWhereInput = {
    AND?: RegionalWorkflowWhereInput | RegionalWorkflowWhereInput[]
    OR?: RegionalWorkflowWhereInput[]
    NOT?: RegionalWorkflowWhereInput | RegionalWorkflowWhereInput[]
    id?: StringFilter<"RegionalWorkflow"> | string
    state?: StringFilter<"RegionalWorkflow"> | string
    municipality?: StringNullableFilter<"RegionalWorkflow"> | string | null
    category?: StringFilter<"RegionalWorkflow"> | string
    sla?: StringFilter<"RegionalWorkflow"> | string
    createdById?: StringFilter<"RegionalWorkflow"> | string
    createdBy?: XOR<DepartmentStateAdminScalarRelationFilter, DepartmentStateAdminWhereInput>
  }

  export type RegionalWorkflowOrderByWithRelationInput = {
    id?: SortOrder
    state?: SortOrder
    municipality?: SortOrderInput | SortOrder
    category?: SortOrder
    sla?: SortOrder
    createdById?: SortOrder
    createdBy?: DepartmentStateAdminOrderByWithRelationInput
  }

  export type RegionalWorkflowWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RegionalWorkflowWhereInput | RegionalWorkflowWhereInput[]
    OR?: RegionalWorkflowWhereInput[]
    NOT?: RegionalWorkflowWhereInput | RegionalWorkflowWhereInput[]
    state?: StringFilter<"RegionalWorkflow"> | string
    municipality?: StringNullableFilter<"RegionalWorkflow"> | string | null
    category?: StringFilter<"RegionalWorkflow"> | string
    sla?: StringFilter<"RegionalWorkflow"> | string
    createdById?: StringFilter<"RegionalWorkflow"> | string
    createdBy?: XOR<DepartmentStateAdminScalarRelationFilter, DepartmentStateAdminWhereInput>
  }, "id">

  export type RegionalWorkflowOrderByWithAggregationInput = {
    id?: SortOrder
    state?: SortOrder
    municipality?: SortOrderInput | SortOrder
    category?: SortOrder
    sla?: SortOrder
    createdById?: SortOrder
    _count?: RegionalWorkflowCountOrderByAggregateInput
    _max?: RegionalWorkflowMaxOrderByAggregateInput
    _min?: RegionalWorkflowMinOrderByAggregateInput
  }

  export type RegionalWorkflowScalarWhereWithAggregatesInput = {
    AND?: RegionalWorkflowScalarWhereWithAggregatesInput | RegionalWorkflowScalarWhereWithAggregatesInput[]
    OR?: RegionalWorkflowScalarWhereWithAggregatesInput[]
    NOT?: RegionalWorkflowScalarWhereWithAggregatesInput | RegionalWorkflowScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"RegionalWorkflow"> | string
    state?: StringWithAggregatesFilter<"RegionalWorkflow"> | string
    municipality?: StringNullableWithAggregatesFilter<"RegionalWorkflow"> | string | null
    category?: StringWithAggregatesFilter<"RegionalWorkflow"> | string
    sla?: StringWithAggregatesFilter<"RegionalWorkflow"> | string
    createdById?: StringWithAggregatesFilter<"RegionalWorkflow"> | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    name: string
    phoneNumber: string
    dateOfBirth: Date | string
    password: string
    aadhaarId: string
    preferredLanguage?: string
    disability?: string | null
    consentDataCollection?: boolean
    dateOfCreation?: Date | string
    lastUpdated?: Date | string
    status?: string
    location?: UserLocationCreateNestedOneWithoutUserInput
    complaints?: ComplaintCreateNestedManyWithoutComplainantInput
    upvotes?: UpvoteCreateNestedManyWithoutUserInput
    auditLogsCreated?: AuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    name: string
    phoneNumber: string
    dateOfBirth: Date | string
    password: string
    aadhaarId: string
    preferredLanguage?: string
    disability?: string | null
    consentDataCollection?: boolean
    dateOfCreation?: Date | string
    lastUpdated?: Date | string
    status?: string
    location?: UserLocationUncheckedCreateNestedOneWithoutUserInput
    complaints?: ComplaintUncheckedCreateNestedManyWithoutComplainantInput
    upvotes?: UpvoteUncheckedCreateNestedManyWithoutUserInput
    auditLogsCreated?: AuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
    aadhaarId?: StringFieldUpdateOperationsInput | string
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    disability?: NullableStringFieldUpdateOperationsInput | string | null
    consentDataCollection?: BoolFieldUpdateOperationsInput | boolean
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    location?: UserLocationUpdateOneWithoutUserNestedInput
    complaints?: ComplaintUpdateManyWithoutComplainantNestedInput
    upvotes?: UpvoteUpdateManyWithoutUserNestedInput
    auditLogsCreated?: AuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
    aadhaarId?: StringFieldUpdateOperationsInput | string
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    disability?: NullableStringFieldUpdateOperationsInput | string | null
    consentDataCollection?: BoolFieldUpdateOperationsInput | boolean
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    location?: UserLocationUncheckedUpdateOneWithoutUserNestedInput
    complaints?: ComplaintUncheckedUpdateManyWithoutComplainantNestedInput
    upvotes?: UpvoteUncheckedUpdateManyWithoutUserNestedInput
    auditLogsCreated?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    name: string
    phoneNumber: string
    dateOfBirth: Date | string
    password: string
    aadhaarId: string
    preferredLanguage?: string
    disability?: string | null
    consentDataCollection?: boolean
    dateOfCreation?: Date | string
    lastUpdated?: Date | string
    status?: string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
    aadhaarId?: StringFieldUpdateOperationsInput | string
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    disability?: NullableStringFieldUpdateOperationsInput | string | null
    consentDataCollection?: BoolFieldUpdateOperationsInput | boolean
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
    aadhaarId?: StringFieldUpdateOperationsInput | string
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    disability?: NullableStringFieldUpdateOperationsInput | string | null
    consentDataCollection?: BoolFieldUpdateOperationsInput | boolean
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type UserLocationCreateInput = {
    id?: string
    pin: string
    district: string
    city: string
    locality: string
    street: string
    municipal: string
    user: UserCreateNestedOneWithoutLocationInput
  }

  export type UserLocationUncheckedCreateInput = {
    id?: string
    userId: string
    pin: string
    district: string
    city: string
    locality: string
    street: string
    municipal: string
  }

  export type UserLocationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    pin?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    locality?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    municipal?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutLocationNestedInput
  }

  export type UserLocationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    pin?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    locality?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    municipal?: StringFieldUpdateOperationsInput | string
  }

  export type UserLocationCreateManyInput = {
    id?: string
    userId: string
    pin: string
    district: string
    city: string
    locality: string
    street: string
    municipal: string
  }

  export type UserLocationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    pin?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    locality?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    municipal?: StringFieldUpdateOperationsInput | string
  }

  export type UserLocationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    pin?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    locality?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    municipal?: StringFieldUpdateOperationsInput | string
  }

  export type AgentCreateInput = {
    id?: string
    email: string
    fullName: string
    employeeId: string
    password: string
    phoneNumber: string
    officialEmail: string
    department: string
    municipality: string
    autonomyLevel: string
    accessLevel: string
    workloadLimit?: number
    currentWorkload?: number
    availabilityStatus?: string
    dateOfCreation?: Date | string
    lastUpdated?: Date | string
    status?: string
    lastLogin?: Date | string | null
    resolutionRate?: number
    avgResolutionTime?: string | null
    collaborationMetric?: number
    assignedComplaints?: ComplaintCreateNestedManyWithoutAssignedAgentInput
    coAssignedComplaints?: ComplaintCreateNestedManyWithoutCoAssignedAgentsInput
    managedByMunicipal?: DepartmentMunicipalAdminCreateNestedOneWithoutManagedAgentsInput
  }

  export type AgentUncheckedCreateInput = {
    id?: string
    email: string
    fullName: string
    employeeId: string
    password: string
    phoneNumber: string
    officialEmail: string
    department: string
    municipality: string
    autonomyLevel: string
    accessLevel: string
    workloadLimit?: number
    currentWorkload?: number
    availabilityStatus?: string
    dateOfCreation?: Date | string
    lastUpdated?: Date | string
    status?: string
    lastLogin?: Date | string | null
    resolutionRate?: number
    avgResolutionTime?: string | null
    collaborationMetric?: number
    managedByMunicipalId?: string | null
    assignedComplaints?: ComplaintUncheckedCreateNestedManyWithoutAssignedAgentInput
    coAssignedComplaints?: ComplaintUncheckedCreateNestedManyWithoutCoAssignedAgentsInput
  }

  export type AgentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    officialEmail?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    municipality?: StringFieldUpdateOperationsInput | string
    autonomyLevel?: StringFieldUpdateOperationsInput | string
    accessLevel?: StringFieldUpdateOperationsInput | string
    workloadLimit?: IntFieldUpdateOperationsInput | number
    currentWorkload?: IntFieldUpdateOperationsInput | number
    availabilityStatus?: StringFieldUpdateOperationsInput | string
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolutionRate?: FloatFieldUpdateOperationsInput | number
    avgResolutionTime?: NullableStringFieldUpdateOperationsInput | string | null
    collaborationMetric?: IntFieldUpdateOperationsInput | number
    assignedComplaints?: ComplaintUpdateManyWithoutAssignedAgentNestedInput
    coAssignedComplaints?: ComplaintUpdateManyWithoutCoAssignedAgentsNestedInput
    managedByMunicipal?: DepartmentMunicipalAdminUpdateOneWithoutManagedAgentsNestedInput
  }

  export type AgentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    officialEmail?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    municipality?: StringFieldUpdateOperationsInput | string
    autonomyLevel?: StringFieldUpdateOperationsInput | string
    accessLevel?: StringFieldUpdateOperationsInput | string
    workloadLimit?: IntFieldUpdateOperationsInput | number
    currentWorkload?: IntFieldUpdateOperationsInput | number
    availabilityStatus?: StringFieldUpdateOperationsInput | string
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolutionRate?: FloatFieldUpdateOperationsInput | number
    avgResolutionTime?: NullableStringFieldUpdateOperationsInput | string | null
    collaborationMetric?: IntFieldUpdateOperationsInput | number
    managedByMunicipalId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedComplaints?: ComplaintUncheckedUpdateManyWithoutAssignedAgentNestedInput
    coAssignedComplaints?: ComplaintUncheckedUpdateManyWithoutCoAssignedAgentsNestedInput
  }

  export type AgentCreateManyInput = {
    id?: string
    email: string
    fullName: string
    employeeId: string
    password: string
    phoneNumber: string
    officialEmail: string
    department: string
    municipality: string
    autonomyLevel: string
    accessLevel: string
    workloadLimit?: number
    currentWorkload?: number
    availabilityStatus?: string
    dateOfCreation?: Date | string
    lastUpdated?: Date | string
    status?: string
    lastLogin?: Date | string | null
    resolutionRate?: number
    avgResolutionTime?: string | null
    collaborationMetric?: number
    managedByMunicipalId?: string | null
  }

  export type AgentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    officialEmail?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    municipality?: StringFieldUpdateOperationsInput | string
    autonomyLevel?: StringFieldUpdateOperationsInput | string
    accessLevel?: StringFieldUpdateOperationsInput | string
    workloadLimit?: IntFieldUpdateOperationsInput | number
    currentWorkload?: IntFieldUpdateOperationsInput | number
    availabilityStatus?: StringFieldUpdateOperationsInput | string
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolutionRate?: FloatFieldUpdateOperationsInput | number
    avgResolutionTime?: NullableStringFieldUpdateOperationsInput | string | null
    collaborationMetric?: IntFieldUpdateOperationsInput | number
  }

  export type AgentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    officialEmail?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    municipality?: StringFieldUpdateOperationsInput | string
    autonomyLevel?: StringFieldUpdateOperationsInput | string
    accessLevel?: StringFieldUpdateOperationsInput | string
    workloadLimit?: IntFieldUpdateOperationsInput | number
    currentWorkload?: IntFieldUpdateOperationsInput | number
    availabilityStatus?: StringFieldUpdateOperationsInput | string
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolutionRate?: FloatFieldUpdateOperationsInput | number
    avgResolutionTime?: NullableStringFieldUpdateOperationsInput | string | null
    collaborationMetric?: IntFieldUpdateOperationsInput | number
    managedByMunicipalId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DepartmentMunicipalAdminCreateInput = {
    id?: string
    fullName: string
    adminId: string
    officialEmail: string
    phoneNumber: string
    password: string
    department: string
    municipality: string
    accessLevel: string
    dateOfCreation?: Date | string
    lastUpdated?: Date | string
    status?: string
    lastLogin?: Date | string | null
    resolutionRate?: number
    slaComplianceRate?: number | null
    escalationCount?: number
    managedAgents?: AgentCreateNestedManyWithoutManagedByMunicipalInput
    managedComplaints?: ComplaintCreateNestedManyWithoutManagedByMunicipalAdminInput
    communityModeration?: ComplaintCreateNestedManyWithoutModeratedByMunicipalAdminInput
    newsUpdates?: NewsUpdateCreateNestedManyWithoutCreatedByInput
    managedByStateAdmin?: DepartmentStateAdminCreateNestedOneWithoutManagedMunicipalAdminsInput
    managedBySuperMunicipal?: SuperMunicipalAdminCreateNestedOneWithoutManagedDepartmentAdminsInput
  }

  export type DepartmentMunicipalAdminUncheckedCreateInput = {
    id?: string
    fullName: string
    adminId: string
    officialEmail: string
    phoneNumber: string
    password: string
    department: string
    municipality: string
    accessLevel: string
    dateOfCreation?: Date | string
    lastUpdated?: Date | string
    status?: string
    lastLogin?: Date | string | null
    resolutionRate?: number
    slaComplianceRate?: number | null
    escalationCount?: number
    managedByStateAdminId?: string | null
    managedBySuperMunicipalId?: string | null
    managedAgents?: AgentUncheckedCreateNestedManyWithoutManagedByMunicipalInput
    managedComplaints?: ComplaintUncheckedCreateNestedManyWithoutManagedByMunicipalAdminInput
    communityModeration?: ComplaintUncheckedCreateNestedManyWithoutModeratedByMunicipalAdminInput
    newsUpdates?: NewsUpdateUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type DepartmentMunicipalAdminUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    officialEmail?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    municipality?: StringFieldUpdateOperationsInput | string
    accessLevel?: StringFieldUpdateOperationsInput | string
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolutionRate?: FloatFieldUpdateOperationsInput | number
    slaComplianceRate?: NullableFloatFieldUpdateOperationsInput | number | null
    escalationCount?: IntFieldUpdateOperationsInput | number
    managedAgents?: AgentUpdateManyWithoutManagedByMunicipalNestedInput
    managedComplaints?: ComplaintUpdateManyWithoutManagedByMunicipalAdminNestedInput
    communityModeration?: ComplaintUpdateManyWithoutModeratedByMunicipalAdminNestedInput
    newsUpdates?: NewsUpdateUpdateManyWithoutCreatedByNestedInput
    managedByStateAdmin?: DepartmentStateAdminUpdateOneWithoutManagedMunicipalAdminsNestedInput
    managedBySuperMunicipal?: SuperMunicipalAdminUpdateOneWithoutManagedDepartmentAdminsNestedInput
  }

  export type DepartmentMunicipalAdminUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    officialEmail?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    municipality?: StringFieldUpdateOperationsInput | string
    accessLevel?: StringFieldUpdateOperationsInput | string
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolutionRate?: FloatFieldUpdateOperationsInput | number
    slaComplianceRate?: NullableFloatFieldUpdateOperationsInput | number | null
    escalationCount?: IntFieldUpdateOperationsInput | number
    managedByStateAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    managedBySuperMunicipalId?: NullableStringFieldUpdateOperationsInput | string | null
    managedAgents?: AgentUncheckedUpdateManyWithoutManagedByMunicipalNestedInput
    managedComplaints?: ComplaintUncheckedUpdateManyWithoutManagedByMunicipalAdminNestedInput
    communityModeration?: ComplaintUncheckedUpdateManyWithoutModeratedByMunicipalAdminNestedInput
    newsUpdates?: NewsUpdateUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type DepartmentMunicipalAdminCreateManyInput = {
    id?: string
    fullName: string
    adminId: string
    officialEmail: string
    phoneNumber: string
    password: string
    department: string
    municipality: string
    accessLevel: string
    dateOfCreation?: Date | string
    lastUpdated?: Date | string
    status?: string
    lastLogin?: Date | string | null
    resolutionRate?: number
    slaComplianceRate?: number | null
    escalationCount?: number
    managedByStateAdminId?: string | null
    managedBySuperMunicipalId?: string | null
  }

  export type DepartmentMunicipalAdminUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    officialEmail?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    municipality?: StringFieldUpdateOperationsInput | string
    accessLevel?: StringFieldUpdateOperationsInput | string
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolutionRate?: FloatFieldUpdateOperationsInput | number
    slaComplianceRate?: NullableFloatFieldUpdateOperationsInput | number | null
    escalationCount?: IntFieldUpdateOperationsInput | number
  }

  export type DepartmentMunicipalAdminUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    officialEmail?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    municipality?: StringFieldUpdateOperationsInput | string
    accessLevel?: StringFieldUpdateOperationsInput | string
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolutionRate?: FloatFieldUpdateOperationsInput | number
    slaComplianceRate?: NullableFloatFieldUpdateOperationsInput | number | null
    escalationCount?: IntFieldUpdateOperationsInput | number
    managedByStateAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    managedBySuperMunicipalId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SuperMunicipalAdminCreateInput = {
    id?: string
    fullName: string
    adminId: string
    officialEmail: string
    password: string
    phoneNumber?: string | null
    municipality: string
    accessLevel: string
    dateOfCreation?: Date | string
    lastUpdated?: Date | string
    status?: string
    lastLogin?: Date | string | null
    municipalityResolutionRate?: number
    crossDepartmentSuccess?: number
    managedDepartmentAdmins?: DepartmentMunicipalAdminCreateNestedManyWithoutManagedBySuperMunicipalInput
    crossDepartmentIssues?: ComplaintCreateNestedManyWithoutCrossDeptIssueSuperMunicipalInput
    managedBySuperState?: SuperStateAdminCreateNestedOneWithoutManagedSuperMunicipalAdminsInput
  }

  export type SuperMunicipalAdminUncheckedCreateInput = {
    id?: string
    fullName: string
    adminId: string
    officialEmail: string
    password: string
    phoneNumber?: string | null
    municipality: string
    accessLevel: string
    dateOfCreation?: Date | string
    lastUpdated?: Date | string
    status?: string
    lastLogin?: Date | string | null
    municipalityResolutionRate?: number
    crossDepartmentSuccess?: number
    managedBySuperStateId?: string | null
    managedDepartmentAdmins?: DepartmentMunicipalAdminUncheckedCreateNestedManyWithoutManagedBySuperMunicipalInput
    crossDepartmentIssues?: ComplaintUncheckedCreateNestedManyWithoutCrossDeptIssueSuperMunicipalInput
  }

  export type SuperMunicipalAdminUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    officialEmail?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    municipality?: StringFieldUpdateOperationsInput | string
    accessLevel?: StringFieldUpdateOperationsInput | string
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    municipalityResolutionRate?: FloatFieldUpdateOperationsInput | number
    crossDepartmentSuccess?: IntFieldUpdateOperationsInput | number
    managedDepartmentAdmins?: DepartmentMunicipalAdminUpdateManyWithoutManagedBySuperMunicipalNestedInput
    crossDepartmentIssues?: ComplaintUpdateManyWithoutCrossDeptIssueSuperMunicipalNestedInput
    managedBySuperState?: SuperStateAdminUpdateOneWithoutManagedSuperMunicipalAdminsNestedInput
  }

  export type SuperMunicipalAdminUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    officialEmail?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    municipality?: StringFieldUpdateOperationsInput | string
    accessLevel?: StringFieldUpdateOperationsInput | string
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    municipalityResolutionRate?: FloatFieldUpdateOperationsInput | number
    crossDepartmentSuccess?: IntFieldUpdateOperationsInput | number
    managedBySuperStateId?: NullableStringFieldUpdateOperationsInput | string | null
    managedDepartmentAdmins?: DepartmentMunicipalAdminUncheckedUpdateManyWithoutManagedBySuperMunicipalNestedInput
    crossDepartmentIssues?: ComplaintUncheckedUpdateManyWithoutCrossDeptIssueSuperMunicipalNestedInput
  }

  export type SuperMunicipalAdminCreateManyInput = {
    id?: string
    fullName: string
    adminId: string
    officialEmail: string
    password: string
    phoneNumber?: string | null
    municipality: string
    accessLevel: string
    dateOfCreation?: Date | string
    lastUpdated?: Date | string
    status?: string
    lastLogin?: Date | string | null
    municipalityResolutionRate?: number
    crossDepartmentSuccess?: number
    managedBySuperStateId?: string | null
  }

  export type SuperMunicipalAdminUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    officialEmail?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    municipality?: StringFieldUpdateOperationsInput | string
    accessLevel?: StringFieldUpdateOperationsInput | string
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    municipalityResolutionRate?: FloatFieldUpdateOperationsInput | number
    crossDepartmentSuccess?: IntFieldUpdateOperationsInput | number
  }

  export type SuperMunicipalAdminUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    officialEmail?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    municipality?: StringFieldUpdateOperationsInput | string
    accessLevel?: StringFieldUpdateOperationsInput | string
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    municipalityResolutionRate?: FloatFieldUpdateOperationsInput | number
    crossDepartmentSuccess?: IntFieldUpdateOperationsInput | number
    managedBySuperStateId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DepartmentStateAdminCreateInput = {
    id?: string
    fullName: string
    adminId: string
    officialEmail: string
    password: string
    phoneNumber?: string | null
    department: string
    state: string
    accessLevel: string
    dateOfCreation?: Date | string
    lastUpdated?: Date | string
    status?: string
    lastLogin?: Date | string | null
    stateResolutionRate?: number
    systemicIssuesIdentified?: number
    managedMunicipalities?: DepartmentStateAdminCreatemanagedMunicipalitiesInput | string[]
    managedMunicipalAdmins?: DepartmentMunicipalAdminCreateNestedManyWithoutManagedByStateAdminInput
    escalatedComplaints?: ComplaintCreateNestedManyWithoutEscalatedToStateAdminInput
    regionalWorkflows?: RegionalWorkflowCreateNestedManyWithoutCreatedByInput
    managedCategories?: CategoryCreateNestedManyWithoutManagedByDeptStateAdminInput
    managedBySuperState?: SuperStateAdminCreateNestedOneWithoutManagedDepartmentAdminsInput
  }

  export type DepartmentStateAdminUncheckedCreateInput = {
    id?: string
    fullName: string
    adminId: string
    officialEmail: string
    password: string
    phoneNumber?: string | null
    department: string
    state: string
    accessLevel: string
    dateOfCreation?: Date | string
    lastUpdated?: Date | string
    status?: string
    lastLogin?: Date | string | null
    stateResolutionRate?: number
    systemicIssuesIdentified?: number
    managedMunicipalities?: DepartmentStateAdminCreatemanagedMunicipalitiesInput | string[]
    managedBySuperStateId?: string | null
    managedMunicipalAdmins?: DepartmentMunicipalAdminUncheckedCreateNestedManyWithoutManagedByStateAdminInput
    escalatedComplaints?: ComplaintUncheckedCreateNestedManyWithoutEscalatedToStateAdminInput
    regionalWorkflows?: RegionalWorkflowUncheckedCreateNestedManyWithoutCreatedByInput
    managedCategories?: CategoryUncheckedCreateNestedManyWithoutManagedByDeptStateAdminInput
  }

  export type DepartmentStateAdminUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    officialEmail?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    department?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    accessLevel?: StringFieldUpdateOperationsInput | string
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stateResolutionRate?: FloatFieldUpdateOperationsInput | number
    systemicIssuesIdentified?: IntFieldUpdateOperationsInput | number
    managedMunicipalities?: DepartmentStateAdminUpdatemanagedMunicipalitiesInput | string[]
    managedMunicipalAdmins?: DepartmentMunicipalAdminUpdateManyWithoutManagedByStateAdminNestedInput
    escalatedComplaints?: ComplaintUpdateManyWithoutEscalatedToStateAdminNestedInput
    regionalWorkflows?: RegionalWorkflowUpdateManyWithoutCreatedByNestedInput
    managedCategories?: CategoryUpdateManyWithoutManagedByDeptStateAdminNestedInput
    managedBySuperState?: SuperStateAdminUpdateOneWithoutManagedDepartmentAdminsNestedInput
  }

  export type DepartmentStateAdminUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    officialEmail?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    department?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    accessLevel?: StringFieldUpdateOperationsInput | string
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stateResolutionRate?: FloatFieldUpdateOperationsInput | number
    systemicIssuesIdentified?: IntFieldUpdateOperationsInput | number
    managedMunicipalities?: DepartmentStateAdminUpdatemanagedMunicipalitiesInput | string[]
    managedBySuperStateId?: NullableStringFieldUpdateOperationsInput | string | null
    managedMunicipalAdmins?: DepartmentMunicipalAdminUncheckedUpdateManyWithoutManagedByStateAdminNestedInput
    escalatedComplaints?: ComplaintUncheckedUpdateManyWithoutEscalatedToStateAdminNestedInput
    regionalWorkflows?: RegionalWorkflowUncheckedUpdateManyWithoutCreatedByNestedInput
    managedCategories?: CategoryUncheckedUpdateManyWithoutManagedByDeptStateAdminNestedInput
  }

  export type DepartmentStateAdminCreateManyInput = {
    id?: string
    fullName: string
    adminId: string
    officialEmail: string
    password: string
    phoneNumber?: string | null
    department: string
    state: string
    accessLevel: string
    dateOfCreation?: Date | string
    lastUpdated?: Date | string
    status?: string
    lastLogin?: Date | string | null
    stateResolutionRate?: number
    systemicIssuesIdentified?: number
    managedMunicipalities?: DepartmentStateAdminCreatemanagedMunicipalitiesInput | string[]
    managedBySuperStateId?: string | null
  }

  export type DepartmentStateAdminUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    officialEmail?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    department?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    accessLevel?: StringFieldUpdateOperationsInput | string
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stateResolutionRate?: FloatFieldUpdateOperationsInput | number
    systemicIssuesIdentified?: IntFieldUpdateOperationsInput | number
    managedMunicipalities?: DepartmentStateAdminUpdatemanagedMunicipalitiesInput | string[]
  }

  export type DepartmentStateAdminUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    officialEmail?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    department?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    accessLevel?: StringFieldUpdateOperationsInput | string
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stateResolutionRate?: FloatFieldUpdateOperationsInput | number
    systemicIssuesIdentified?: IntFieldUpdateOperationsInput | number
    managedMunicipalities?: DepartmentStateAdminUpdatemanagedMunicipalitiesInput | string[]
    managedBySuperStateId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SuperStateAdminCreateInput = {
    id?: string
    fullName: string
    adminId: string
    officialEmail: string
    phoneNumber?: string | null
    password: string
    state: string
    accessLevel: string
    dateOfCreation?: Date | string
    lastUpdated?: Date | string
    status?: string
    lastLogin?: Date | string | null
    stateResolutionRate?: number
    crossDepartmentSuccess?: number
    managedDepartmentAdmins?: DepartmentStateAdminCreateNestedManyWithoutManagedBySuperStateInput
    managedSuperMunicipalAdmins?: SuperMunicipalAdminCreateNestedManyWithoutManagedBySuperStateInput
    escalatedComplaints?: ComplaintCreateNestedManyWithoutEscalatedToSuperStateAdminInput
    managedBySuperAdmin?: SuperAdminCreateNestedOneWithoutManagedSuperStateAdminsInput
  }

  export type SuperStateAdminUncheckedCreateInput = {
    id?: string
    fullName: string
    adminId: string
    officialEmail: string
    phoneNumber?: string | null
    password: string
    state: string
    accessLevel: string
    dateOfCreation?: Date | string
    lastUpdated?: Date | string
    status?: string
    lastLogin?: Date | string | null
    stateResolutionRate?: number
    crossDepartmentSuccess?: number
    managedBySuperAdminId?: string | null
    managedDepartmentAdmins?: DepartmentStateAdminUncheckedCreateNestedManyWithoutManagedBySuperStateInput
    managedSuperMunicipalAdmins?: SuperMunicipalAdminUncheckedCreateNestedManyWithoutManagedBySuperStateInput
    escalatedComplaints?: ComplaintUncheckedCreateNestedManyWithoutEscalatedToSuperStateAdminInput
  }

  export type SuperStateAdminUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    officialEmail?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    accessLevel?: StringFieldUpdateOperationsInput | string
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stateResolutionRate?: FloatFieldUpdateOperationsInput | number
    crossDepartmentSuccess?: IntFieldUpdateOperationsInput | number
    managedDepartmentAdmins?: DepartmentStateAdminUpdateManyWithoutManagedBySuperStateNestedInput
    managedSuperMunicipalAdmins?: SuperMunicipalAdminUpdateManyWithoutManagedBySuperStateNestedInput
    escalatedComplaints?: ComplaintUpdateManyWithoutEscalatedToSuperStateAdminNestedInput
    managedBySuperAdmin?: SuperAdminUpdateOneWithoutManagedSuperStateAdminsNestedInput
  }

  export type SuperStateAdminUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    officialEmail?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    accessLevel?: StringFieldUpdateOperationsInput | string
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stateResolutionRate?: FloatFieldUpdateOperationsInput | number
    crossDepartmentSuccess?: IntFieldUpdateOperationsInput | number
    managedBySuperAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    managedDepartmentAdmins?: DepartmentStateAdminUncheckedUpdateManyWithoutManagedBySuperStateNestedInput
    managedSuperMunicipalAdmins?: SuperMunicipalAdminUncheckedUpdateManyWithoutManagedBySuperStateNestedInput
    escalatedComplaints?: ComplaintUncheckedUpdateManyWithoutEscalatedToSuperStateAdminNestedInput
  }

  export type SuperStateAdminCreateManyInput = {
    id?: string
    fullName: string
    adminId: string
    officialEmail: string
    phoneNumber?: string | null
    password: string
    state: string
    accessLevel: string
    dateOfCreation?: Date | string
    lastUpdated?: Date | string
    status?: string
    lastLogin?: Date | string | null
    stateResolutionRate?: number
    crossDepartmentSuccess?: number
    managedBySuperAdminId?: string | null
  }

  export type SuperStateAdminUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    officialEmail?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    accessLevel?: StringFieldUpdateOperationsInput | string
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stateResolutionRate?: FloatFieldUpdateOperationsInput | number
    crossDepartmentSuccess?: IntFieldUpdateOperationsInput | number
  }

  export type SuperStateAdminUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    officialEmail?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    accessLevel?: StringFieldUpdateOperationsInput | string
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stateResolutionRate?: FloatFieldUpdateOperationsInput | number
    crossDepartmentSuccess?: IntFieldUpdateOperationsInput | number
    managedBySuperAdminId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SuperAdminCreateInput = {
    id?: string
    fullName: string
    adminId: string
    officialEmail: string
    phoneNumber?: string | null
    password: string
    accessLevel: string
    dateOfCreation?: Date | string
    lastUpdated?: Date | string
    status?: string
    lastLogin?: Date | string | null
    managedCategories?: CategoryCreateNestedManyWithoutCreatedBySuperAdminInput
    managedSuperStateAdmins?: SuperStateAdminCreateNestedManyWithoutManagedBySuperAdminInput
    managedComplaints?: ComplaintCreateNestedManyWithoutManagedBySuperAdminInput
  }

  export type SuperAdminUncheckedCreateInput = {
    id?: string
    fullName: string
    adminId: string
    officialEmail: string
    phoneNumber?: string | null
    password: string
    accessLevel: string
    dateOfCreation?: Date | string
    lastUpdated?: Date | string
    status?: string
    lastLogin?: Date | string | null
    managedCategories?: CategoryUncheckedCreateNestedManyWithoutCreatedBySuperAdminInput
    managedSuperStateAdmins?: SuperStateAdminUncheckedCreateNestedManyWithoutManagedBySuperAdminInput
    managedComplaints?: ComplaintUncheckedCreateNestedManyWithoutManagedBySuperAdminInput
  }

  export type SuperAdminUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    officialEmail?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    accessLevel?: StringFieldUpdateOperationsInput | string
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    managedCategories?: CategoryUpdateManyWithoutCreatedBySuperAdminNestedInput
    managedSuperStateAdmins?: SuperStateAdminUpdateManyWithoutManagedBySuperAdminNestedInput
    managedComplaints?: ComplaintUpdateManyWithoutManagedBySuperAdminNestedInput
  }

  export type SuperAdminUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    officialEmail?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    accessLevel?: StringFieldUpdateOperationsInput | string
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    managedCategories?: CategoryUncheckedUpdateManyWithoutCreatedBySuperAdminNestedInput
    managedSuperStateAdmins?: SuperStateAdminUncheckedUpdateManyWithoutManagedBySuperAdminNestedInput
    managedComplaints?: ComplaintUncheckedUpdateManyWithoutManagedBySuperAdminNestedInput
  }

  export type SuperAdminCreateManyInput = {
    id?: string
    fullName: string
    adminId: string
    officialEmail: string
    phoneNumber?: string | null
    password: string
    accessLevel: string
    dateOfCreation?: Date | string
    lastUpdated?: Date | string
    status?: string
    lastLogin?: Date | string | null
  }

  export type SuperAdminUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    officialEmail?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    accessLevel?: StringFieldUpdateOperationsInput | string
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SuperAdminUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    officialEmail?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    accessLevel?: StringFieldUpdateOperationsInput | string
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CategoryCreateInput = {
    id?: string
    name: string
    subCategories?: CategoryCreatesubCategoriesInput | string[]
    learnedSubCategories?: CategoryCreatelearnedSubCategoriesInput | string[]
    assignedDepartment: string
    creationDate?: Date | string
    lastUpdated?: Date | string
    complaints?: ComplaintCreateNestedManyWithoutCategoryInput
    createdBySuperAdmin?: SuperAdminCreateNestedOneWithoutManagedCategoriesInput
    managedByDeptStateAdmin?: DepartmentStateAdminCreateNestedOneWithoutManagedCategoriesInput
  }

  export type CategoryUncheckedCreateInput = {
    id?: string
    name: string
    subCategories?: CategoryCreatesubCategoriesInput | string[]
    learnedSubCategories?: CategoryCreatelearnedSubCategoriesInput | string[]
    assignedDepartment: string
    creationDate?: Date | string
    lastUpdated?: Date | string
    createdBySuperAdminId?: string | null
    managedByDeptStateAdminId?: string | null
    complaints?: ComplaintUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subCategories?: CategoryUpdatesubCategoriesInput | string[]
    learnedSubCategories?: CategoryUpdatelearnedSubCategoriesInput | string[]
    assignedDepartment?: StringFieldUpdateOperationsInput | string
    creationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    complaints?: ComplaintUpdateManyWithoutCategoryNestedInput
    createdBySuperAdmin?: SuperAdminUpdateOneWithoutManagedCategoriesNestedInput
    managedByDeptStateAdmin?: DepartmentStateAdminUpdateOneWithoutManagedCategoriesNestedInput
  }

  export type CategoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subCategories?: CategoryUpdatesubCategoriesInput | string[]
    learnedSubCategories?: CategoryUpdatelearnedSubCategoriesInput | string[]
    assignedDepartment?: StringFieldUpdateOperationsInput | string
    creationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBySuperAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    managedByDeptStateAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    complaints?: ComplaintUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryCreateManyInput = {
    id?: string
    name: string
    subCategories?: CategoryCreatesubCategoriesInput | string[]
    learnedSubCategories?: CategoryCreatelearnedSubCategoriesInput | string[]
    assignedDepartment: string
    creationDate?: Date | string
    lastUpdated?: Date | string
    createdBySuperAdminId?: string | null
    managedByDeptStateAdminId?: string | null
  }

  export type CategoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subCategories?: CategoryUpdatesubCategoriesInput | string[]
    learnedSubCategories?: CategoryUpdatelearnedSubCategoriesInput | string[]
    assignedDepartment?: StringFieldUpdateOperationsInput | string
    creationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subCategories?: CategoryUpdatesubCategoriesInput | string[]
    learnedSubCategories?: CategoryUpdatelearnedSubCategoriesInput | string[]
    assignedDepartment?: StringFieldUpdateOperationsInput | string
    creationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBySuperAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    managedByDeptStateAdminId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ComplaintCreateInput = {
    id?: string
    submissionDate?: Date | string
    seq?: number
    subCategory: string
    standardizedSubCategory?: string | null
    description: string
    urgency?: $Enums.ComplaintUrgency
    attachmentUrl?: string | null
    assignedDepartment: string
    status?: $Enums.ComplaintStatus
    sla?: string | null
    upvoteCount?: number
    isPublic?: boolean
    escalationLevel?: string | null
    dateOfResolution?: Date | string | null
    complainant: UserCreateNestedOneWithoutComplaintsInput
    category: CategoryCreateNestedOneWithoutComplaintsInput
    location?: ComplaintLocationCreateNestedOneWithoutComplaintInput
    assignedAgent?: AgentCreateNestedOneWithoutAssignedComplaintsInput
    coAssignedAgents?: AgentCreateNestedManyWithoutCoAssignedComplaintsInput
    managedByMunicipalAdmin?: DepartmentMunicipalAdminCreateNestedOneWithoutManagedComplaintsInput
    moderatedByMunicipalAdmin?: DepartmentMunicipalAdminCreateNestedOneWithoutCommunityModerationInput
    crossDeptIssueSuperMunicipal?: SuperMunicipalAdminCreateNestedOneWithoutCrossDepartmentIssuesInput
    escalatedToStateAdmin?: DepartmentStateAdminCreateNestedOneWithoutEscalatedComplaintsInput
    escalatedToSuperStateAdmin?: SuperStateAdminCreateNestedOneWithoutEscalatedComplaintsInput
    managedBySuperAdmin?: SuperAdminCreateNestedOneWithoutManagedComplaintsInput
    upvotes?: UpvoteCreateNestedManyWithoutComplaintInput
    auditLogs?: AuditLogCreateNestedManyWithoutComplaintInput
  }

  export type ComplaintUncheckedCreateInput = {
    id?: string
    submissionDate?: Date | string
    seq?: number
    complainantId: string
    categoryId: string
    subCategory: string
    standardizedSubCategory?: string | null
    description: string
    urgency?: $Enums.ComplaintUrgency
    attachmentUrl?: string | null
    assignedDepartment: string
    status?: $Enums.ComplaintStatus
    sla?: string | null
    upvoteCount?: number
    isPublic?: boolean
    escalationLevel?: string | null
    dateOfResolution?: Date | string | null
    assignedAgentId?: string | null
    managedByMunicipalAdminId?: string | null
    moderatedByMunicipalAdminId?: string | null
    crossDeptIssueSuperMunicipalId?: string | null
    escalatedToStateAdminId?: string | null
    escalatedToSuperStateAdminId?: string | null
    managedBySuperAdminId?: string | null
    location?: ComplaintLocationUncheckedCreateNestedOneWithoutComplaintInput
    coAssignedAgents?: AgentUncheckedCreateNestedManyWithoutCoAssignedComplaintsInput
    upvotes?: UpvoteUncheckedCreateNestedManyWithoutComplaintInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutComplaintInput
  }

  export type ComplaintUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    submissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    subCategory?: StringFieldUpdateOperationsInput | string
    standardizedSubCategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    urgency?: EnumComplaintUrgencyFieldUpdateOperationsInput | $Enums.ComplaintUrgency
    attachmentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    assignedDepartment?: StringFieldUpdateOperationsInput | string
    status?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    sla?: NullableStringFieldUpdateOperationsInput | string | null
    upvoteCount?: IntFieldUpdateOperationsInput | number
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    escalationLevel?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    complainant?: UserUpdateOneRequiredWithoutComplaintsNestedInput
    category?: CategoryUpdateOneRequiredWithoutComplaintsNestedInput
    location?: ComplaintLocationUpdateOneWithoutComplaintNestedInput
    assignedAgent?: AgentUpdateOneWithoutAssignedComplaintsNestedInput
    coAssignedAgents?: AgentUpdateManyWithoutCoAssignedComplaintsNestedInput
    managedByMunicipalAdmin?: DepartmentMunicipalAdminUpdateOneWithoutManagedComplaintsNestedInput
    moderatedByMunicipalAdmin?: DepartmentMunicipalAdminUpdateOneWithoutCommunityModerationNestedInput
    crossDeptIssueSuperMunicipal?: SuperMunicipalAdminUpdateOneWithoutCrossDepartmentIssuesNestedInput
    escalatedToStateAdmin?: DepartmentStateAdminUpdateOneWithoutEscalatedComplaintsNestedInput
    escalatedToSuperStateAdmin?: SuperStateAdminUpdateOneWithoutEscalatedComplaintsNestedInput
    managedBySuperAdmin?: SuperAdminUpdateOneWithoutManagedComplaintsNestedInput
    upvotes?: UpvoteUpdateManyWithoutComplaintNestedInput
    auditLogs?: AuditLogUpdateManyWithoutComplaintNestedInput
  }

  export type ComplaintUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    submissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    seq?: IntFieldUpdateOperationsInput | number
    complainantId?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    subCategory?: StringFieldUpdateOperationsInput | string
    standardizedSubCategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    urgency?: EnumComplaintUrgencyFieldUpdateOperationsInput | $Enums.ComplaintUrgency
    attachmentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    assignedDepartment?: StringFieldUpdateOperationsInput | string
    status?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    sla?: NullableStringFieldUpdateOperationsInput | string | null
    upvoteCount?: IntFieldUpdateOperationsInput | number
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    escalationLevel?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignedAgentId?: NullableStringFieldUpdateOperationsInput | string | null
    managedByMunicipalAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    moderatedByMunicipalAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    crossDeptIssueSuperMunicipalId?: NullableStringFieldUpdateOperationsInput | string | null
    escalatedToStateAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    escalatedToSuperStateAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    managedBySuperAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    location?: ComplaintLocationUncheckedUpdateOneWithoutComplaintNestedInput
    coAssignedAgents?: AgentUncheckedUpdateManyWithoutCoAssignedComplaintsNestedInput
    upvotes?: UpvoteUncheckedUpdateManyWithoutComplaintNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutComplaintNestedInput
  }

  export type ComplaintCreateManyInput = {
    id?: string
    submissionDate?: Date | string
    seq?: number
    complainantId: string
    categoryId: string
    subCategory: string
    standardizedSubCategory?: string | null
    description: string
    urgency?: $Enums.ComplaintUrgency
    attachmentUrl?: string | null
    assignedDepartment: string
    status?: $Enums.ComplaintStatus
    sla?: string | null
    upvoteCount?: number
    isPublic?: boolean
    escalationLevel?: string | null
    dateOfResolution?: Date | string | null
    assignedAgentId?: string | null
    managedByMunicipalAdminId?: string | null
    moderatedByMunicipalAdminId?: string | null
    crossDeptIssueSuperMunicipalId?: string | null
    escalatedToStateAdminId?: string | null
    escalatedToSuperStateAdminId?: string | null
    managedBySuperAdminId?: string | null
  }

  export type ComplaintUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    submissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    subCategory?: StringFieldUpdateOperationsInput | string
    standardizedSubCategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    urgency?: EnumComplaintUrgencyFieldUpdateOperationsInput | $Enums.ComplaintUrgency
    attachmentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    assignedDepartment?: StringFieldUpdateOperationsInput | string
    status?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    sla?: NullableStringFieldUpdateOperationsInput | string | null
    upvoteCount?: IntFieldUpdateOperationsInput | number
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    escalationLevel?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ComplaintUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    submissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    seq?: IntFieldUpdateOperationsInput | number
    complainantId?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    subCategory?: StringFieldUpdateOperationsInput | string
    standardizedSubCategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    urgency?: EnumComplaintUrgencyFieldUpdateOperationsInput | $Enums.ComplaintUrgency
    attachmentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    assignedDepartment?: StringFieldUpdateOperationsInput | string
    status?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    sla?: NullableStringFieldUpdateOperationsInput | string | null
    upvoteCount?: IntFieldUpdateOperationsInput | number
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    escalationLevel?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignedAgentId?: NullableStringFieldUpdateOperationsInput | string | null
    managedByMunicipalAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    moderatedByMunicipalAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    crossDeptIssueSuperMunicipalId?: NullableStringFieldUpdateOperationsInput | string | null
    escalatedToStateAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    escalatedToSuperStateAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    managedBySuperAdminId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ComplaintLocationCreateInput = {
    id?: string
    pin: string
    district: string
    city: string
    locality: string
    street?: string | null
    latitude?: number | null
    longitude?: number | null
    complaint: ComplaintCreateNestedOneWithoutLocationInput
  }

  export type ComplaintLocationUncheckedCreateInput = {
    id?: string
    complaintId: string
    pin: string
    district: string
    city: string
    locality: string
    street?: string | null
    latitude?: number | null
    longitude?: number | null
  }

  export type ComplaintLocationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    pin?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    locality?: StringFieldUpdateOperationsInput | string
    street?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    complaint?: ComplaintUpdateOneRequiredWithoutLocationNestedInput
  }

  export type ComplaintLocationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    complaintId?: StringFieldUpdateOperationsInput | string
    pin?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    locality?: StringFieldUpdateOperationsInput | string
    street?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type ComplaintLocationCreateManyInput = {
    id?: string
    complaintId: string
    pin: string
    district: string
    city: string
    locality: string
    street?: string | null
    latitude?: number | null
    longitude?: number | null
  }

  export type ComplaintLocationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    pin?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    locality?: StringFieldUpdateOperationsInput | string
    street?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type ComplaintLocationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    complaintId?: StringFieldUpdateOperationsInput | string
    pin?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    locality?: StringFieldUpdateOperationsInput | string
    street?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type UpvoteCreateInput = {
    id?: string
    timestamp?: Date | string
    user: UserCreateNestedOneWithoutUpvotesInput
    complaint: ComplaintCreateNestedOneWithoutUpvotesInput
  }

  export type UpvoteUncheckedCreateInput = {
    id?: string
    userId: string
    complaintId: string
    timestamp?: Date | string
  }

  export type UpvoteUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutUpvotesNestedInput
    complaint?: ComplaintUpdateOneRequiredWithoutUpvotesNestedInput
  }

  export type UpvoteUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    complaintId?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UpvoteCreateManyInput = {
    id?: string
    userId: string
    complaintId: string
    timestamp?: Date | string
  }

  export type UpvoteUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UpvoteUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    complaintId?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NewsUpdateCreateInput = {
    id?: string
    title: string
    content: string
    date?: Date | string
    createdBy: DepartmentMunicipalAdminCreateNestedOneWithoutNewsUpdatesInput
  }

  export type NewsUpdateUncheckedCreateInput = {
    id?: string
    title: string
    content: string
    date?: Date | string
    createdById: string
  }

  export type NewsUpdateUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: DepartmentMunicipalAdminUpdateOneRequiredWithoutNewsUpdatesNestedInput
  }

  export type NewsUpdateUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
  }

  export type NewsUpdateCreateManyInput = {
    id?: string
    title: string
    content: string
    date?: Date | string
    createdById: string
  }

  export type NewsUpdateUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NewsUpdateUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
  }

  export type AuditLogCreateInput = {
    id?: string
    action: string
    timestamp?: Date | string
    details?: string | null
    user: UserCreateNestedOneWithoutAuditLogsCreatedInput
    complaint?: ComplaintCreateNestedOneWithoutAuditLogsInput
  }

  export type AuditLogUncheckedCreateInput = {
    id?: string
    action: string
    userId: string
    complaintId?: string | null
    timestamp?: Date | string
    details?: string | null
  }

  export type AuditLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutAuditLogsCreatedNestedInput
    complaint?: ComplaintUpdateOneWithoutAuditLogsNestedInput
  }

  export type AuditLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    complaintId?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AuditLogCreateManyInput = {
    id?: string
    action: string
    userId: string
    complaintId?: string | null
    timestamp?: Date | string
    details?: string | null
  }

  export type AuditLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AuditLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    complaintId?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RegionalWorkflowCreateInput = {
    id?: string
    state: string
    municipality?: string | null
    category: string
    sla: string
    createdBy: DepartmentStateAdminCreateNestedOneWithoutRegionalWorkflowsInput
  }

  export type RegionalWorkflowUncheckedCreateInput = {
    id?: string
    state: string
    municipality?: string | null
    category: string
    sla: string
    createdById: string
  }

  export type RegionalWorkflowUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    municipality?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    sla?: StringFieldUpdateOperationsInput | string
    createdBy?: DepartmentStateAdminUpdateOneRequiredWithoutRegionalWorkflowsNestedInput
  }

  export type RegionalWorkflowUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    municipality?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    sla?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
  }

  export type RegionalWorkflowCreateManyInput = {
    id?: string
    state: string
    municipality?: string | null
    category: string
    sla: string
    createdById: string
  }

  export type RegionalWorkflowUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    municipality?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    sla?: StringFieldUpdateOperationsInput | string
  }

  export type RegionalWorkflowUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    municipality?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    sla?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type UserLocationNullableScalarRelationFilter = {
    is?: UserLocationWhereInput | null
    isNot?: UserLocationWhereInput | null
  }

  export type ComplaintListRelationFilter = {
    every?: ComplaintWhereInput
    some?: ComplaintWhereInput
    none?: ComplaintWhereInput
  }

  export type UpvoteListRelationFilter = {
    every?: UpvoteWhereInput
    some?: UpvoteWhereInput
    none?: UpvoteWhereInput
  }

  export type AuditLogListRelationFilter = {
    every?: AuditLogWhereInput
    some?: AuditLogWhereInput
    none?: AuditLogWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ComplaintOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UpvoteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AuditLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    phoneNumber?: SortOrder
    dateOfBirth?: SortOrder
    password?: SortOrder
    aadhaarId?: SortOrder
    preferredLanguage?: SortOrder
    disability?: SortOrder
    consentDataCollection?: SortOrder
    dateOfCreation?: SortOrder
    lastUpdated?: SortOrder
    status?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    phoneNumber?: SortOrder
    dateOfBirth?: SortOrder
    password?: SortOrder
    aadhaarId?: SortOrder
    preferredLanguage?: SortOrder
    disability?: SortOrder
    consentDataCollection?: SortOrder
    dateOfCreation?: SortOrder
    lastUpdated?: SortOrder
    status?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    phoneNumber?: SortOrder
    dateOfBirth?: SortOrder
    password?: SortOrder
    aadhaarId?: SortOrder
    preferredLanguage?: SortOrder
    disability?: SortOrder
    consentDataCollection?: SortOrder
    dateOfCreation?: SortOrder
    lastUpdated?: SortOrder
    status?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type UserLocationCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    pin?: SortOrder
    district?: SortOrder
    city?: SortOrder
    locality?: SortOrder
    street?: SortOrder
    municipal?: SortOrder
  }

  export type UserLocationMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    pin?: SortOrder
    district?: SortOrder
    city?: SortOrder
    locality?: SortOrder
    street?: SortOrder
    municipal?: SortOrder
  }

  export type UserLocationMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    pin?: SortOrder
    district?: SortOrder
    city?: SortOrder
    locality?: SortOrder
    street?: SortOrder
    municipal?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type DepartmentMunicipalAdminNullableScalarRelationFilter = {
    is?: DepartmentMunicipalAdminWhereInput | null
    isNot?: DepartmentMunicipalAdminWhereInput | null
  }

  export type AgentCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    fullName?: SortOrder
    employeeId?: SortOrder
    password?: SortOrder
    phoneNumber?: SortOrder
    officialEmail?: SortOrder
    department?: SortOrder
    municipality?: SortOrder
    autonomyLevel?: SortOrder
    accessLevel?: SortOrder
    workloadLimit?: SortOrder
    currentWorkload?: SortOrder
    availabilityStatus?: SortOrder
    dateOfCreation?: SortOrder
    lastUpdated?: SortOrder
    status?: SortOrder
    lastLogin?: SortOrder
    resolutionRate?: SortOrder
    avgResolutionTime?: SortOrder
    collaborationMetric?: SortOrder
    managedByMunicipalId?: SortOrder
  }

  export type AgentAvgOrderByAggregateInput = {
    workloadLimit?: SortOrder
    currentWorkload?: SortOrder
    resolutionRate?: SortOrder
    collaborationMetric?: SortOrder
  }

  export type AgentMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    fullName?: SortOrder
    employeeId?: SortOrder
    password?: SortOrder
    phoneNumber?: SortOrder
    officialEmail?: SortOrder
    department?: SortOrder
    municipality?: SortOrder
    autonomyLevel?: SortOrder
    accessLevel?: SortOrder
    workloadLimit?: SortOrder
    currentWorkload?: SortOrder
    availabilityStatus?: SortOrder
    dateOfCreation?: SortOrder
    lastUpdated?: SortOrder
    status?: SortOrder
    lastLogin?: SortOrder
    resolutionRate?: SortOrder
    avgResolutionTime?: SortOrder
    collaborationMetric?: SortOrder
    managedByMunicipalId?: SortOrder
  }

  export type AgentMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    fullName?: SortOrder
    employeeId?: SortOrder
    password?: SortOrder
    phoneNumber?: SortOrder
    officialEmail?: SortOrder
    department?: SortOrder
    municipality?: SortOrder
    autonomyLevel?: SortOrder
    accessLevel?: SortOrder
    workloadLimit?: SortOrder
    currentWorkload?: SortOrder
    availabilityStatus?: SortOrder
    dateOfCreation?: SortOrder
    lastUpdated?: SortOrder
    status?: SortOrder
    lastLogin?: SortOrder
    resolutionRate?: SortOrder
    avgResolutionTime?: SortOrder
    collaborationMetric?: SortOrder
    managedByMunicipalId?: SortOrder
  }

  export type AgentSumOrderByAggregateInput = {
    workloadLimit?: SortOrder
    currentWorkload?: SortOrder
    resolutionRate?: SortOrder
    collaborationMetric?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type AgentListRelationFilter = {
    every?: AgentWhereInput
    some?: AgentWhereInput
    none?: AgentWhereInput
  }

  export type NewsUpdateListRelationFilter = {
    every?: NewsUpdateWhereInput
    some?: NewsUpdateWhereInput
    none?: NewsUpdateWhereInput
  }

  export type DepartmentStateAdminNullableScalarRelationFilter = {
    is?: DepartmentStateAdminWhereInput | null
    isNot?: DepartmentStateAdminWhereInput | null
  }

  export type SuperMunicipalAdminNullableScalarRelationFilter = {
    is?: SuperMunicipalAdminWhereInput | null
    isNot?: SuperMunicipalAdminWhereInput | null
  }

  export type AgentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NewsUpdateOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DepartmentMunicipalAdminCountOrderByAggregateInput = {
    id?: SortOrder
    fullName?: SortOrder
    adminId?: SortOrder
    officialEmail?: SortOrder
    phoneNumber?: SortOrder
    password?: SortOrder
    department?: SortOrder
    municipality?: SortOrder
    accessLevel?: SortOrder
    dateOfCreation?: SortOrder
    lastUpdated?: SortOrder
    status?: SortOrder
    lastLogin?: SortOrder
    resolutionRate?: SortOrder
    slaComplianceRate?: SortOrder
    escalationCount?: SortOrder
    managedByStateAdminId?: SortOrder
    managedBySuperMunicipalId?: SortOrder
  }

  export type DepartmentMunicipalAdminAvgOrderByAggregateInput = {
    resolutionRate?: SortOrder
    slaComplianceRate?: SortOrder
    escalationCount?: SortOrder
  }

  export type DepartmentMunicipalAdminMaxOrderByAggregateInput = {
    id?: SortOrder
    fullName?: SortOrder
    adminId?: SortOrder
    officialEmail?: SortOrder
    phoneNumber?: SortOrder
    password?: SortOrder
    department?: SortOrder
    municipality?: SortOrder
    accessLevel?: SortOrder
    dateOfCreation?: SortOrder
    lastUpdated?: SortOrder
    status?: SortOrder
    lastLogin?: SortOrder
    resolutionRate?: SortOrder
    slaComplianceRate?: SortOrder
    escalationCount?: SortOrder
    managedByStateAdminId?: SortOrder
    managedBySuperMunicipalId?: SortOrder
  }

  export type DepartmentMunicipalAdminMinOrderByAggregateInput = {
    id?: SortOrder
    fullName?: SortOrder
    adminId?: SortOrder
    officialEmail?: SortOrder
    phoneNumber?: SortOrder
    password?: SortOrder
    department?: SortOrder
    municipality?: SortOrder
    accessLevel?: SortOrder
    dateOfCreation?: SortOrder
    lastUpdated?: SortOrder
    status?: SortOrder
    lastLogin?: SortOrder
    resolutionRate?: SortOrder
    slaComplianceRate?: SortOrder
    escalationCount?: SortOrder
    managedByStateAdminId?: SortOrder
    managedBySuperMunicipalId?: SortOrder
  }

  export type DepartmentMunicipalAdminSumOrderByAggregateInput = {
    resolutionRate?: SortOrder
    slaComplianceRate?: SortOrder
    escalationCount?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type DepartmentMunicipalAdminListRelationFilter = {
    every?: DepartmentMunicipalAdminWhereInput
    some?: DepartmentMunicipalAdminWhereInput
    none?: DepartmentMunicipalAdminWhereInput
  }

  export type SuperStateAdminNullableScalarRelationFilter = {
    is?: SuperStateAdminWhereInput | null
    isNot?: SuperStateAdminWhereInput | null
  }

  export type DepartmentMunicipalAdminOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SuperMunicipalAdminCountOrderByAggregateInput = {
    id?: SortOrder
    fullName?: SortOrder
    adminId?: SortOrder
    officialEmail?: SortOrder
    password?: SortOrder
    phoneNumber?: SortOrder
    municipality?: SortOrder
    accessLevel?: SortOrder
    dateOfCreation?: SortOrder
    lastUpdated?: SortOrder
    status?: SortOrder
    lastLogin?: SortOrder
    municipalityResolutionRate?: SortOrder
    crossDepartmentSuccess?: SortOrder
    managedBySuperStateId?: SortOrder
  }

  export type SuperMunicipalAdminAvgOrderByAggregateInput = {
    municipalityResolutionRate?: SortOrder
    crossDepartmentSuccess?: SortOrder
  }

  export type SuperMunicipalAdminMaxOrderByAggregateInput = {
    id?: SortOrder
    fullName?: SortOrder
    adminId?: SortOrder
    officialEmail?: SortOrder
    password?: SortOrder
    phoneNumber?: SortOrder
    municipality?: SortOrder
    accessLevel?: SortOrder
    dateOfCreation?: SortOrder
    lastUpdated?: SortOrder
    status?: SortOrder
    lastLogin?: SortOrder
    municipalityResolutionRate?: SortOrder
    crossDepartmentSuccess?: SortOrder
    managedBySuperStateId?: SortOrder
  }

  export type SuperMunicipalAdminMinOrderByAggregateInput = {
    id?: SortOrder
    fullName?: SortOrder
    adminId?: SortOrder
    officialEmail?: SortOrder
    password?: SortOrder
    phoneNumber?: SortOrder
    municipality?: SortOrder
    accessLevel?: SortOrder
    dateOfCreation?: SortOrder
    lastUpdated?: SortOrder
    status?: SortOrder
    lastLogin?: SortOrder
    municipalityResolutionRate?: SortOrder
    crossDepartmentSuccess?: SortOrder
    managedBySuperStateId?: SortOrder
  }

  export type SuperMunicipalAdminSumOrderByAggregateInput = {
    municipalityResolutionRate?: SortOrder
    crossDepartmentSuccess?: SortOrder
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type RegionalWorkflowListRelationFilter = {
    every?: RegionalWorkflowWhereInput
    some?: RegionalWorkflowWhereInput
    none?: RegionalWorkflowWhereInput
  }

  export type CategoryListRelationFilter = {
    every?: CategoryWhereInput
    some?: CategoryWhereInput
    none?: CategoryWhereInput
  }

  export type RegionalWorkflowOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CategoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DepartmentStateAdminCountOrderByAggregateInput = {
    id?: SortOrder
    fullName?: SortOrder
    adminId?: SortOrder
    officialEmail?: SortOrder
    password?: SortOrder
    phoneNumber?: SortOrder
    department?: SortOrder
    state?: SortOrder
    accessLevel?: SortOrder
    dateOfCreation?: SortOrder
    lastUpdated?: SortOrder
    status?: SortOrder
    lastLogin?: SortOrder
    stateResolutionRate?: SortOrder
    systemicIssuesIdentified?: SortOrder
    managedMunicipalities?: SortOrder
    managedBySuperStateId?: SortOrder
  }

  export type DepartmentStateAdminAvgOrderByAggregateInput = {
    stateResolutionRate?: SortOrder
    systemicIssuesIdentified?: SortOrder
  }

  export type DepartmentStateAdminMaxOrderByAggregateInput = {
    id?: SortOrder
    fullName?: SortOrder
    adminId?: SortOrder
    officialEmail?: SortOrder
    password?: SortOrder
    phoneNumber?: SortOrder
    department?: SortOrder
    state?: SortOrder
    accessLevel?: SortOrder
    dateOfCreation?: SortOrder
    lastUpdated?: SortOrder
    status?: SortOrder
    lastLogin?: SortOrder
    stateResolutionRate?: SortOrder
    systemicIssuesIdentified?: SortOrder
    managedBySuperStateId?: SortOrder
  }

  export type DepartmentStateAdminMinOrderByAggregateInput = {
    id?: SortOrder
    fullName?: SortOrder
    adminId?: SortOrder
    officialEmail?: SortOrder
    password?: SortOrder
    phoneNumber?: SortOrder
    department?: SortOrder
    state?: SortOrder
    accessLevel?: SortOrder
    dateOfCreation?: SortOrder
    lastUpdated?: SortOrder
    status?: SortOrder
    lastLogin?: SortOrder
    stateResolutionRate?: SortOrder
    systemicIssuesIdentified?: SortOrder
    managedBySuperStateId?: SortOrder
  }

  export type DepartmentStateAdminSumOrderByAggregateInput = {
    stateResolutionRate?: SortOrder
    systemicIssuesIdentified?: SortOrder
  }

  export type DepartmentStateAdminListRelationFilter = {
    every?: DepartmentStateAdminWhereInput
    some?: DepartmentStateAdminWhereInput
    none?: DepartmentStateAdminWhereInput
  }

  export type SuperMunicipalAdminListRelationFilter = {
    every?: SuperMunicipalAdminWhereInput
    some?: SuperMunicipalAdminWhereInput
    none?: SuperMunicipalAdminWhereInput
  }

  export type SuperAdminNullableScalarRelationFilter = {
    is?: SuperAdminWhereInput | null
    isNot?: SuperAdminWhereInput | null
  }

  export type DepartmentStateAdminOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SuperMunicipalAdminOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SuperStateAdminCountOrderByAggregateInput = {
    id?: SortOrder
    fullName?: SortOrder
    adminId?: SortOrder
    officialEmail?: SortOrder
    phoneNumber?: SortOrder
    password?: SortOrder
    state?: SortOrder
    accessLevel?: SortOrder
    dateOfCreation?: SortOrder
    lastUpdated?: SortOrder
    status?: SortOrder
    lastLogin?: SortOrder
    stateResolutionRate?: SortOrder
    crossDepartmentSuccess?: SortOrder
    managedBySuperAdminId?: SortOrder
  }

  export type SuperStateAdminAvgOrderByAggregateInput = {
    stateResolutionRate?: SortOrder
    crossDepartmentSuccess?: SortOrder
  }

  export type SuperStateAdminMaxOrderByAggregateInput = {
    id?: SortOrder
    fullName?: SortOrder
    adminId?: SortOrder
    officialEmail?: SortOrder
    phoneNumber?: SortOrder
    password?: SortOrder
    state?: SortOrder
    accessLevel?: SortOrder
    dateOfCreation?: SortOrder
    lastUpdated?: SortOrder
    status?: SortOrder
    lastLogin?: SortOrder
    stateResolutionRate?: SortOrder
    crossDepartmentSuccess?: SortOrder
    managedBySuperAdminId?: SortOrder
  }

  export type SuperStateAdminMinOrderByAggregateInput = {
    id?: SortOrder
    fullName?: SortOrder
    adminId?: SortOrder
    officialEmail?: SortOrder
    phoneNumber?: SortOrder
    password?: SortOrder
    state?: SortOrder
    accessLevel?: SortOrder
    dateOfCreation?: SortOrder
    lastUpdated?: SortOrder
    status?: SortOrder
    lastLogin?: SortOrder
    stateResolutionRate?: SortOrder
    crossDepartmentSuccess?: SortOrder
    managedBySuperAdminId?: SortOrder
  }

  export type SuperStateAdminSumOrderByAggregateInput = {
    stateResolutionRate?: SortOrder
    crossDepartmentSuccess?: SortOrder
  }

  export type SuperStateAdminListRelationFilter = {
    every?: SuperStateAdminWhereInput
    some?: SuperStateAdminWhereInput
    none?: SuperStateAdminWhereInput
  }

  export type SuperStateAdminOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SuperAdminCountOrderByAggregateInput = {
    id?: SortOrder
    fullName?: SortOrder
    adminId?: SortOrder
    officialEmail?: SortOrder
    phoneNumber?: SortOrder
    password?: SortOrder
    accessLevel?: SortOrder
    dateOfCreation?: SortOrder
    lastUpdated?: SortOrder
    status?: SortOrder
    lastLogin?: SortOrder
  }

  export type SuperAdminMaxOrderByAggregateInput = {
    id?: SortOrder
    fullName?: SortOrder
    adminId?: SortOrder
    officialEmail?: SortOrder
    phoneNumber?: SortOrder
    password?: SortOrder
    accessLevel?: SortOrder
    dateOfCreation?: SortOrder
    lastUpdated?: SortOrder
    status?: SortOrder
    lastLogin?: SortOrder
  }

  export type SuperAdminMinOrderByAggregateInput = {
    id?: SortOrder
    fullName?: SortOrder
    adminId?: SortOrder
    officialEmail?: SortOrder
    phoneNumber?: SortOrder
    password?: SortOrder
    accessLevel?: SortOrder
    dateOfCreation?: SortOrder
    lastUpdated?: SortOrder
    status?: SortOrder
    lastLogin?: SortOrder
  }

  export type CategoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    subCategories?: SortOrder
    learnedSubCategories?: SortOrder
    assignedDepartment?: SortOrder
    creationDate?: SortOrder
    lastUpdated?: SortOrder
    createdBySuperAdminId?: SortOrder
    managedByDeptStateAdminId?: SortOrder
  }

  export type CategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    assignedDepartment?: SortOrder
    creationDate?: SortOrder
    lastUpdated?: SortOrder
    createdBySuperAdminId?: SortOrder
    managedByDeptStateAdminId?: SortOrder
  }

  export type CategoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    assignedDepartment?: SortOrder
    creationDate?: SortOrder
    lastUpdated?: SortOrder
    createdBySuperAdminId?: SortOrder
    managedByDeptStateAdminId?: SortOrder
  }

  export type EnumComplaintUrgencyFilter<$PrismaModel = never> = {
    equals?: $Enums.ComplaintUrgency | EnumComplaintUrgencyFieldRefInput<$PrismaModel>
    in?: $Enums.ComplaintUrgency[] | ListEnumComplaintUrgencyFieldRefInput<$PrismaModel>
    notIn?: $Enums.ComplaintUrgency[] | ListEnumComplaintUrgencyFieldRefInput<$PrismaModel>
    not?: NestedEnumComplaintUrgencyFilter<$PrismaModel> | $Enums.ComplaintUrgency
  }

  export type EnumComplaintStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ComplaintStatus | EnumComplaintStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ComplaintStatus[] | ListEnumComplaintStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ComplaintStatus[] | ListEnumComplaintStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumComplaintStatusFilter<$PrismaModel> | $Enums.ComplaintStatus
  }

  export type CategoryScalarRelationFilter = {
    is?: CategoryWhereInput
    isNot?: CategoryWhereInput
  }

  export type ComplaintLocationNullableScalarRelationFilter = {
    is?: ComplaintLocationWhereInput | null
    isNot?: ComplaintLocationWhereInput | null
  }

  export type AgentNullableScalarRelationFilter = {
    is?: AgentWhereInput | null
    isNot?: AgentWhereInput | null
  }

  export type ComplaintCountOrderByAggregateInput = {
    id?: SortOrder
    submissionDate?: SortOrder
    seq?: SortOrder
    complainantId?: SortOrder
    categoryId?: SortOrder
    subCategory?: SortOrder
    standardizedSubCategory?: SortOrder
    description?: SortOrder
    urgency?: SortOrder
    attachmentUrl?: SortOrder
    assignedDepartment?: SortOrder
    status?: SortOrder
    sla?: SortOrder
    upvoteCount?: SortOrder
    isPublic?: SortOrder
    escalationLevel?: SortOrder
    dateOfResolution?: SortOrder
    assignedAgentId?: SortOrder
    managedByMunicipalAdminId?: SortOrder
    moderatedByMunicipalAdminId?: SortOrder
    crossDeptIssueSuperMunicipalId?: SortOrder
    escalatedToStateAdminId?: SortOrder
    escalatedToSuperStateAdminId?: SortOrder
    managedBySuperAdminId?: SortOrder
  }

  export type ComplaintAvgOrderByAggregateInput = {
    seq?: SortOrder
    upvoteCount?: SortOrder
  }

  export type ComplaintMaxOrderByAggregateInput = {
    id?: SortOrder
    submissionDate?: SortOrder
    seq?: SortOrder
    complainantId?: SortOrder
    categoryId?: SortOrder
    subCategory?: SortOrder
    standardizedSubCategory?: SortOrder
    description?: SortOrder
    urgency?: SortOrder
    attachmentUrl?: SortOrder
    assignedDepartment?: SortOrder
    status?: SortOrder
    sla?: SortOrder
    upvoteCount?: SortOrder
    isPublic?: SortOrder
    escalationLevel?: SortOrder
    dateOfResolution?: SortOrder
    assignedAgentId?: SortOrder
    managedByMunicipalAdminId?: SortOrder
    moderatedByMunicipalAdminId?: SortOrder
    crossDeptIssueSuperMunicipalId?: SortOrder
    escalatedToStateAdminId?: SortOrder
    escalatedToSuperStateAdminId?: SortOrder
    managedBySuperAdminId?: SortOrder
  }

  export type ComplaintMinOrderByAggregateInput = {
    id?: SortOrder
    submissionDate?: SortOrder
    seq?: SortOrder
    complainantId?: SortOrder
    categoryId?: SortOrder
    subCategory?: SortOrder
    standardizedSubCategory?: SortOrder
    description?: SortOrder
    urgency?: SortOrder
    attachmentUrl?: SortOrder
    assignedDepartment?: SortOrder
    status?: SortOrder
    sla?: SortOrder
    upvoteCount?: SortOrder
    isPublic?: SortOrder
    escalationLevel?: SortOrder
    dateOfResolution?: SortOrder
    assignedAgentId?: SortOrder
    managedByMunicipalAdminId?: SortOrder
    moderatedByMunicipalAdminId?: SortOrder
    crossDeptIssueSuperMunicipalId?: SortOrder
    escalatedToStateAdminId?: SortOrder
    escalatedToSuperStateAdminId?: SortOrder
    managedBySuperAdminId?: SortOrder
  }

  export type ComplaintSumOrderByAggregateInput = {
    seq?: SortOrder
    upvoteCount?: SortOrder
  }

  export type EnumComplaintUrgencyWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ComplaintUrgency | EnumComplaintUrgencyFieldRefInput<$PrismaModel>
    in?: $Enums.ComplaintUrgency[] | ListEnumComplaintUrgencyFieldRefInput<$PrismaModel>
    notIn?: $Enums.ComplaintUrgency[] | ListEnumComplaintUrgencyFieldRefInput<$PrismaModel>
    not?: NestedEnumComplaintUrgencyWithAggregatesFilter<$PrismaModel> | $Enums.ComplaintUrgency
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumComplaintUrgencyFilter<$PrismaModel>
    _max?: NestedEnumComplaintUrgencyFilter<$PrismaModel>
  }

  export type EnumComplaintStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ComplaintStatus | EnumComplaintStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ComplaintStatus[] | ListEnumComplaintStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ComplaintStatus[] | ListEnumComplaintStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumComplaintStatusWithAggregatesFilter<$PrismaModel> | $Enums.ComplaintStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumComplaintStatusFilter<$PrismaModel>
    _max?: NestedEnumComplaintStatusFilter<$PrismaModel>
  }

  export type ComplaintScalarRelationFilter = {
    is?: ComplaintWhereInput
    isNot?: ComplaintWhereInput
  }

  export type ComplaintLocationCountOrderByAggregateInput = {
    id?: SortOrder
    complaintId?: SortOrder
    pin?: SortOrder
    district?: SortOrder
    city?: SortOrder
    locality?: SortOrder
    street?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type ComplaintLocationAvgOrderByAggregateInput = {
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type ComplaintLocationMaxOrderByAggregateInput = {
    id?: SortOrder
    complaintId?: SortOrder
    pin?: SortOrder
    district?: SortOrder
    city?: SortOrder
    locality?: SortOrder
    street?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type ComplaintLocationMinOrderByAggregateInput = {
    id?: SortOrder
    complaintId?: SortOrder
    pin?: SortOrder
    district?: SortOrder
    city?: SortOrder
    locality?: SortOrder
    street?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type ComplaintLocationSumOrderByAggregateInput = {
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type UpvoteUserIdComplaintIdCompoundUniqueInput = {
    userId: string
    complaintId: string
  }

  export type UpvoteCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    complaintId?: SortOrder
    timestamp?: SortOrder
  }

  export type UpvoteMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    complaintId?: SortOrder
    timestamp?: SortOrder
  }

  export type UpvoteMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    complaintId?: SortOrder
    timestamp?: SortOrder
  }

  export type DepartmentMunicipalAdminScalarRelationFilter = {
    is?: DepartmentMunicipalAdminWhereInput
    isNot?: DepartmentMunicipalAdminWhereInput
  }

  export type NewsUpdateCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    date?: SortOrder
    createdById?: SortOrder
  }

  export type NewsUpdateMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    date?: SortOrder
    createdById?: SortOrder
  }

  export type NewsUpdateMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    date?: SortOrder
    createdById?: SortOrder
  }

  export type ComplaintNullableScalarRelationFilter = {
    is?: ComplaintWhereInput | null
    isNot?: ComplaintWhereInput | null
  }

  export type AuditLogCountOrderByAggregateInput = {
    id?: SortOrder
    action?: SortOrder
    userId?: SortOrder
    complaintId?: SortOrder
    timestamp?: SortOrder
    details?: SortOrder
  }

  export type AuditLogMaxOrderByAggregateInput = {
    id?: SortOrder
    action?: SortOrder
    userId?: SortOrder
    complaintId?: SortOrder
    timestamp?: SortOrder
    details?: SortOrder
  }

  export type AuditLogMinOrderByAggregateInput = {
    id?: SortOrder
    action?: SortOrder
    userId?: SortOrder
    complaintId?: SortOrder
    timestamp?: SortOrder
    details?: SortOrder
  }

  export type DepartmentStateAdminScalarRelationFilter = {
    is?: DepartmentStateAdminWhereInput
    isNot?: DepartmentStateAdminWhereInput
  }

  export type RegionalWorkflowCountOrderByAggregateInput = {
    id?: SortOrder
    state?: SortOrder
    municipality?: SortOrder
    category?: SortOrder
    sla?: SortOrder
    createdById?: SortOrder
  }

  export type RegionalWorkflowMaxOrderByAggregateInput = {
    id?: SortOrder
    state?: SortOrder
    municipality?: SortOrder
    category?: SortOrder
    sla?: SortOrder
    createdById?: SortOrder
  }

  export type RegionalWorkflowMinOrderByAggregateInput = {
    id?: SortOrder
    state?: SortOrder
    municipality?: SortOrder
    category?: SortOrder
    sla?: SortOrder
    createdById?: SortOrder
  }

  export type UserLocationCreateNestedOneWithoutUserInput = {
    create?: XOR<UserLocationCreateWithoutUserInput, UserLocationUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserLocationCreateOrConnectWithoutUserInput
    connect?: UserLocationWhereUniqueInput
  }

  export type ComplaintCreateNestedManyWithoutComplainantInput = {
    create?: XOR<ComplaintCreateWithoutComplainantInput, ComplaintUncheckedCreateWithoutComplainantInput> | ComplaintCreateWithoutComplainantInput[] | ComplaintUncheckedCreateWithoutComplainantInput[]
    connectOrCreate?: ComplaintCreateOrConnectWithoutComplainantInput | ComplaintCreateOrConnectWithoutComplainantInput[]
    createMany?: ComplaintCreateManyComplainantInputEnvelope
    connect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
  }

  export type UpvoteCreateNestedManyWithoutUserInput = {
    create?: XOR<UpvoteCreateWithoutUserInput, UpvoteUncheckedCreateWithoutUserInput> | UpvoteCreateWithoutUserInput[] | UpvoteUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UpvoteCreateOrConnectWithoutUserInput | UpvoteCreateOrConnectWithoutUserInput[]
    createMany?: UpvoteCreateManyUserInputEnvelope
    connect?: UpvoteWhereUniqueInput | UpvoteWhereUniqueInput[]
  }

  export type AuditLogCreateNestedManyWithoutUserInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type UserLocationUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<UserLocationCreateWithoutUserInput, UserLocationUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserLocationCreateOrConnectWithoutUserInput
    connect?: UserLocationWhereUniqueInput
  }

  export type ComplaintUncheckedCreateNestedManyWithoutComplainantInput = {
    create?: XOR<ComplaintCreateWithoutComplainantInput, ComplaintUncheckedCreateWithoutComplainantInput> | ComplaintCreateWithoutComplainantInput[] | ComplaintUncheckedCreateWithoutComplainantInput[]
    connectOrCreate?: ComplaintCreateOrConnectWithoutComplainantInput | ComplaintCreateOrConnectWithoutComplainantInput[]
    createMany?: ComplaintCreateManyComplainantInputEnvelope
    connect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
  }

  export type UpvoteUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UpvoteCreateWithoutUserInput, UpvoteUncheckedCreateWithoutUserInput> | UpvoteCreateWithoutUserInput[] | UpvoteUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UpvoteCreateOrConnectWithoutUserInput | UpvoteCreateOrConnectWithoutUserInput[]
    createMany?: UpvoteCreateManyUserInputEnvelope
    connect?: UpvoteWhereUniqueInput | UpvoteWhereUniqueInput[]
  }

  export type AuditLogUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserLocationUpdateOneWithoutUserNestedInput = {
    create?: XOR<UserLocationCreateWithoutUserInput, UserLocationUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserLocationCreateOrConnectWithoutUserInput
    upsert?: UserLocationUpsertWithoutUserInput
    disconnect?: UserLocationWhereInput | boolean
    delete?: UserLocationWhereInput | boolean
    connect?: UserLocationWhereUniqueInput
    update?: XOR<XOR<UserLocationUpdateToOneWithWhereWithoutUserInput, UserLocationUpdateWithoutUserInput>, UserLocationUncheckedUpdateWithoutUserInput>
  }

  export type ComplaintUpdateManyWithoutComplainantNestedInput = {
    create?: XOR<ComplaintCreateWithoutComplainantInput, ComplaintUncheckedCreateWithoutComplainantInput> | ComplaintCreateWithoutComplainantInput[] | ComplaintUncheckedCreateWithoutComplainantInput[]
    connectOrCreate?: ComplaintCreateOrConnectWithoutComplainantInput | ComplaintCreateOrConnectWithoutComplainantInput[]
    upsert?: ComplaintUpsertWithWhereUniqueWithoutComplainantInput | ComplaintUpsertWithWhereUniqueWithoutComplainantInput[]
    createMany?: ComplaintCreateManyComplainantInputEnvelope
    set?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    disconnect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    delete?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    connect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    update?: ComplaintUpdateWithWhereUniqueWithoutComplainantInput | ComplaintUpdateWithWhereUniqueWithoutComplainantInput[]
    updateMany?: ComplaintUpdateManyWithWhereWithoutComplainantInput | ComplaintUpdateManyWithWhereWithoutComplainantInput[]
    deleteMany?: ComplaintScalarWhereInput | ComplaintScalarWhereInput[]
  }

  export type UpvoteUpdateManyWithoutUserNestedInput = {
    create?: XOR<UpvoteCreateWithoutUserInput, UpvoteUncheckedCreateWithoutUserInput> | UpvoteCreateWithoutUserInput[] | UpvoteUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UpvoteCreateOrConnectWithoutUserInput | UpvoteCreateOrConnectWithoutUserInput[]
    upsert?: UpvoteUpsertWithWhereUniqueWithoutUserInput | UpvoteUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UpvoteCreateManyUserInputEnvelope
    set?: UpvoteWhereUniqueInput | UpvoteWhereUniqueInput[]
    disconnect?: UpvoteWhereUniqueInput | UpvoteWhereUniqueInput[]
    delete?: UpvoteWhereUniqueInput | UpvoteWhereUniqueInput[]
    connect?: UpvoteWhereUniqueInput | UpvoteWhereUniqueInput[]
    update?: UpvoteUpdateWithWhereUniqueWithoutUserInput | UpvoteUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UpvoteUpdateManyWithWhereWithoutUserInput | UpvoteUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UpvoteScalarWhereInput | UpvoteScalarWhereInput[]
  }

  export type AuditLogUpdateManyWithoutUserNestedInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutUserInput | AuditLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutUserInput | AuditLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutUserInput | AuditLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type UserLocationUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<UserLocationCreateWithoutUserInput, UserLocationUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserLocationCreateOrConnectWithoutUserInput
    upsert?: UserLocationUpsertWithoutUserInput
    disconnect?: UserLocationWhereInput | boolean
    delete?: UserLocationWhereInput | boolean
    connect?: UserLocationWhereUniqueInput
    update?: XOR<XOR<UserLocationUpdateToOneWithWhereWithoutUserInput, UserLocationUpdateWithoutUserInput>, UserLocationUncheckedUpdateWithoutUserInput>
  }

  export type ComplaintUncheckedUpdateManyWithoutComplainantNestedInput = {
    create?: XOR<ComplaintCreateWithoutComplainantInput, ComplaintUncheckedCreateWithoutComplainantInput> | ComplaintCreateWithoutComplainantInput[] | ComplaintUncheckedCreateWithoutComplainantInput[]
    connectOrCreate?: ComplaintCreateOrConnectWithoutComplainantInput | ComplaintCreateOrConnectWithoutComplainantInput[]
    upsert?: ComplaintUpsertWithWhereUniqueWithoutComplainantInput | ComplaintUpsertWithWhereUniqueWithoutComplainantInput[]
    createMany?: ComplaintCreateManyComplainantInputEnvelope
    set?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    disconnect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    delete?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    connect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    update?: ComplaintUpdateWithWhereUniqueWithoutComplainantInput | ComplaintUpdateWithWhereUniqueWithoutComplainantInput[]
    updateMany?: ComplaintUpdateManyWithWhereWithoutComplainantInput | ComplaintUpdateManyWithWhereWithoutComplainantInput[]
    deleteMany?: ComplaintScalarWhereInput | ComplaintScalarWhereInput[]
  }

  export type UpvoteUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UpvoteCreateWithoutUserInput, UpvoteUncheckedCreateWithoutUserInput> | UpvoteCreateWithoutUserInput[] | UpvoteUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UpvoteCreateOrConnectWithoutUserInput | UpvoteCreateOrConnectWithoutUserInput[]
    upsert?: UpvoteUpsertWithWhereUniqueWithoutUserInput | UpvoteUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UpvoteCreateManyUserInputEnvelope
    set?: UpvoteWhereUniqueInput | UpvoteWhereUniqueInput[]
    disconnect?: UpvoteWhereUniqueInput | UpvoteWhereUniqueInput[]
    delete?: UpvoteWhereUniqueInput | UpvoteWhereUniqueInput[]
    connect?: UpvoteWhereUniqueInput | UpvoteWhereUniqueInput[]
    update?: UpvoteUpdateWithWhereUniqueWithoutUserInput | UpvoteUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UpvoteUpdateManyWithWhereWithoutUserInput | UpvoteUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UpvoteScalarWhereInput | UpvoteScalarWhereInput[]
  }

  export type AuditLogUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutUserInput | AuditLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutUserInput | AuditLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutUserInput | AuditLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutLocationInput = {
    create?: XOR<UserCreateWithoutLocationInput, UserUncheckedCreateWithoutLocationInput>
    connectOrCreate?: UserCreateOrConnectWithoutLocationInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutLocationNestedInput = {
    create?: XOR<UserCreateWithoutLocationInput, UserUncheckedCreateWithoutLocationInput>
    connectOrCreate?: UserCreateOrConnectWithoutLocationInput
    upsert?: UserUpsertWithoutLocationInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutLocationInput, UserUpdateWithoutLocationInput>, UserUncheckedUpdateWithoutLocationInput>
  }

  export type ComplaintCreateNestedManyWithoutAssignedAgentInput = {
    create?: XOR<ComplaintCreateWithoutAssignedAgentInput, ComplaintUncheckedCreateWithoutAssignedAgentInput> | ComplaintCreateWithoutAssignedAgentInput[] | ComplaintUncheckedCreateWithoutAssignedAgentInput[]
    connectOrCreate?: ComplaintCreateOrConnectWithoutAssignedAgentInput | ComplaintCreateOrConnectWithoutAssignedAgentInput[]
    createMany?: ComplaintCreateManyAssignedAgentInputEnvelope
    connect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
  }

  export type ComplaintCreateNestedManyWithoutCoAssignedAgentsInput = {
    create?: XOR<ComplaintCreateWithoutCoAssignedAgentsInput, ComplaintUncheckedCreateWithoutCoAssignedAgentsInput> | ComplaintCreateWithoutCoAssignedAgentsInput[] | ComplaintUncheckedCreateWithoutCoAssignedAgentsInput[]
    connectOrCreate?: ComplaintCreateOrConnectWithoutCoAssignedAgentsInput | ComplaintCreateOrConnectWithoutCoAssignedAgentsInput[]
    connect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
  }

  export type DepartmentMunicipalAdminCreateNestedOneWithoutManagedAgentsInput = {
    create?: XOR<DepartmentMunicipalAdminCreateWithoutManagedAgentsInput, DepartmentMunicipalAdminUncheckedCreateWithoutManagedAgentsInput>
    connectOrCreate?: DepartmentMunicipalAdminCreateOrConnectWithoutManagedAgentsInput
    connect?: DepartmentMunicipalAdminWhereUniqueInput
  }

  export type ComplaintUncheckedCreateNestedManyWithoutAssignedAgentInput = {
    create?: XOR<ComplaintCreateWithoutAssignedAgentInput, ComplaintUncheckedCreateWithoutAssignedAgentInput> | ComplaintCreateWithoutAssignedAgentInput[] | ComplaintUncheckedCreateWithoutAssignedAgentInput[]
    connectOrCreate?: ComplaintCreateOrConnectWithoutAssignedAgentInput | ComplaintCreateOrConnectWithoutAssignedAgentInput[]
    createMany?: ComplaintCreateManyAssignedAgentInputEnvelope
    connect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
  }

  export type ComplaintUncheckedCreateNestedManyWithoutCoAssignedAgentsInput = {
    create?: XOR<ComplaintCreateWithoutCoAssignedAgentsInput, ComplaintUncheckedCreateWithoutCoAssignedAgentsInput> | ComplaintCreateWithoutCoAssignedAgentsInput[] | ComplaintUncheckedCreateWithoutCoAssignedAgentsInput[]
    connectOrCreate?: ComplaintCreateOrConnectWithoutCoAssignedAgentsInput | ComplaintCreateOrConnectWithoutCoAssignedAgentsInput[]
    connect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ComplaintUpdateManyWithoutAssignedAgentNestedInput = {
    create?: XOR<ComplaintCreateWithoutAssignedAgentInput, ComplaintUncheckedCreateWithoutAssignedAgentInput> | ComplaintCreateWithoutAssignedAgentInput[] | ComplaintUncheckedCreateWithoutAssignedAgentInput[]
    connectOrCreate?: ComplaintCreateOrConnectWithoutAssignedAgentInput | ComplaintCreateOrConnectWithoutAssignedAgentInput[]
    upsert?: ComplaintUpsertWithWhereUniqueWithoutAssignedAgentInput | ComplaintUpsertWithWhereUniqueWithoutAssignedAgentInput[]
    createMany?: ComplaintCreateManyAssignedAgentInputEnvelope
    set?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    disconnect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    delete?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    connect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    update?: ComplaintUpdateWithWhereUniqueWithoutAssignedAgentInput | ComplaintUpdateWithWhereUniqueWithoutAssignedAgentInput[]
    updateMany?: ComplaintUpdateManyWithWhereWithoutAssignedAgentInput | ComplaintUpdateManyWithWhereWithoutAssignedAgentInput[]
    deleteMany?: ComplaintScalarWhereInput | ComplaintScalarWhereInput[]
  }

  export type ComplaintUpdateManyWithoutCoAssignedAgentsNestedInput = {
    create?: XOR<ComplaintCreateWithoutCoAssignedAgentsInput, ComplaintUncheckedCreateWithoutCoAssignedAgentsInput> | ComplaintCreateWithoutCoAssignedAgentsInput[] | ComplaintUncheckedCreateWithoutCoAssignedAgentsInput[]
    connectOrCreate?: ComplaintCreateOrConnectWithoutCoAssignedAgentsInput | ComplaintCreateOrConnectWithoutCoAssignedAgentsInput[]
    upsert?: ComplaintUpsertWithWhereUniqueWithoutCoAssignedAgentsInput | ComplaintUpsertWithWhereUniqueWithoutCoAssignedAgentsInput[]
    set?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    disconnect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    delete?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    connect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    update?: ComplaintUpdateWithWhereUniqueWithoutCoAssignedAgentsInput | ComplaintUpdateWithWhereUniqueWithoutCoAssignedAgentsInput[]
    updateMany?: ComplaintUpdateManyWithWhereWithoutCoAssignedAgentsInput | ComplaintUpdateManyWithWhereWithoutCoAssignedAgentsInput[]
    deleteMany?: ComplaintScalarWhereInput | ComplaintScalarWhereInput[]
  }

  export type DepartmentMunicipalAdminUpdateOneWithoutManagedAgentsNestedInput = {
    create?: XOR<DepartmentMunicipalAdminCreateWithoutManagedAgentsInput, DepartmentMunicipalAdminUncheckedCreateWithoutManagedAgentsInput>
    connectOrCreate?: DepartmentMunicipalAdminCreateOrConnectWithoutManagedAgentsInput
    upsert?: DepartmentMunicipalAdminUpsertWithoutManagedAgentsInput
    disconnect?: DepartmentMunicipalAdminWhereInput | boolean
    delete?: DepartmentMunicipalAdminWhereInput | boolean
    connect?: DepartmentMunicipalAdminWhereUniqueInput
    update?: XOR<XOR<DepartmentMunicipalAdminUpdateToOneWithWhereWithoutManagedAgentsInput, DepartmentMunicipalAdminUpdateWithoutManagedAgentsInput>, DepartmentMunicipalAdminUncheckedUpdateWithoutManagedAgentsInput>
  }

  export type ComplaintUncheckedUpdateManyWithoutAssignedAgentNestedInput = {
    create?: XOR<ComplaintCreateWithoutAssignedAgentInput, ComplaintUncheckedCreateWithoutAssignedAgentInput> | ComplaintCreateWithoutAssignedAgentInput[] | ComplaintUncheckedCreateWithoutAssignedAgentInput[]
    connectOrCreate?: ComplaintCreateOrConnectWithoutAssignedAgentInput | ComplaintCreateOrConnectWithoutAssignedAgentInput[]
    upsert?: ComplaintUpsertWithWhereUniqueWithoutAssignedAgentInput | ComplaintUpsertWithWhereUniqueWithoutAssignedAgentInput[]
    createMany?: ComplaintCreateManyAssignedAgentInputEnvelope
    set?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    disconnect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    delete?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    connect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    update?: ComplaintUpdateWithWhereUniqueWithoutAssignedAgentInput | ComplaintUpdateWithWhereUniqueWithoutAssignedAgentInput[]
    updateMany?: ComplaintUpdateManyWithWhereWithoutAssignedAgentInput | ComplaintUpdateManyWithWhereWithoutAssignedAgentInput[]
    deleteMany?: ComplaintScalarWhereInput | ComplaintScalarWhereInput[]
  }

  export type ComplaintUncheckedUpdateManyWithoutCoAssignedAgentsNestedInput = {
    create?: XOR<ComplaintCreateWithoutCoAssignedAgentsInput, ComplaintUncheckedCreateWithoutCoAssignedAgentsInput> | ComplaintCreateWithoutCoAssignedAgentsInput[] | ComplaintUncheckedCreateWithoutCoAssignedAgentsInput[]
    connectOrCreate?: ComplaintCreateOrConnectWithoutCoAssignedAgentsInput | ComplaintCreateOrConnectWithoutCoAssignedAgentsInput[]
    upsert?: ComplaintUpsertWithWhereUniqueWithoutCoAssignedAgentsInput | ComplaintUpsertWithWhereUniqueWithoutCoAssignedAgentsInput[]
    set?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    disconnect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    delete?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    connect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    update?: ComplaintUpdateWithWhereUniqueWithoutCoAssignedAgentsInput | ComplaintUpdateWithWhereUniqueWithoutCoAssignedAgentsInput[]
    updateMany?: ComplaintUpdateManyWithWhereWithoutCoAssignedAgentsInput | ComplaintUpdateManyWithWhereWithoutCoAssignedAgentsInput[]
    deleteMany?: ComplaintScalarWhereInput | ComplaintScalarWhereInput[]
  }

  export type AgentCreateNestedManyWithoutManagedByMunicipalInput = {
    create?: XOR<AgentCreateWithoutManagedByMunicipalInput, AgentUncheckedCreateWithoutManagedByMunicipalInput> | AgentCreateWithoutManagedByMunicipalInput[] | AgentUncheckedCreateWithoutManagedByMunicipalInput[]
    connectOrCreate?: AgentCreateOrConnectWithoutManagedByMunicipalInput | AgentCreateOrConnectWithoutManagedByMunicipalInput[]
    createMany?: AgentCreateManyManagedByMunicipalInputEnvelope
    connect?: AgentWhereUniqueInput | AgentWhereUniqueInput[]
  }

  export type ComplaintCreateNestedManyWithoutManagedByMunicipalAdminInput = {
    create?: XOR<ComplaintCreateWithoutManagedByMunicipalAdminInput, ComplaintUncheckedCreateWithoutManagedByMunicipalAdminInput> | ComplaintCreateWithoutManagedByMunicipalAdminInput[] | ComplaintUncheckedCreateWithoutManagedByMunicipalAdminInput[]
    connectOrCreate?: ComplaintCreateOrConnectWithoutManagedByMunicipalAdminInput | ComplaintCreateOrConnectWithoutManagedByMunicipalAdminInput[]
    createMany?: ComplaintCreateManyManagedByMunicipalAdminInputEnvelope
    connect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
  }

  export type ComplaintCreateNestedManyWithoutModeratedByMunicipalAdminInput = {
    create?: XOR<ComplaintCreateWithoutModeratedByMunicipalAdminInput, ComplaintUncheckedCreateWithoutModeratedByMunicipalAdminInput> | ComplaintCreateWithoutModeratedByMunicipalAdminInput[] | ComplaintUncheckedCreateWithoutModeratedByMunicipalAdminInput[]
    connectOrCreate?: ComplaintCreateOrConnectWithoutModeratedByMunicipalAdminInput | ComplaintCreateOrConnectWithoutModeratedByMunicipalAdminInput[]
    createMany?: ComplaintCreateManyModeratedByMunicipalAdminInputEnvelope
    connect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
  }

  export type NewsUpdateCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<NewsUpdateCreateWithoutCreatedByInput, NewsUpdateUncheckedCreateWithoutCreatedByInput> | NewsUpdateCreateWithoutCreatedByInput[] | NewsUpdateUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: NewsUpdateCreateOrConnectWithoutCreatedByInput | NewsUpdateCreateOrConnectWithoutCreatedByInput[]
    createMany?: NewsUpdateCreateManyCreatedByInputEnvelope
    connect?: NewsUpdateWhereUniqueInput | NewsUpdateWhereUniqueInput[]
  }

  export type DepartmentStateAdminCreateNestedOneWithoutManagedMunicipalAdminsInput = {
    create?: XOR<DepartmentStateAdminCreateWithoutManagedMunicipalAdminsInput, DepartmentStateAdminUncheckedCreateWithoutManagedMunicipalAdminsInput>
    connectOrCreate?: DepartmentStateAdminCreateOrConnectWithoutManagedMunicipalAdminsInput
    connect?: DepartmentStateAdminWhereUniqueInput
  }

  export type SuperMunicipalAdminCreateNestedOneWithoutManagedDepartmentAdminsInput = {
    create?: XOR<SuperMunicipalAdminCreateWithoutManagedDepartmentAdminsInput, SuperMunicipalAdminUncheckedCreateWithoutManagedDepartmentAdminsInput>
    connectOrCreate?: SuperMunicipalAdminCreateOrConnectWithoutManagedDepartmentAdminsInput
    connect?: SuperMunicipalAdminWhereUniqueInput
  }

  export type AgentUncheckedCreateNestedManyWithoutManagedByMunicipalInput = {
    create?: XOR<AgentCreateWithoutManagedByMunicipalInput, AgentUncheckedCreateWithoutManagedByMunicipalInput> | AgentCreateWithoutManagedByMunicipalInput[] | AgentUncheckedCreateWithoutManagedByMunicipalInput[]
    connectOrCreate?: AgentCreateOrConnectWithoutManagedByMunicipalInput | AgentCreateOrConnectWithoutManagedByMunicipalInput[]
    createMany?: AgentCreateManyManagedByMunicipalInputEnvelope
    connect?: AgentWhereUniqueInput | AgentWhereUniqueInput[]
  }

  export type ComplaintUncheckedCreateNestedManyWithoutManagedByMunicipalAdminInput = {
    create?: XOR<ComplaintCreateWithoutManagedByMunicipalAdminInput, ComplaintUncheckedCreateWithoutManagedByMunicipalAdminInput> | ComplaintCreateWithoutManagedByMunicipalAdminInput[] | ComplaintUncheckedCreateWithoutManagedByMunicipalAdminInput[]
    connectOrCreate?: ComplaintCreateOrConnectWithoutManagedByMunicipalAdminInput | ComplaintCreateOrConnectWithoutManagedByMunicipalAdminInput[]
    createMany?: ComplaintCreateManyManagedByMunicipalAdminInputEnvelope
    connect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
  }

  export type ComplaintUncheckedCreateNestedManyWithoutModeratedByMunicipalAdminInput = {
    create?: XOR<ComplaintCreateWithoutModeratedByMunicipalAdminInput, ComplaintUncheckedCreateWithoutModeratedByMunicipalAdminInput> | ComplaintCreateWithoutModeratedByMunicipalAdminInput[] | ComplaintUncheckedCreateWithoutModeratedByMunicipalAdminInput[]
    connectOrCreate?: ComplaintCreateOrConnectWithoutModeratedByMunicipalAdminInput | ComplaintCreateOrConnectWithoutModeratedByMunicipalAdminInput[]
    createMany?: ComplaintCreateManyModeratedByMunicipalAdminInputEnvelope
    connect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
  }

  export type NewsUpdateUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<NewsUpdateCreateWithoutCreatedByInput, NewsUpdateUncheckedCreateWithoutCreatedByInput> | NewsUpdateCreateWithoutCreatedByInput[] | NewsUpdateUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: NewsUpdateCreateOrConnectWithoutCreatedByInput | NewsUpdateCreateOrConnectWithoutCreatedByInput[]
    createMany?: NewsUpdateCreateManyCreatedByInputEnvelope
    connect?: NewsUpdateWhereUniqueInput | NewsUpdateWhereUniqueInput[]
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type AgentUpdateManyWithoutManagedByMunicipalNestedInput = {
    create?: XOR<AgentCreateWithoutManagedByMunicipalInput, AgentUncheckedCreateWithoutManagedByMunicipalInput> | AgentCreateWithoutManagedByMunicipalInput[] | AgentUncheckedCreateWithoutManagedByMunicipalInput[]
    connectOrCreate?: AgentCreateOrConnectWithoutManagedByMunicipalInput | AgentCreateOrConnectWithoutManagedByMunicipalInput[]
    upsert?: AgentUpsertWithWhereUniqueWithoutManagedByMunicipalInput | AgentUpsertWithWhereUniqueWithoutManagedByMunicipalInput[]
    createMany?: AgentCreateManyManagedByMunicipalInputEnvelope
    set?: AgentWhereUniqueInput | AgentWhereUniqueInput[]
    disconnect?: AgentWhereUniqueInput | AgentWhereUniqueInput[]
    delete?: AgentWhereUniqueInput | AgentWhereUniqueInput[]
    connect?: AgentWhereUniqueInput | AgentWhereUniqueInput[]
    update?: AgentUpdateWithWhereUniqueWithoutManagedByMunicipalInput | AgentUpdateWithWhereUniqueWithoutManagedByMunicipalInput[]
    updateMany?: AgentUpdateManyWithWhereWithoutManagedByMunicipalInput | AgentUpdateManyWithWhereWithoutManagedByMunicipalInput[]
    deleteMany?: AgentScalarWhereInput | AgentScalarWhereInput[]
  }

  export type ComplaintUpdateManyWithoutManagedByMunicipalAdminNestedInput = {
    create?: XOR<ComplaintCreateWithoutManagedByMunicipalAdminInput, ComplaintUncheckedCreateWithoutManagedByMunicipalAdminInput> | ComplaintCreateWithoutManagedByMunicipalAdminInput[] | ComplaintUncheckedCreateWithoutManagedByMunicipalAdminInput[]
    connectOrCreate?: ComplaintCreateOrConnectWithoutManagedByMunicipalAdminInput | ComplaintCreateOrConnectWithoutManagedByMunicipalAdminInput[]
    upsert?: ComplaintUpsertWithWhereUniqueWithoutManagedByMunicipalAdminInput | ComplaintUpsertWithWhereUniqueWithoutManagedByMunicipalAdminInput[]
    createMany?: ComplaintCreateManyManagedByMunicipalAdminInputEnvelope
    set?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    disconnect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    delete?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    connect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    update?: ComplaintUpdateWithWhereUniqueWithoutManagedByMunicipalAdminInput | ComplaintUpdateWithWhereUniqueWithoutManagedByMunicipalAdminInput[]
    updateMany?: ComplaintUpdateManyWithWhereWithoutManagedByMunicipalAdminInput | ComplaintUpdateManyWithWhereWithoutManagedByMunicipalAdminInput[]
    deleteMany?: ComplaintScalarWhereInput | ComplaintScalarWhereInput[]
  }

  export type ComplaintUpdateManyWithoutModeratedByMunicipalAdminNestedInput = {
    create?: XOR<ComplaintCreateWithoutModeratedByMunicipalAdminInput, ComplaintUncheckedCreateWithoutModeratedByMunicipalAdminInput> | ComplaintCreateWithoutModeratedByMunicipalAdminInput[] | ComplaintUncheckedCreateWithoutModeratedByMunicipalAdminInput[]
    connectOrCreate?: ComplaintCreateOrConnectWithoutModeratedByMunicipalAdminInput | ComplaintCreateOrConnectWithoutModeratedByMunicipalAdminInput[]
    upsert?: ComplaintUpsertWithWhereUniqueWithoutModeratedByMunicipalAdminInput | ComplaintUpsertWithWhereUniqueWithoutModeratedByMunicipalAdminInput[]
    createMany?: ComplaintCreateManyModeratedByMunicipalAdminInputEnvelope
    set?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    disconnect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    delete?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    connect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    update?: ComplaintUpdateWithWhereUniqueWithoutModeratedByMunicipalAdminInput | ComplaintUpdateWithWhereUniqueWithoutModeratedByMunicipalAdminInput[]
    updateMany?: ComplaintUpdateManyWithWhereWithoutModeratedByMunicipalAdminInput | ComplaintUpdateManyWithWhereWithoutModeratedByMunicipalAdminInput[]
    deleteMany?: ComplaintScalarWhereInput | ComplaintScalarWhereInput[]
  }

  export type NewsUpdateUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<NewsUpdateCreateWithoutCreatedByInput, NewsUpdateUncheckedCreateWithoutCreatedByInput> | NewsUpdateCreateWithoutCreatedByInput[] | NewsUpdateUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: NewsUpdateCreateOrConnectWithoutCreatedByInput | NewsUpdateCreateOrConnectWithoutCreatedByInput[]
    upsert?: NewsUpdateUpsertWithWhereUniqueWithoutCreatedByInput | NewsUpdateUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: NewsUpdateCreateManyCreatedByInputEnvelope
    set?: NewsUpdateWhereUniqueInput | NewsUpdateWhereUniqueInput[]
    disconnect?: NewsUpdateWhereUniqueInput | NewsUpdateWhereUniqueInput[]
    delete?: NewsUpdateWhereUniqueInput | NewsUpdateWhereUniqueInput[]
    connect?: NewsUpdateWhereUniqueInput | NewsUpdateWhereUniqueInput[]
    update?: NewsUpdateUpdateWithWhereUniqueWithoutCreatedByInput | NewsUpdateUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: NewsUpdateUpdateManyWithWhereWithoutCreatedByInput | NewsUpdateUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: NewsUpdateScalarWhereInput | NewsUpdateScalarWhereInput[]
  }

  export type DepartmentStateAdminUpdateOneWithoutManagedMunicipalAdminsNestedInput = {
    create?: XOR<DepartmentStateAdminCreateWithoutManagedMunicipalAdminsInput, DepartmentStateAdminUncheckedCreateWithoutManagedMunicipalAdminsInput>
    connectOrCreate?: DepartmentStateAdminCreateOrConnectWithoutManagedMunicipalAdminsInput
    upsert?: DepartmentStateAdminUpsertWithoutManagedMunicipalAdminsInput
    disconnect?: DepartmentStateAdminWhereInput | boolean
    delete?: DepartmentStateAdminWhereInput | boolean
    connect?: DepartmentStateAdminWhereUniqueInput
    update?: XOR<XOR<DepartmentStateAdminUpdateToOneWithWhereWithoutManagedMunicipalAdminsInput, DepartmentStateAdminUpdateWithoutManagedMunicipalAdminsInput>, DepartmentStateAdminUncheckedUpdateWithoutManagedMunicipalAdminsInput>
  }

  export type SuperMunicipalAdminUpdateOneWithoutManagedDepartmentAdminsNestedInput = {
    create?: XOR<SuperMunicipalAdminCreateWithoutManagedDepartmentAdminsInput, SuperMunicipalAdminUncheckedCreateWithoutManagedDepartmentAdminsInput>
    connectOrCreate?: SuperMunicipalAdminCreateOrConnectWithoutManagedDepartmentAdminsInput
    upsert?: SuperMunicipalAdminUpsertWithoutManagedDepartmentAdminsInput
    disconnect?: SuperMunicipalAdminWhereInput | boolean
    delete?: SuperMunicipalAdminWhereInput | boolean
    connect?: SuperMunicipalAdminWhereUniqueInput
    update?: XOR<XOR<SuperMunicipalAdminUpdateToOneWithWhereWithoutManagedDepartmentAdminsInput, SuperMunicipalAdminUpdateWithoutManagedDepartmentAdminsInput>, SuperMunicipalAdminUncheckedUpdateWithoutManagedDepartmentAdminsInput>
  }

  export type AgentUncheckedUpdateManyWithoutManagedByMunicipalNestedInput = {
    create?: XOR<AgentCreateWithoutManagedByMunicipalInput, AgentUncheckedCreateWithoutManagedByMunicipalInput> | AgentCreateWithoutManagedByMunicipalInput[] | AgentUncheckedCreateWithoutManagedByMunicipalInput[]
    connectOrCreate?: AgentCreateOrConnectWithoutManagedByMunicipalInput | AgentCreateOrConnectWithoutManagedByMunicipalInput[]
    upsert?: AgentUpsertWithWhereUniqueWithoutManagedByMunicipalInput | AgentUpsertWithWhereUniqueWithoutManagedByMunicipalInput[]
    createMany?: AgentCreateManyManagedByMunicipalInputEnvelope
    set?: AgentWhereUniqueInput | AgentWhereUniqueInput[]
    disconnect?: AgentWhereUniqueInput | AgentWhereUniqueInput[]
    delete?: AgentWhereUniqueInput | AgentWhereUniqueInput[]
    connect?: AgentWhereUniqueInput | AgentWhereUniqueInput[]
    update?: AgentUpdateWithWhereUniqueWithoutManagedByMunicipalInput | AgentUpdateWithWhereUniqueWithoutManagedByMunicipalInput[]
    updateMany?: AgentUpdateManyWithWhereWithoutManagedByMunicipalInput | AgentUpdateManyWithWhereWithoutManagedByMunicipalInput[]
    deleteMany?: AgentScalarWhereInput | AgentScalarWhereInput[]
  }

  export type ComplaintUncheckedUpdateManyWithoutManagedByMunicipalAdminNestedInput = {
    create?: XOR<ComplaintCreateWithoutManagedByMunicipalAdminInput, ComplaintUncheckedCreateWithoutManagedByMunicipalAdminInput> | ComplaintCreateWithoutManagedByMunicipalAdminInput[] | ComplaintUncheckedCreateWithoutManagedByMunicipalAdminInput[]
    connectOrCreate?: ComplaintCreateOrConnectWithoutManagedByMunicipalAdminInput | ComplaintCreateOrConnectWithoutManagedByMunicipalAdminInput[]
    upsert?: ComplaintUpsertWithWhereUniqueWithoutManagedByMunicipalAdminInput | ComplaintUpsertWithWhereUniqueWithoutManagedByMunicipalAdminInput[]
    createMany?: ComplaintCreateManyManagedByMunicipalAdminInputEnvelope
    set?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    disconnect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    delete?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    connect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    update?: ComplaintUpdateWithWhereUniqueWithoutManagedByMunicipalAdminInput | ComplaintUpdateWithWhereUniqueWithoutManagedByMunicipalAdminInput[]
    updateMany?: ComplaintUpdateManyWithWhereWithoutManagedByMunicipalAdminInput | ComplaintUpdateManyWithWhereWithoutManagedByMunicipalAdminInput[]
    deleteMany?: ComplaintScalarWhereInput | ComplaintScalarWhereInput[]
  }

  export type ComplaintUncheckedUpdateManyWithoutModeratedByMunicipalAdminNestedInput = {
    create?: XOR<ComplaintCreateWithoutModeratedByMunicipalAdminInput, ComplaintUncheckedCreateWithoutModeratedByMunicipalAdminInput> | ComplaintCreateWithoutModeratedByMunicipalAdminInput[] | ComplaintUncheckedCreateWithoutModeratedByMunicipalAdminInput[]
    connectOrCreate?: ComplaintCreateOrConnectWithoutModeratedByMunicipalAdminInput | ComplaintCreateOrConnectWithoutModeratedByMunicipalAdminInput[]
    upsert?: ComplaintUpsertWithWhereUniqueWithoutModeratedByMunicipalAdminInput | ComplaintUpsertWithWhereUniqueWithoutModeratedByMunicipalAdminInput[]
    createMany?: ComplaintCreateManyModeratedByMunicipalAdminInputEnvelope
    set?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    disconnect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    delete?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    connect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    update?: ComplaintUpdateWithWhereUniqueWithoutModeratedByMunicipalAdminInput | ComplaintUpdateWithWhereUniqueWithoutModeratedByMunicipalAdminInput[]
    updateMany?: ComplaintUpdateManyWithWhereWithoutModeratedByMunicipalAdminInput | ComplaintUpdateManyWithWhereWithoutModeratedByMunicipalAdminInput[]
    deleteMany?: ComplaintScalarWhereInput | ComplaintScalarWhereInput[]
  }

  export type NewsUpdateUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<NewsUpdateCreateWithoutCreatedByInput, NewsUpdateUncheckedCreateWithoutCreatedByInput> | NewsUpdateCreateWithoutCreatedByInput[] | NewsUpdateUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: NewsUpdateCreateOrConnectWithoutCreatedByInput | NewsUpdateCreateOrConnectWithoutCreatedByInput[]
    upsert?: NewsUpdateUpsertWithWhereUniqueWithoutCreatedByInput | NewsUpdateUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: NewsUpdateCreateManyCreatedByInputEnvelope
    set?: NewsUpdateWhereUniqueInput | NewsUpdateWhereUniqueInput[]
    disconnect?: NewsUpdateWhereUniqueInput | NewsUpdateWhereUniqueInput[]
    delete?: NewsUpdateWhereUniqueInput | NewsUpdateWhereUniqueInput[]
    connect?: NewsUpdateWhereUniqueInput | NewsUpdateWhereUniqueInput[]
    update?: NewsUpdateUpdateWithWhereUniqueWithoutCreatedByInput | NewsUpdateUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: NewsUpdateUpdateManyWithWhereWithoutCreatedByInput | NewsUpdateUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: NewsUpdateScalarWhereInput | NewsUpdateScalarWhereInput[]
  }

  export type DepartmentMunicipalAdminCreateNestedManyWithoutManagedBySuperMunicipalInput = {
    create?: XOR<DepartmentMunicipalAdminCreateWithoutManagedBySuperMunicipalInput, DepartmentMunicipalAdminUncheckedCreateWithoutManagedBySuperMunicipalInput> | DepartmentMunicipalAdminCreateWithoutManagedBySuperMunicipalInput[] | DepartmentMunicipalAdminUncheckedCreateWithoutManagedBySuperMunicipalInput[]
    connectOrCreate?: DepartmentMunicipalAdminCreateOrConnectWithoutManagedBySuperMunicipalInput | DepartmentMunicipalAdminCreateOrConnectWithoutManagedBySuperMunicipalInput[]
    createMany?: DepartmentMunicipalAdminCreateManyManagedBySuperMunicipalInputEnvelope
    connect?: DepartmentMunicipalAdminWhereUniqueInput | DepartmentMunicipalAdminWhereUniqueInput[]
  }

  export type ComplaintCreateNestedManyWithoutCrossDeptIssueSuperMunicipalInput = {
    create?: XOR<ComplaintCreateWithoutCrossDeptIssueSuperMunicipalInput, ComplaintUncheckedCreateWithoutCrossDeptIssueSuperMunicipalInput> | ComplaintCreateWithoutCrossDeptIssueSuperMunicipalInput[] | ComplaintUncheckedCreateWithoutCrossDeptIssueSuperMunicipalInput[]
    connectOrCreate?: ComplaintCreateOrConnectWithoutCrossDeptIssueSuperMunicipalInput | ComplaintCreateOrConnectWithoutCrossDeptIssueSuperMunicipalInput[]
    createMany?: ComplaintCreateManyCrossDeptIssueSuperMunicipalInputEnvelope
    connect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
  }

  export type SuperStateAdminCreateNestedOneWithoutManagedSuperMunicipalAdminsInput = {
    create?: XOR<SuperStateAdminCreateWithoutManagedSuperMunicipalAdminsInput, SuperStateAdminUncheckedCreateWithoutManagedSuperMunicipalAdminsInput>
    connectOrCreate?: SuperStateAdminCreateOrConnectWithoutManagedSuperMunicipalAdminsInput
    connect?: SuperStateAdminWhereUniqueInput
  }

  export type DepartmentMunicipalAdminUncheckedCreateNestedManyWithoutManagedBySuperMunicipalInput = {
    create?: XOR<DepartmentMunicipalAdminCreateWithoutManagedBySuperMunicipalInput, DepartmentMunicipalAdminUncheckedCreateWithoutManagedBySuperMunicipalInput> | DepartmentMunicipalAdminCreateWithoutManagedBySuperMunicipalInput[] | DepartmentMunicipalAdminUncheckedCreateWithoutManagedBySuperMunicipalInput[]
    connectOrCreate?: DepartmentMunicipalAdminCreateOrConnectWithoutManagedBySuperMunicipalInput | DepartmentMunicipalAdminCreateOrConnectWithoutManagedBySuperMunicipalInput[]
    createMany?: DepartmentMunicipalAdminCreateManyManagedBySuperMunicipalInputEnvelope
    connect?: DepartmentMunicipalAdminWhereUniqueInput | DepartmentMunicipalAdminWhereUniqueInput[]
  }

  export type ComplaintUncheckedCreateNestedManyWithoutCrossDeptIssueSuperMunicipalInput = {
    create?: XOR<ComplaintCreateWithoutCrossDeptIssueSuperMunicipalInput, ComplaintUncheckedCreateWithoutCrossDeptIssueSuperMunicipalInput> | ComplaintCreateWithoutCrossDeptIssueSuperMunicipalInput[] | ComplaintUncheckedCreateWithoutCrossDeptIssueSuperMunicipalInput[]
    connectOrCreate?: ComplaintCreateOrConnectWithoutCrossDeptIssueSuperMunicipalInput | ComplaintCreateOrConnectWithoutCrossDeptIssueSuperMunicipalInput[]
    createMany?: ComplaintCreateManyCrossDeptIssueSuperMunicipalInputEnvelope
    connect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
  }

  export type DepartmentMunicipalAdminUpdateManyWithoutManagedBySuperMunicipalNestedInput = {
    create?: XOR<DepartmentMunicipalAdminCreateWithoutManagedBySuperMunicipalInput, DepartmentMunicipalAdminUncheckedCreateWithoutManagedBySuperMunicipalInput> | DepartmentMunicipalAdminCreateWithoutManagedBySuperMunicipalInput[] | DepartmentMunicipalAdminUncheckedCreateWithoutManagedBySuperMunicipalInput[]
    connectOrCreate?: DepartmentMunicipalAdminCreateOrConnectWithoutManagedBySuperMunicipalInput | DepartmentMunicipalAdminCreateOrConnectWithoutManagedBySuperMunicipalInput[]
    upsert?: DepartmentMunicipalAdminUpsertWithWhereUniqueWithoutManagedBySuperMunicipalInput | DepartmentMunicipalAdminUpsertWithWhereUniqueWithoutManagedBySuperMunicipalInput[]
    createMany?: DepartmentMunicipalAdminCreateManyManagedBySuperMunicipalInputEnvelope
    set?: DepartmentMunicipalAdminWhereUniqueInput | DepartmentMunicipalAdminWhereUniqueInput[]
    disconnect?: DepartmentMunicipalAdminWhereUniqueInput | DepartmentMunicipalAdminWhereUniqueInput[]
    delete?: DepartmentMunicipalAdminWhereUniqueInput | DepartmentMunicipalAdminWhereUniqueInput[]
    connect?: DepartmentMunicipalAdminWhereUniqueInput | DepartmentMunicipalAdminWhereUniqueInput[]
    update?: DepartmentMunicipalAdminUpdateWithWhereUniqueWithoutManagedBySuperMunicipalInput | DepartmentMunicipalAdminUpdateWithWhereUniqueWithoutManagedBySuperMunicipalInput[]
    updateMany?: DepartmentMunicipalAdminUpdateManyWithWhereWithoutManagedBySuperMunicipalInput | DepartmentMunicipalAdminUpdateManyWithWhereWithoutManagedBySuperMunicipalInput[]
    deleteMany?: DepartmentMunicipalAdminScalarWhereInput | DepartmentMunicipalAdminScalarWhereInput[]
  }

  export type ComplaintUpdateManyWithoutCrossDeptIssueSuperMunicipalNestedInput = {
    create?: XOR<ComplaintCreateWithoutCrossDeptIssueSuperMunicipalInput, ComplaintUncheckedCreateWithoutCrossDeptIssueSuperMunicipalInput> | ComplaintCreateWithoutCrossDeptIssueSuperMunicipalInput[] | ComplaintUncheckedCreateWithoutCrossDeptIssueSuperMunicipalInput[]
    connectOrCreate?: ComplaintCreateOrConnectWithoutCrossDeptIssueSuperMunicipalInput | ComplaintCreateOrConnectWithoutCrossDeptIssueSuperMunicipalInput[]
    upsert?: ComplaintUpsertWithWhereUniqueWithoutCrossDeptIssueSuperMunicipalInput | ComplaintUpsertWithWhereUniqueWithoutCrossDeptIssueSuperMunicipalInput[]
    createMany?: ComplaintCreateManyCrossDeptIssueSuperMunicipalInputEnvelope
    set?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    disconnect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    delete?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    connect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    update?: ComplaintUpdateWithWhereUniqueWithoutCrossDeptIssueSuperMunicipalInput | ComplaintUpdateWithWhereUniqueWithoutCrossDeptIssueSuperMunicipalInput[]
    updateMany?: ComplaintUpdateManyWithWhereWithoutCrossDeptIssueSuperMunicipalInput | ComplaintUpdateManyWithWhereWithoutCrossDeptIssueSuperMunicipalInput[]
    deleteMany?: ComplaintScalarWhereInput | ComplaintScalarWhereInput[]
  }

  export type SuperStateAdminUpdateOneWithoutManagedSuperMunicipalAdminsNestedInput = {
    create?: XOR<SuperStateAdminCreateWithoutManagedSuperMunicipalAdminsInput, SuperStateAdminUncheckedCreateWithoutManagedSuperMunicipalAdminsInput>
    connectOrCreate?: SuperStateAdminCreateOrConnectWithoutManagedSuperMunicipalAdminsInput
    upsert?: SuperStateAdminUpsertWithoutManagedSuperMunicipalAdminsInput
    disconnect?: SuperStateAdminWhereInput | boolean
    delete?: SuperStateAdminWhereInput | boolean
    connect?: SuperStateAdminWhereUniqueInput
    update?: XOR<XOR<SuperStateAdminUpdateToOneWithWhereWithoutManagedSuperMunicipalAdminsInput, SuperStateAdminUpdateWithoutManagedSuperMunicipalAdminsInput>, SuperStateAdminUncheckedUpdateWithoutManagedSuperMunicipalAdminsInput>
  }

  export type DepartmentMunicipalAdminUncheckedUpdateManyWithoutManagedBySuperMunicipalNestedInput = {
    create?: XOR<DepartmentMunicipalAdminCreateWithoutManagedBySuperMunicipalInput, DepartmentMunicipalAdminUncheckedCreateWithoutManagedBySuperMunicipalInput> | DepartmentMunicipalAdminCreateWithoutManagedBySuperMunicipalInput[] | DepartmentMunicipalAdminUncheckedCreateWithoutManagedBySuperMunicipalInput[]
    connectOrCreate?: DepartmentMunicipalAdminCreateOrConnectWithoutManagedBySuperMunicipalInput | DepartmentMunicipalAdminCreateOrConnectWithoutManagedBySuperMunicipalInput[]
    upsert?: DepartmentMunicipalAdminUpsertWithWhereUniqueWithoutManagedBySuperMunicipalInput | DepartmentMunicipalAdminUpsertWithWhereUniqueWithoutManagedBySuperMunicipalInput[]
    createMany?: DepartmentMunicipalAdminCreateManyManagedBySuperMunicipalInputEnvelope
    set?: DepartmentMunicipalAdminWhereUniqueInput | DepartmentMunicipalAdminWhereUniqueInput[]
    disconnect?: DepartmentMunicipalAdminWhereUniqueInput | DepartmentMunicipalAdminWhereUniqueInput[]
    delete?: DepartmentMunicipalAdminWhereUniqueInput | DepartmentMunicipalAdminWhereUniqueInput[]
    connect?: DepartmentMunicipalAdminWhereUniqueInput | DepartmentMunicipalAdminWhereUniqueInput[]
    update?: DepartmentMunicipalAdminUpdateWithWhereUniqueWithoutManagedBySuperMunicipalInput | DepartmentMunicipalAdminUpdateWithWhereUniqueWithoutManagedBySuperMunicipalInput[]
    updateMany?: DepartmentMunicipalAdminUpdateManyWithWhereWithoutManagedBySuperMunicipalInput | DepartmentMunicipalAdminUpdateManyWithWhereWithoutManagedBySuperMunicipalInput[]
    deleteMany?: DepartmentMunicipalAdminScalarWhereInput | DepartmentMunicipalAdminScalarWhereInput[]
  }

  export type ComplaintUncheckedUpdateManyWithoutCrossDeptIssueSuperMunicipalNestedInput = {
    create?: XOR<ComplaintCreateWithoutCrossDeptIssueSuperMunicipalInput, ComplaintUncheckedCreateWithoutCrossDeptIssueSuperMunicipalInput> | ComplaintCreateWithoutCrossDeptIssueSuperMunicipalInput[] | ComplaintUncheckedCreateWithoutCrossDeptIssueSuperMunicipalInput[]
    connectOrCreate?: ComplaintCreateOrConnectWithoutCrossDeptIssueSuperMunicipalInput | ComplaintCreateOrConnectWithoutCrossDeptIssueSuperMunicipalInput[]
    upsert?: ComplaintUpsertWithWhereUniqueWithoutCrossDeptIssueSuperMunicipalInput | ComplaintUpsertWithWhereUniqueWithoutCrossDeptIssueSuperMunicipalInput[]
    createMany?: ComplaintCreateManyCrossDeptIssueSuperMunicipalInputEnvelope
    set?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    disconnect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    delete?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    connect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    update?: ComplaintUpdateWithWhereUniqueWithoutCrossDeptIssueSuperMunicipalInput | ComplaintUpdateWithWhereUniqueWithoutCrossDeptIssueSuperMunicipalInput[]
    updateMany?: ComplaintUpdateManyWithWhereWithoutCrossDeptIssueSuperMunicipalInput | ComplaintUpdateManyWithWhereWithoutCrossDeptIssueSuperMunicipalInput[]
    deleteMany?: ComplaintScalarWhereInput | ComplaintScalarWhereInput[]
  }

  export type DepartmentStateAdminCreatemanagedMunicipalitiesInput = {
    set: string[]
  }

  export type DepartmentMunicipalAdminCreateNestedManyWithoutManagedByStateAdminInput = {
    create?: XOR<DepartmentMunicipalAdminCreateWithoutManagedByStateAdminInput, DepartmentMunicipalAdminUncheckedCreateWithoutManagedByStateAdminInput> | DepartmentMunicipalAdminCreateWithoutManagedByStateAdminInput[] | DepartmentMunicipalAdminUncheckedCreateWithoutManagedByStateAdminInput[]
    connectOrCreate?: DepartmentMunicipalAdminCreateOrConnectWithoutManagedByStateAdminInput | DepartmentMunicipalAdminCreateOrConnectWithoutManagedByStateAdminInput[]
    createMany?: DepartmentMunicipalAdminCreateManyManagedByStateAdminInputEnvelope
    connect?: DepartmentMunicipalAdminWhereUniqueInput | DepartmentMunicipalAdminWhereUniqueInput[]
  }

  export type ComplaintCreateNestedManyWithoutEscalatedToStateAdminInput = {
    create?: XOR<ComplaintCreateWithoutEscalatedToStateAdminInput, ComplaintUncheckedCreateWithoutEscalatedToStateAdminInput> | ComplaintCreateWithoutEscalatedToStateAdminInput[] | ComplaintUncheckedCreateWithoutEscalatedToStateAdminInput[]
    connectOrCreate?: ComplaintCreateOrConnectWithoutEscalatedToStateAdminInput | ComplaintCreateOrConnectWithoutEscalatedToStateAdminInput[]
    createMany?: ComplaintCreateManyEscalatedToStateAdminInputEnvelope
    connect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
  }

  export type RegionalWorkflowCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<RegionalWorkflowCreateWithoutCreatedByInput, RegionalWorkflowUncheckedCreateWithoutCreatedByInput> | RegionalWorkflowCreateWithoutCreatedByInput[] | RegionalWorkflowUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: RegionalWorkflowCreateOrConnectWithoutCreatedByInput | RegionalWorkflowCreateOrConnectWithoutCreatedByInput[]
    createMany?: RegionalWorkflowCreateManyCreatedByInputEnvelope
    connect?: RegionalWorkflowWhereUniqueInput | RegionalWorkflowWhereUniqueInput[]
  }

  export type CategoryCreateNestedManyWithoutManagedByDeptStateAdminInput = {
    create?: XOR<CategoryCreateWithoutManagedByDeptStateAdminInput, CategoryUncheckedCreateWithoutManagedByDeptStateAdminInput> | CategoryCreateWithoutManagedByDeptStateAdminInput[] | CategoryUncheckedCreateWithoutManagedByDeptStateAdminInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutManagedByDeptStateAdminInput | CategoryCreateOrConnectWithoutManagedByDeptStateAdminInput[]
    createMany?: CategoryCreateManyManagedByDeptStateAdminInputEnvelope
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
  }

  export type SuperStateAdminCreateNestedOneWithoutManagedDepartmentAdminsInput = {
    create?: XOR<SuperStateAdminCreateWithoutManagedDepartmentAdminsInput, SuperStateAdminUncheckedCreateWithoutManagedDepartmentAdminsInput>
    connectOrCreate?: SuperStateAdminCreateOrConnectWithoutManagedDepartmentAdminsInput
    connect?: SuperStateAdminWhereUniqueInput
  }

  export type DepartmentMunicipalAdminUncheckedCreateNestedManyWithoutManagedByStateAdminInput = {
    create?: XOR<DepartmentMunicipalAdminCreateWithoutManagedByStateAdminInput, DepartmentMunicipalAdminUncheckedCreateWithoutManagedByStateAdminInput> | DepartmentMunicipalAdminCreateWithoutManagedByStateAdminInput[] | DepartmentMunicipalAdminUncheckedCreateWithoutManagedByStateAdminInput[]
    connectOrCreate?: DepartmentMunicipalAdminCreateOrConnectWithoutManagedByStateAdminInput | DepartmentMunicipalAdminCreateOrConnectWithoutManagedByStateAdminInput[]
    createMany?: DepartmentMunicipalAdminCreateManyManagedByStateAdminInputEnvelope
    connect?: DepartmentMunicipalAdminWhereUniqueInput | DepartmentMunicipalAdminWhereUniqueInput[]
  }

  export type ComplaintUncheckedCreateNestedManyWithoutEscalatedToStateAdminInput = {
    create?: XOR<ComplaintCreateWithoutEscalatedToStateAdminInput, ComplaintUncheckedCreateWithoutEscalatedToStateAdminInput> | ComplaintCreateWithoutEscalatedToStateAdminInput[] | ComplaintUncheckedCreateWithoutEscalatedToStateAdminInput[]
    connectOrCreate?: ComplaintCreateOrConnectWithoutEscalatedToStateAdminInput | ComplaintCreateOrConnectWithoutEscalatedToStateAdminInput[]
    createMany?: ComplaintCreateManyEscalatedToStateAdminInputEnvelope
    connect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
  }

  export type RegionalWorkflowUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<RegionalWorkflowCreateWithoutCreatedByInput, RegionalWorkflowUncheckedCreateWithoutCreatedByInput> | RegionalWorkflowCreateWithoutCreatedByInput[] | RegionalWorkflowUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: RegionalWorkflowCreateOrConnectWithoutCreatedByInput | RegionalWorkflowCreateOrConnectWithoutCreatedByInput[]
    createMany?: RegionalWorkflowCreateManyCreatedByInputEnvelope
    connect?: RegionalWorkflowWhereUniqueInput | RegionalWorkflowWhereUniqueInput[]
  }

  export type CategoryUncheckedCreateNestedManyWithoutManagedByDeptStateAdminInput = {
    create?: XOR<CategoryCreateWithoutManagedByDeptStateAdminInput, CategoryUncheckedCreateWithoutManagedByDeptStateAdminInput> | CategoryCreateWithoutManagedByDeptStateAdminInput[] | CategoryUncheckedCreateWithoutManagedByDeptStateAdminInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutManagedByDeptStateAdminInput | CategoryCreateOrConnectWithoutManagedByDeptStateAdminInput[]
    createMany?: CategoryCreateManyManagedByDeptStateAdminInputEnvelope
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
  }

  export type DepartmentStateAdminUpdatemanagedMunicipalitiesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type DepartmentMunicipalAdminUpdateManyWithoutManagedByStateAdminNestedInput = {
    create?: XOR<DepartmentMunicipalAdminCreateWithoutManagedByStateAdminInput, DepartmentMunicipalAdminUncheckedCreateWithoutManagedByStateAdminInput> | DepartmentMunicipalAdminCreateWithoutManagedByStateAdminInput[] | DepartmentMunicipalAdminUncheckedCreateWithoutManagedByStateAdminInput[]
    connectOrCreate?: DepartmentMunicipalAdminCreateOrConnectWithoutManagedByStateAdminInput | DepartmentMunicipalAdminCreateOrConnectWithoutManagedByStateAdminInput[]
    upsert?: DepartmentMunicipalAdminUpsertWithWhereUniqueWithoutManagedByStateAdminInput | DepartmentMunicipalAdminUpsertWithWhereUniqueWithoutManagedByStateAdminInput[]
    createMany?: DepartmentMunicipalAdminCreateManyManagedByStateAdminInputEnvelope
    set?: DepartmentMunicipalAdminWhereUniqueInput | DepartmentMunicipalAdminWhereUniqueInput[]
    disconnect?: DepartmentMunicipalAdminWhereUniqueInput | DepartmentMunicipalAdminWhereUniqueInput[]
    delete?: DepartmentMunicipalAdminWhereUniqueInput | DepartmentMunicipalAdminWhereUniqueInput[]
    connect?: DepartmentMunicipalAdminWhereUniqueInput | DepartmentMunicipalAdminWhereUniqueInput[]
    update?: DepartmentMunicipalAdminUpdateWithWhereUniqueWithoutManagedByStateAdminInput | DepartmentMunicipalAdminUpdateWithWhereUniqueWithoutManagedByStateAdminInput[]
    updateMany?: DepartmentMunicipalAdminUpdateManyWithWhereWithoutManagedByStateAdminInput | DepartmentMunicipalAdminUpdateManyWithWhereWithoutManagedByStateAdminInput[]
    deleteMany?: DepartmentMunicipalAdminScalarWhereInput | DepartmentMunicipalAdminScalarWhereInput[]
  }

  export type ComplaintUpdateManyWithoutEscalatedToStateAdminNestedInput = {
    create?: XOR<ComplaintCreateWithoutEscalatedToStateAdminInput, ComplaintUncheckedCreateWithoutEscalatedToStateAdminInput> | ComplaintCreateWithoutEscalatedToStateAdminInput[] | ComplaintUncheckedCreateWithoutEscalatedToStateAdminInput[]
    connectOrCreate?: ComplaintCreateOrConnectWithoutEscalatedToStateAdminInput | ComplaintCreateOrConnectWithoutEscalatedToStateAdminInput[]
    upsert?: ComplaintUpsertWithWhereUniqueWithoutEscalatedToStateAdminInput | ComplaintUpsertWithWhereUniqueWithoutEscalatedToStateAdminInput[]
    createMany?: ComplaintCreateManyEscalatedToStateAdminInputEnvelope
    set?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    disconnect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    delete?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    connect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    update?: ComplaintUpdateWithWhereUniqueWithoutEscalatedToStateAdminInput | ComplaintUpdateWithWhereUniqueWithoutEscalatedToStateAdminInput[]
    updateMany?: ComplaintUpdateManyWithWhereWithoutEscalatedToStateAdminInput | ComplaintUpdateManyWithWhereWithoutEscalatedToStateAdminInput[]
    deleteMany?: ComplaintScalarWhereInput | ComplaintScalarWhereInput[]
  }

  export type RegionalWorkflowUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<RegionalWorkflowCreateWithoutCreatedByInput, RegionalWorkflowUncheckedCreateWithoutCreatedByInput> | RegionalWorkflowCreateWithoutCreatedByInput[] | RegionalWorkflowUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: RegionalWorkflowCreateOrConnectWithoutCreatedByInput | RegionalWorkflowCreateOrConnectWithoutCreatedByInput[]
    upsert?: RegionalWorkflowUpsertWithWhereUniqueWithoutCreatedByInput | RegionalWorkflowUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: RegionalWorkflowCreateManyCreatedByInputEnvelope
    set?: RegionalWorkflowWhereUniqueInput | RegionalWorkflowWhereUniqueInput[]
    disconnect?: RegionalWorkflowWhereUniqueInput | RegionalWorkflowWhereUniqueInput[]
    delete?: RegionalWorkflowWhereUniqueInput | RegionalWorkflowWhereUniqueInput[]
    connect?: RegionalWorkflowWhereUniqueInput | RegionalWorkflowWhereUniqueInput[]
    update?: RegionalWorkflowUpdateWithWhereUniqueWithoutCreatedByInput | RegionalWorkflowUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: RegionalWorkflowUpdateManyWithWhereWithoutCreatedByInput | RegionalWorkflowUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: RegionalWorkflowScalarWhereInput | RegionalWorkflowScalarWhereInput[]
  }

  export type CategoryUpdateManyWithoutManagedByDeptStateAdminNestedInput = {
    create?: XOR<CategoryCreateWithoutManagedByDeptStateAdminInput, CategoryUncheckedCreateWithoutManagedByDeptStateAdminInput> | CategoryCreateWithoutManagedByDeptStateAdminInput[] | CategoryUncheckedCreateWithoutManagedByDeptStateAdminInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutManagedByDeptStateAdminInput | CategoryCreateOrConnectWithoutManagedByDeptStateAdminInput[]
    upsert?: CategoryUpsertWithWhereUniqueWithoutManagedByDeptStateAdminInput | CategoryUpsertWithWhereUniqueWithoutManagedByDeptStateAdminInput[]
    createMany?: CategoryCreateManyManagedByDeptStateAdminInputEnvelope
    set?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    disconnect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    delete?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    update?: CategoryUpdateWithWhereUniqueWithoutManagedByDeptStateAdminInput | CategoryUpdateWithWhereUniqueWithoutManagedByDeptStateAdminInput[]
    updateMany?: CategoryUpdateManyWithWhereWithoutManagedByDeptStateAdminInput | CategoryUpdateManyWithWhereWithoutManagedByDeptStateAdminInput[]
    deleteMany?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
  }

  export type SuperStateAdminUpdateOneWithoutManagedDepartmentAdminsNestedInput = {
    create?: XOR<SuperStateAdminCreateWithoutManagedDepartmentAdminsInput, SuperStateAdminUncheckedCreateWithoutManagedDepartmentAdminsInput>
    connectOrCreate?: SuperStateAdminCreateOrConnectWithoutManagedDepartmentAdminsInput
    upsert?: SuperStateAdminUpsertWithoutManagedDepartmentAdminsInput
    disconnect?: SuperStateAdminWhereInput | boolean
    delete?: SuperStateAdminWhereInput | boolean
    connect?: SuperStateAdminWhereUniqueInput
    update?: XOR<XOR<SuperStateAdminUpdateToOneWithWhereWithoutManagedDepartmentAdminsInput, SuperStateAdminUpdateWithoutManagedDepartmentAdminsInput>, SuperStateAdminUncheckedUpdateWithoutManagedDepartmentAdminsInput>
  }

  export type DepartmentMunicipalAdminUncheckedUpdateManyWithoutManagedByStateAdminNestedInput = {
    create?: XOR<DepartmentMunicipalAdminCreateWithoutManagedByStateAdminInput, DepartmentMunicipalAdminUncheckedCreateWithoutManagedByStateAdminInput> | DepartmentMunicipalAdminCreateWithoutManagedByStateAdminInput[] | DepartmentMunicipalAdminUncheckedCreateWithoutManagedByStateAdminInput[]
    connectOrCreate?: DepartmentMunicipalAdminCreateOrConnectWithoutManagedByStateAdminInput | DepartmentMunicipalAdminCreateOrConnectWithoutManagedByStateAdminInput[]
    upsert?: DepartmentMunicipalAdminUpsertWithWhereUniqueWithoutManagedByStateAdminInput | DepartmentMunicipalAdminUpsertWithWhereUniqueWithoutManagedByStateAdminInput[]
    createMany?: DepartmentMunicipalAdminCreateManyManagedByStateAdminInputEnvelope
    set?: DepartmentMunicipalAdminWhereUniqueInput | DepartmentMunicipalAdminWhereUniqueInput[]
    disconnect?: DepartmentMunicipalAdminWhereUniqueInput | DepartmentMunicipalAdminWhereUniqueInput[]
    delete?: DepartmentMunicipalAdminWhereUniqueInput | DepartmentMunicipalAdminWhereUniqueInput[]
    connect?: DepartmentMunicipalAdminWhereUniqueInput | DepartmentMunicipalAdminWhereUniqueInput[]
    update?: DepartmentMunicipalAdminUpdateWithWhereUniqueWithoutManagedByStateAdminInput | DepartmentMunicipalAdminUpdateWithWhereUniqueWithoutManagedByStateAdminInput[]
    updateMany?: DepartmentMunicipalAdminUpdateManyWithWhereWithoutManagedByStateAdminInput | DepartmentMunicipalAdminUpdateManyWithWhereWithoutManagedByStateAdminInput[]
    deleteMany?: DepartmentMunicipalAdminScalarWhereInput | DepartmentMunicipalAdminScalarWhereInput[]
  }

  export type ComplaintUncheckedUpdateManyWithoutEscalatedToStateAdminNestedInput = {
    create?: XOR<ComplaintCreateWithoutEscalatedToStateAdminInput, ComplaintUncheckedCreateWithoutEscalatedToStateAdminInput> | ComplaintCreateWithoutEscalatedToStateAdminInput[] | ComplaintUncheckedCreateWithoutEscalatedToStateAdminInput[]
    connectOrCreate?: ComplaintCreateOrConnectWithoutEscalatedToStateAdminInput | ComplaintCreateOrConnectWithoutEscalatedToStateAdminInput[]
    upsert?: ComplaintUpsertWithWhereUniqueWithoutEscalatedToStateAdminInput | ComplaintUpsertWithWhereUniqueWithoutEscalatedToStateAdminInput[]
    createMany?: ComplaintCreateManyEscalatedToStateAdminInputEnvelope
    set?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    disconnect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    delete?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    connect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    update?: ComplaintUpdateWithWhereUniqueWithoutEscalatedToStateAdminInput | ComplaintUpdateWithWhereUniqueWithoutEscalatedToStateAdminInput[]
    updateMany?: ComplaintUpdateManyWithWhereWithoutEscalatedToStateAdminInput | ComplaintUpdateManyWithWhereWithoutEscalatedToStateAdminInput[]
    deleteMany?: ComplaintScalarWhereInput | ComplaintScalarWhereInput[]
  }

  export type RegionalWorkflowUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<RegionalWorkflowCreateWithoutCreatedByInput, RegionalWorkflowUncheckedCreateWithoutCreatedByInput> | RegionalWorkflowCreateWithoutCreatedByInput[] | RegionalWorkflowUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: RegionalWorkflowCreateOrConnectWithoutCreatedByInput | RegionalWorkflowCreateOrConnectWithoutCreatedByInput[]
    upsert?: RegionalWorkflowUpsertWithWhereUniqueWithoutCreatedByInput | RegionalWorkflowUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: RegionalWorkflowCreateManyCreatedByInputEnvelope
    set?: RegionalWorkflowWhereUniqueInput | RegionalWorkflowWhereUniqueInput[]
    disconnect?: RegionalWorkflowWhereUniqueInput | RegionalWorkflowWhereUniqueInput[]
    delete?: RegionalWorkflowWhereUniqueInput | RegionalWorkflowWhereUniqueInput[]
    connect?: RegionalWorkflowWhereUniqueInput | RegionalWorkflowWhereUniqueInput[]
    update?: RegionalWorkflowUpdateWithWhereUniqueWithoutCreatedByInput | RegionalWorkflowUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: RegionalWorkflowUpdateManyWithWhereWithoutCreatedByInput | RegionalWorkflowUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: RegionalWorkflowScalarWhereInput | RegionalWorkflowScalarWhereInput[]
  }

  export type CategoryUncheckedUpdateManyWithoutManagedByDeptStateAdminNestedInput = {
    create?: XOR<CategoryCreateWithoutManagedByDeptStateAdminInput, CategoryUncheckedCreateWithoutManagedByDeptStateAdminInput> | CategoryCreateWithoutManagedByDeptStateAdminInput[] | CategoryUncheckedCreateWithoutManagedByDeptStateAdminInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutManagedByDeptStateAdminInput | CategoryCreateOrConnectWithoutManagedByDeptStateAdminInput[]
    upsert?: CategoryUpsertWithWhereUniqueWithoutManagedByDeptStateAdminInput | CategoryUpsertWithWhereUniqueWithoutManagedByDeptStateAdminInput[]
    createMany?: CategoryCreateManyManagedByDeptStateAdminInputEnvelope
    set?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    disconnect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    delete?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    update?: CategoryUpdateWithWhereUniqueWithoutManagedByDeptStateAdminInput | CategoryUpdateWithWhereUniqueWithoutManagedByDeptStateAdminInput[]
    updateMany?: CategoryUpdateManyWithWhereWithoutManagedByDeptStateAdminInput | CategoryUpdateManyWithWhereWithoutManagedByDeptStateAdminInput[]
    deleteMany?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
  }

  export type DepartmentStateAdminCreateNestedManyWithoutManagedBySuperStateInput = {
    create?: XOR<DepartmentStateAdminCreateWithoutManagedBySuperStateInput, DepartmentStateAdminUncheckedCreateWithoutManagedBySuperStateInput> | DepartmentStateAdminCreateWithoutManagedBySuperStateInput[] | DepartmentStateAdminUncheckedCreateWithoutManagedBySuperStateInput[]
    connectOrCreate?: DepartmentStateAdminCreateOrConnectWithoutManagedBySuperStateInput | DepartmentStateAdminCreateOrConnectWithoutManagedBySuperStateInput[]
    createMany?: DepartmentStateAdminCreateManyManagedBySuperStateInputEnvelope
    connect?: DepartmentStateAdminWhereUniqueInput | DepartmentStateAdminWhereUniqueInput[]
  }

  export type SuperMunicipalAdminCreateNestedManyWithoutManagedBySuperStateInput = {
    create?: XOR<SuperMunicipalAdminCreateWithoutManagedBySuperStateInput, SuperMunicipalAdminUncheckedCreateWithoutManagedBySuperStateInput> | SuperMunicipalAdminCreateWithoutManagedBySuperStateInput[] | SuperMunicipalAdminUncheckedCreateWithoutManagedBySuperStateInput[]
    connectOrCreate?: SuperMunicipalAdminCreateOrConnectWithoutManagedBySuperStateInput | SuperMunicipalAdminCreateOrConnectWithoutManagedBySuperStateInput[]
    createMany?: SuperMunicipalAdminCreateManyManagedBySuperStateInputEnvelope
    connect?: SuperMunicipalAdminWhereUniqueInput | SuperMunicipalAdminWhereUniqueInput[]
  }

  export type ComplaintCreateNestedManyWithoutEscalatedToSuperStateAdminInput = {
    create?: XOR<ComplaintCreateWithoutEscalatedToSuperStateAdminInput, ComplaintUncheckedCreateWithoutEscalatedToSuperStateAdminInput> | ComplaintCreateWithoutEscalatedToSuperStateAdminInput[] | ComplaintUncheckedCreateWithoutEscalatedToSuperStateAdminInput[]
    connectOrCreate?: ComplaintCreateOrConnectWithoutEscalatedToSuperStateAdminInput | ComplaintCreateOrConnectWithoutEscalatedToSuperStateAdminInput[]
    createMany?: ComplaintCreateManyEscalatedToSuperStateAdminInputEnvelope
    connect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
  }

  export type SuperAdminCreateNestedOneWithoutManagedSuperStateAdminsInput = {
    create?: XOR<SuperAdminCreateWithoutManagedSuperStateAdminsInput, SuperAdminUncheckedCreateWithoutManagedSuperStateAdminsInput>
    connectOrCreate?: SuperAdminCreateOrConnectWithoutManagedSuperStateAdminsInput
    connect?: SuperAdminWhereUniqueInput
  }

  export type DepartmentStateAdminUncheckedCreateNestedManyWithoutManagedBySuperStateInput = {
    create?: XOR<DepartmentStateAdminCreateWithoutManagedBySuperStateInput, DepartmentStateAdminUncheckedCreateWithoutManagedBySuperStateInput> | DepartmentStateAdminCreateWithoutManagedBySuperStateInput[] | DepartmentStateAdminUncheckedCreateWithoutManagedBySuperStateInput[]
    connectOrCreate?: DepartmentStateAdminCreateOrConnectWithoutManagedBySuperStateInput | DepartmentStateAdminCreateOrConnectWithoutManagedBySuperStateInput[]
    createMany?: DepartmentStateAdminCreateManyManagedBySuperStateInputEnvelope
    connect?: DepartmentStateAdminWhereUniqueInput | DepartmentStateAdminWhereUniqueInput[]
  }

  export type SuperMunicipalAdminUncheckedCreateNestedManyWithoutManagedBySuperStateInput = {
    create?: XOR<SuperMunicipalAdminCreateWithoutManagedBySuperStateInput, SuperMunicipalAdminUncheckedCreateWithoutManagedBySuperStateInput> | SuperMunicipalAdminCreateWithoutManagedBySuperStateInput[] | SuperMunicipalAdminUncheckedCreateWithoutManagedBySuperStateInput[]
    connectOrCreate?: SuperMunicipalAdminCreateOrConnectWithoutManagedBySuperStateInput | SuperMunicipalAdminCreateOrConnectWithoutManagedBySuperStateInput[]
    createMany?: SuperMunicipalAdminCreateManyManagedBySuperStateInputEnvelope
    connect?: SuperMunicipalAdminWhereUniqueInput | SuperMunicipalAdminWhereUniqueInput[]
  }

  export type ComplaintUncheckedCreateNestedManyWithoutEscalatedToSuperStateAdminInput = {
    create?: XOR<ComplaintCreateWithoutEscalatedToSuperStateAdminInput, ComplaintUncheckedCreateWithoutEscalatedToSuperStateAdminInput> | ComplaintCreateWithoutEscalatedToSuperStateAdminInput[] | ComplaintUncheckedCreateWithoutEscalatedToSuperStateAdminInput[]
    connectOrCreate?: ComplaintCreateOrConnectWithoutEscalatedToSuperStateAdminInput | ComplaintCreateOrConnectWithoutEscalatedToSuperStateAdminInput[]
    createMany?: ComplaintCreateManyEscalatedToSuperStateAdminInputEnvelope
    connect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
  }

  export type DepartmentStateAdminUpdateManyWithoutManagedBySuperStateNestedInput = {
    create?: XOR<DepartmentStateAdminCreateWithoutManagedBySuperStateInput, DepartmentStateAdminUncheckedCreateWithoutManagedBySuperStateInput> | DepartmentStateAdminCreateWithoutManagedBySuperStateInput[] | DepartmentStateAdminUncheckedCreateWithoutManagedBySuperStateInput[]
    connectOrCreate?: DepartmentStateAdminCreateOrConnectWithoutManagedBySuperStateInput | DepartmentStateAdminCreateOrConnectWithoutManagedBySuperStateInput[]
    upsert?: DepartmentStateAdminUpsertWithWhereUniqueWithoutManagedBySuperStateInput | DepartmentStateAdminUpsertWithWhereUniqueWithoutManagedBySuperStateInput[]
    createMany?: DepartmentStateAdminCreateManyManagedBySuperStateInputEnvelope
    set?: DepartmentStateAdminWhereUniqueInput | DepartmentStateAdminWhereUniqueInput[]
    disconnect?: DepartmentStateAdminWhereUniqueInput | DepartmentStateAdminWhereUniqueInput[]
    delete?: DepartmentStateAdminWhereUniqueInput | DepartmentStateAdminWhereUniqueInput[]
    connect?: DepartmentStateAdminWhereUniqueInput | DepartmentStateAdminWhereUniqueInput[]
    update?: DepartmentStateAdminUpdateWithWhereUniqueWithoutManagedBySuperStateInput | DepartmentStateAdminUpdateWithWhereUniqueWithoutManagedBySuperStateInput[]
    updateMany?: DepartmentStateAdminUpdateManyWithWhereWithoutManagedBySuperStateInput | DepartmentStateAdminUpdateManyWithWhereWithoutManagedBySuperStateInput[]
    deleteMany?: DepartmentStateAdminScalarWhereInput | DepartmentStateAdminScalarWhereInput[]
  }

  export type SuperMunicipalAdminUpdateManyWithoutManagedBySuperStateNestedInput = {
    create?: XOR<SuperMunicipalAdminCreateWithoutManagedBySuperStateInput, SuperMunicipalAdminUncheckedCreateWithoutManagedBySuperStateInput> | SuperMunicipalAdminCreateWithoutManagedBySuperStateInput[] | SuperMunicipalAdminUncheckedCreateWithoutManagedBySuperStateInput[]
    connectOrCreate?: SuperMunicipalAdminCreateOrConnectWithoutManagedBySuperStateInput | SuperMunicipalAdminCreateOrConnectWithoutManagedBySuperStateInput[]
    upsert?: SuperMunicipalAdminUpsertWithWhereUniqueWithoutManagedBySuperStateInput | SuperMunicipalAdminUpsertWithWhereUniqueWithoutManagedBySuperStateInput[]
    createMany?: SuperMunicipalAdminCreateManyManagedBySuperStateInputEnvelope
    set?: SuperMunicipalAdminWhereUniqueInput | SuperMunicipalAdminWhereUniqueInput[]
    disconnect?: SuperMunicipalAdminWhereUniqueInput | SuperMunicipalAdminWhereUniqueInput[]
    delete?: SuperMunicipalAdminWhereUniqueInput | SuperMunicipalAdminWhereUniqueInput[]
    connect?: SuperMunicipalAdminWhereUniqueInput | SuperMunicipalAdminWhereUniqueInput[]
    update?: SuperMunicipalAdminUpdateWithWhereUniqueWithoutManagedBySuperStateInput | SuperMunicipalAdminUpdateWithWhereUniqueWithoutManagedBySuperStateInput[]
    updateMany?: SuperMunicipalAdminUpdateManyWithWhereWithoutManagedBySuperStateInput | SuperMunicipalAdminUpdateManyWithWhereWithoutManagedBySuperStateInput[]
    deleteMany?: SuperMunicipalAdminScalarWhereInput | SuperMunicipalAdminScalarWhereInput[]
  }

  export type ComplaintUpdateManyWithoutEscalatedToSuperStateAdminNestedInput = {
    create?: XOR<ComplaintCreateWithoutEscalatedToSuperStateAdminInput, ComplaintUncheckedCreateWithoutEscalatedToSuperStateAdminInput> | ComplaintCreateWithoutEscalatedToSuperStateAdminInput[] | ComplaintUncheckedCreateWithoutEscalatedToSuperStateAdminInput[]
    connectOrCreate?: ComplaintCreateOrConnectWithoutEscalatedToSuperStateAdminInput | ComplaintCreateOrConnectWithoutEscalatedToSuperStateAdminInput[]
    upsert?: ComplaintUpsertWithWhereUniqueWithoutEscalatedToSuperStateAdminInput | ComplaintUpsertWithWhereUniqueWithoutEscalatedToSuperStateAdminInput[]
    createMany?: ComplaintCreateManyEscalatedToSuperStateAdminInputEnvelope
    set?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    disconnect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    delete?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    connect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    update?: ComplaintUpdateWithWhereUniqueWithoutEscalatedToSuperStateAdminInput | ComplaintUpdateWithWhereUniqueWithoutEscalatedToSuperStateAdminInput[]
    updateMany?: ComplaintUpdateManyWithWhereWithoutEscalatedToSuperStateAdminInput | ComplaintUpdateManyWithWhereWithoutEscalatedToSuperStateAdminInput[]
    deleteMany?: ComplaintScalarWhereInput | ComplaintScalarWhereInput[]
  }

  export type SuperAdminUpdateOneWithoutManagedSuperStateAdminsNestedInput = {
    create?: XOR<SuperAdminCreateWithoutManagedSuperStateAdminsInput, SuperAdminUncheckedCreateWithoutManagedSuperStateAdminsInput>
    connectOrCreate?: SuperAdminCreateOrConnectWithoutManagedSuperStateAdminsInput
    upsert?: SuperAdminUpsertWithoutManagedSuperStateAdminsInput
    disconnect?: SuperAdminWhereInput | boolean
    delete?: SuperAdminWhereInput | boolean
    connect?: SuperAdminWhereUniqueInput
    update?: XOR<XOR<SuperAdminUpdateToOneWithWhereWithoutManagedSuperStateAdminsInput, SuperAdminUpdateWithoutManagedSuperStateAdminsInput>, SuperAdminUncheckedUpdateWithoutManagedSuperStateAdminsInput>
  }

  export type DepartmentStateAdminUncheckedUpdateManyWithoutManagedBySuperStateNestedInput = {
    create?: XOR<DepartmentStateAdminCreateWithoutManagedBySuperStateInput, DepartmentStateAdminUncheckedCreateWithoutManagedBySuperStateInput> | DepartmentStateAdminCreateWithoutManagedBySuperStateInput[] | DepartmentStateAdminUncheckedCreateWithoutManagedBySuperStateInput[]
    connectOrCreate?: DepartmentStateAdminCreateOrConnectWithoutManagedBySuperStateInput | DepartmentStateAdminCreateOrConnectWithoutManagedBySuperStateInput[]
    upsert?: DepartmentStateAdminUpsertWithWhereUniqueWithoutManagedBySuperStateInput | DepartmentStateAdminUpsertWithWhereUniqueWithoutManagedBySuperStateInput[]
    createMany?: DepartmentStateAdminCreateManyManagedBySuperStateInputEnvelope
    set?: DepartmentStateAdminWhereUniqueInput | DepartmentStateAdminWhereUniqueInput[]
    disconnect?: DepartmentStateAdminWhereUniqueInput | DepartmentStateAdminWhereUniqueInput[]
    delete?: DepartmentStateAdminWhereUniqueInput | DepartmentStateAdminWhereUniqueInput[]
    connect?: DepartmentStateAdminWhereUniqueInput | DepartmentStateAdminWhereUniqueInput[]
    update?: DepartmentStateAdminUpdateWithWhereUniqueWithoutManagedBySuperStateInput | DepartmentStateAdminUpdateWithWhereUniqueWithoutManagedBySuperStateInput[]
    updateMany?: DepartmentStateAdminUpdateManyWithWhereWithoutManagedBySuperStateInput | DepartmentStateAdminUpdateManyWithWhereWithoutManagedBySuperStateInput[]
    deleteMany?: DepartmentStateAdminScalarWhereInput | DepartmentStateAdminScalarWhereInput[]
  }

  export type SuperMunicipalAdminUncheckedUpdateManyWithoutManagedBySuperStateNestedInput = {
    create?: XOR<SuperMunicipalAdminCreateWithoutManagedBySuperStateInput, SuperMunicipalAdminUncheckedCreateWithoutManagedBySuperStateInput> | SuperMunicipalAdminCreateWithoutManagedBySuperStateInput[] | SuperMunicipalAdminUncheckedCreateWithoutManagedBySuperStateInput[]
    connectOrCreate?: SuperMunicipalAdminCreateOrConnectWithoutManagedBySuperStateInput | SuperMunicipalAdminCreateOrConnectWithoutManagedBySuperStateInput[]
    upsert?: SuperMunicipalAdminUpsertWithWhereUniqueWithoutManagedBySuperStateInput | SuperMunicipalAdminUpsertWithWhereUniqueWithoutManagedBySuperStateInput[]
    createMany?: SuperMunicipalAdminCreateManyManagedBySuperStateInputEnvelope
    set?: SuperMunicipalAdminWhereUniqueInput | SuperMunicipalAdminWhereUniqueInput[]
    disconnect?: SuperMunicipalAdminWhereUniqueInput | SuperMunicipalAdminWhereUniqueInput[]
    delete?: SuperMunicipalAdminWhereUniqueInput | SuperMunicipalAdminWhereUniqueInput[]
    connect?: SuperMunicipalAdminWhereUniqueInput | SuperMunicipalAdminWhereUniqueInput[]
    update?: SuperMunicipalAdminUpdateWithWhereUniqueWithoutManagedBySuperStateInput | SuperMunicipalAdminUpdateWithWhereUniqueWithoutManagedBySuperStateInput[]
    updateMany?: SuperMunicipalAdminUpdateManyWithWhereWithoutManagedBySuperStateInput | SuperMunicipalAdminUpdateManyWithWhereWithoutManagedBySuperStateInput[]
    deleteMany?: SuperMunicipalAdminScalarWhereInput | SuperMunicipalAdminScalarWhereInput[]
  }

  export type ComplaintUncheckedUpdateManyWithoutEscalatedToSuperStateAdminNestedInput = {
    create?: XOR<ComplaintCreateWithoutEscalatedToSuperStateAdminInput, ComplaintUncheckedCreateWithoutEscalatedToSuperStateAdminInput> | ComplaintCreateWithoutEscalatedToSuperStateAdminInput[] | ComplaintUncheckedCreateWithoutEscalatedToSuperStateAdminInput[]
    connectOrCreate?: ComplaintCreateOrConnectWithoutEscalatedToSuperStateAdminInput | ComplaintCreateOrConnectWithoutEscalatedToSuperStateAdminInput[]
    upsert?: ComplaintUpsertWithWhereUniqueWithoutEscalatedToSuperStateAdminInput | ComplaintUpsertWithWhereUniqueWithoutEscalatedToSuperStateAdminInput[]
    createMany?: ComplaintCreateManyEscalatedToSuperStateAdminInputEnvelope
    set?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    disconnect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    delete?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    connect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    update?: ComplaintUpdateWithWhereUniqueWithoutEscalatedToSuperStateAdminInput | ComplaintUpdateWithWhereUniqueWithoutEscalatedToSuperStateAdminInput[]
    updateMany?: ComplaintUpdateManyWithWhereWithoutEscalatedToSuperStateAdminInput | ComplaintUpdateManyWithWhereWithoutEscalatedToSuperStateAdminInput[]
    deleteMany?: ComplaintScalarWhereInput | ComplaintScalarWhereInput[]
  }

  export type CategoryCreateNestedManyWithoutCreatedBySuperAdminInput = {
    create?: XOR<CategoryCreateWithoutCreatedBySuperAdminInput, CategoryUncheckedCreateWithoutCreatedBySuperAdminInput> | CategoryCreateWithoutCreatedBySuperAdminInput[] | CategoryUncheckedCreateWithoutCreatedBySuperAdminInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutCreatedBySuperAdminInput | CategoryCreateOrConnectWithoutCreatedBySuperAdminInput[]
    createMany?: CategoryCreateManyCreatedBySuperAdminInputEnvelope
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
  }

  export type SuperStateAdminCreateNestedManyWithoutManagedBySuperAdminInput = {
    create?: XOR<SuperStateAdminCreateWithoutManagedBySuperAdminInput, SuperStateAdminUncheckedCreateWithoutManagedBySuperAdminInput> | SuperStateAdminCreateWithoutManagedBySuperAdminInput[] | SuperStateAdminUncheckedCreateWithoutManagedBySuperAdminInput[]
    connectOrCreate?: SuperStateAdminCreateOrConnectWithoutManagedBySuperAdminInput | SuperStateAdminCreateOrConnectWithoutManagedBySuperAdminInput[]
    createMany?: SuperStateAdminCreateManyManagedBySuperAdminInputEnvelope
    connect?: SuperStateAdminWhereUniqueInput | SuperStateAdminWhereUniqueInput[]
  }

  export type ComplaintCreateNestedManyWithoutManagedBySuperAdminInput = {
    create?: XOR<ComplaintCreateWithoutManagedBySuperAdminInput, ComplaintUncheckedCreateWithoutManagedBySuperAdminInput> | ComplaintCreateWithoutManagedBySuperAdminInput[] | ComplaintUncheckedCreateWithoutManagedBySuperAdminInput[]
    connectOrCreate?: ComplaintCreateOrConnectWithoutManagedBySuperAdminInput | ComplaintCreateOrConnectWithoutManagedBySuperAdminInput[]
    createMany?: ComplaintCreateManyManagedBySuperAdminInputEnvelope
    connect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
  }

  export type CategoryUncheckedCreateNestedManyWithoutCreatedBySuperAdminInput = {
    create?: XOR<CategoryCreateWithoutCreatedBySuperAdminInput, CategoryUncheckedCreateWithoutCreatedBySuperAdminInput> | CategoryCreateWithoutCreatedBySuperAdminInput[] | CategoryUncheckedCreateWithoutCreatedBySuperAdminInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutCreatedBySuperAdminInput | CategoryCreateOrConnectWithoutCreatedBySuperAdminInput[]
    createMany?: CategoryCreateManyCreatedBySuperAdminInputEnvelope
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
  }

  export type SuperStateAdminUncheckedCreateNestedManyWithoutManagedBySuperAdminInput = {
    create?: XOR<SuperStateAdminCreateWithoutManagedBySuperAdminInput, SuperStateAdminUncheckedCreateWithoutManagedBySuperAdminInput> | SuperStateAdminCreateWithoutManagedBySuperAdminInput[] | SuperStateAdminUncheckedCreateWithoutManagedBySuperAdminInput[]
    connectOrCreate?: SuperStateAdminCreateOrConnectWithoutManagedBySuperAdminInput | SuperStateAdminCreateOrConnectWithoutManagedBySuperAdminInput[]
    createMany?: SuperStateAdminCreateManyManagedBySuperAdminInputEnvelope
    connect?: SuperStateAdminWhereUniqueInput | SuperStateAdminWhereUniqueInput[]
  }

  export type ComplaintUncheckedCreateNestedManyWithoutManagedBySuperAdminInput = {
    create?: XOR<ComplaintCreateWithoutManagedBySuperAdminInput, ComplaintUncheckedCreateWithoutManagedBySuperAdminInput> | ComplaintCreateWithoutManagedBySuperAdminInput[] | ComplaintUncheckedCreateWithoutManagedBySuperAdminInput[]
    connectOrCreate?: ComplaintCreateOrConnectWithoutManagedBySuperAdminInput | ComplaintCreateOrConnectWithoutManagedBySuperAdminInput[]
    createMany?: ComplaintCreateManyManagedBySuperAdminInputEnvelope
    connect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
  }

  export type CategoryUpdateManyWithoutCreatedBySuperAdminNestedInput = {
    create?: XOR<CategoryCreateWithoutCreatedBySuperAdminInput, CategoryUncheckedCreateWithoutCreatedBySuperAdminInput> | CategoryCreateWithoutCreatedBySuperAdminInput[] | CategoryUncheckedCreateWithoutCreatedBySuperAdminInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutCreatedBySuperAdminInput | CategoryCreateOrConnectWithoutCreatedBySuperAdminInput[]
    upsert?: CategoryUpsertWithWhereUniqueWithoutCreatedBySuperAdminInput | CategoryUpsertWithWhereUniqueWithoutCreatedBySuperAdminInput[]
    createMany?: CategoryCreateManyCreatedBySuperAdminInputEnvelope
    set?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    disconnect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    delete?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    update?: CategoryUpdateWithWhereUniqueWithoutCreatedBySuperAdminInput | CategoryUpdateWithWhereUniqueWithoutCreatedBySuperAdminInput[]
    updateMany?: CategoryUpdateManyWithWhereWithoutCreatedBySuperAdminInput | CategoryUpdateManyWithWhereWithoutCreatedBySuperAdminInput[]
    deleteMany?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
  }

  export type SuperStateAdminUpdateManyWithoutManagedBySuperAdminNestedInput = {
    create?: XOR<SuperStateAdminCreateWithoutManagedBySuperAdminInput, SuperStateAdminUncheckedCreateWithoutManagedBySuperAdminInput> | SuperStateAdminCreateWithoutManagedBySuperAdminInput[] | SuperStateAdminUncheckedCreateWithoutManagedBySuperAdminInput[]
    connectOrCreate?: SuperStateAdminCreateOrConnectWithoutManagedBySuperAdminInput | SuperStateAdminCreateOrConnectWithoutManagedBySuperAdminInput[]
    upsert?: SuperStateAdminUpsertWithWhereUniqueWithoutManagedBySuperAdminInput | SuperStateAdminUpsertWithWhereUniqueWithoutManagedBySuperAdminInput[]
    createMany?: SuperStateAdminCreateManyManagedBySuperAdminInputEnvelope
    set?: SuperStateAdminWhereUniqueInput | SuperStateAdminWhereUniqueInput[]
    disconnect?: SuperStateAdminWhereUniqueInput | SuperStateAdminWhereUniqueInput[]
    delete?: SuperStateAdminWhereUniqueInput | SuperStateAdminWhereUniqueInput[]
    connect?: SuperStateAdminWhereUniqueInput | SuperStateAdminWhereUniqueInput[]
    update?: SuperStateAdminUpdateWithWhereUniqueWithoutManagedBySuperAdminInput | SuperStateAdminUpdateWithWhereUniqueWithoutManagedBySuperAdminInput[]
    updateMany?: SuperStateAdminUpdateManyWithWhereWithoutManagedBySuperAdminInput | SuperStateAdminUpdateManyWithWhereWithoutManagedBySuperAdminInput[]
    deleteMany?: SuperStateAdminScalarWhereInput | SuperStateAdminScalarWhereInput[]
  }

  export type ComplaintUpdateManyWithoutManagedBySuperAdminNestedInput = {
    create?: XOR<ComplaintCreateWithoutManagedBySuperAdminInput, ComplaintUncheckedCreateWithoutManagedBySuperAdminInput> | ComplaintCreateWithoutManagedBySuperAdminInput[] | ComplaintUncheckedCreateWithoutManagedBySuperAdminInput[]
    connectOrCreate?: ComplaintCreateOrConnectWithoutManagedBySuperAdminInput | ComplaintCreateOrConnectWithoutManagedBySuperAdminInput[]
    upsert?: ComplaintUpsertWithWhereUniqueWithoutManagedBySuperAdminInput | ComplaintUpsertWithWhereUniqueWithoutManagedBySuperAdminInput[]
    createMany?: ComplaintCreateManyManagedBySuperAdminInputEnvelope
    set?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    disconnect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    delete?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    connect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    update?: ComplaintUpdateWithWhereUniqueWithoutManagedBySuperAdminInput | ComplaintUpdateWithWhereUniqueWithoutManagedBySuperAdminInput[]
    updateMany?: ComplaintUpdateManyWithWhereWithoutManagedBySuperAdminInput | ComplaintUpdateManyWithWhereWithoutManagedBySuperAdminInput[]
    deleteMany?: ComplaintScalarWhereInput | ComplaintScalarWhereInput[]
  }

  export type CategoryUncheckedUpdateManyWithoutCreatedBySuperAdminNestedInput = {
    create?: XOR<CategoryCreateWithoutCreatedBySuperAdminInput, CategoryUncheckedCreateWithoutCreatedBySuperAdminInput> | CategoryCreateWithoutCreatedBySuperAdminInput[] | CategoryUncheckedCreateWithoutCreatedBySuperAdminInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutCreatedBySuperAdminInput | CategoryCreateOrConnectWithoutCreatedBySuperAdminInput[]
    upsert?: CategoryUpsertWithWhereUniqueWithoutCreatedBySuperAdminInput | CategoryUpsertWithWhereUniqueWithoutCreatedBySuperAdminInput[]
    createMany?: CategoryCreateManyCreatedBySuperAdminInputEnvelope
    set?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    disconnect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    delete?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    update?: CategoryUpdateWithWhereUniqueWithoutCreatedBySuperAdminInput | CategoryUpdateWithWhereUniqueWithoutCreatedBySuperAdminInput[]
    updateMany?: CategoryUpdateManyWithWhereWithoutCreatedBySuperAdminInput | CategoryUpdateManyWithWhereWithoutCreatedBySuperAdminInput[]
    deleteMany?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
  }

  export type SuperStateAdminUncheckedUpdateManyWithoutManagedBySuperAdminNestedInput = {
    create?: XOR<SuperStateAdminCreateWithoutManagedBySuperAdminInput, SuperStateAdminUncheckedCreateWithoutManagedBySuperAdminInput> | SuperStateAdminCreateWithoutManagedBySuperAdminInput[] | SuperStateAdminUncheckedCreateWithoutManagedBySuperAdminInput[]
    connectOrCreate?: SuperStateAdminCreateOrConnectWithoutManagedBySuperAdminInput | SuperStateAdminCreateOrConnectWithoutManagedBySuperAdminInput[]
    upsert?: SuperStateAdminUpsertWithWhereUniqueWithoutManagedBySuperAdminInput | SuperStateAdminUpsertWithWhereUniqueWithoutManagedBySuperAdminInput[]
    createMany?: SuperStateAdminCreateManyManagedBySuperAdminInputEnvelope
    set?: SuperStateAdminWhereUniqueInput | SuperStateAdminWhereUniqueInput[]
    disconnect?: SuperStateAdminWhereUniqueInput | SuperStateAdminWhereUniqueInput[]
    delete?: SuperStateAdminWhereUniqueInput | SuperStateAdminWhereUniqueInput[]
    connect?: SuperStateAdminWhereUniqueInput | SuperStateAdminWhereUniqueInput[]
    update?: SuperStateAdminUpdateWithWhereUniqueWithoutManagedBySuperAdminInput | SuperStateAdminUpdateWithWhereUniqueWithoutManagedBySuperAdminInput[]
    updateMany?: SuperStateAdminUpdateManyWithWhereWithoutManagedBySuperAdminInput | SuperStateAdminUpdateManyWithWhereWithoutManagedBySuperAdminInput[]
    deleteMany?: SuperStateAdminScalarWhereInput | SuperStateAdminScalarWhereInput[]
  }

  export type ComplaintUncheckedUpdateManyWithoutManagedBySuperAdminNestedInput = {
    create?: XOR<ComplaintCreateWithoutManagedBySuperAdminInput, ComplaintUncheckedCreateWithoutManagedBySuperAdminInput> | ComplaintCreateWithoutManagedBySuperAdminInput[] | ComplaintUncheckedCreateWithoutManagedBySuperAdminInput[]
    connectOrCreate?: ComplaintCreateOrConnectWithoutManagedBySuperAdminInput | ComplaintCreateOrConnectWithoutManagedBySuperAdminInput[]
    upsert?: ComplaintUpsertWithWhereUniqueWithoutManagedBySuperAdminInput | ComplaintUpsertWithWhereUniqueWithoutManagedBySuperAdminInput[]
    createMany?: ComplaintCreateManyManagedBySuperAdminInputEnvelope
    set?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    disconnect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    delete?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    connect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    update?: ComplaintUpdateWithWhereUniqueWithoutManagedBySuperAdminInput | ComplaintUpdateWithWhereUniqueWithoutManagedBySuperAdminInput[]
    updateMany?: ComplaintUpdateManyWithWhereWithoutManagedBySuperAdminInput | ComplaintUpdateManyWithWhereWithoutManagedBySuperAdminInput[]
    deleteMany?: ComplaintScalarWhereInput | ComplaintScalarWhereInput[]
  }

  export type CategoryCreatesubCategoriesInput = {
    set: string[]
  }

  export type CategoryCreatelearnedSubCategoriesInput = {
    set: string[]
  }

  export type ComplaintCreateNestedManyWithoutCategoryInput = {
    create?: XOR<ComplaintCreateWithoutCategoryInput, ComplaintUncheckedCreateWithoutCategoryInput> | ComplaintCreateWithoutCategoryInput[] | ComplaintUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ComplaintCreateOrConnectWithoutCategoryInput | ComplaintCreateOrConnectWithoutCategoryInput[]
    createMany?: ComplaintCreateManyCategoryInputEnvelope
    connect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
  }

  export type SuperAdminCreateNestedOneWithoutManagedCategoriesInput = {
    create?: XOR<SuperAdminCreateWithoutManagedCategoriesInput, SuperAdminUncheckedCreateWithoutManagedCategoriesInput>
    connectOrCreate?: SuperAdminCreateOrConnectWithoutManagedCategoriesInput
    connect?: SuperAdminWhereUniqueInput
  }

  export type DepartmentStateAdminCreateNestedOneWithoutManagedCategoriesInput = {
    create?: XOR<DepartmentStateAdminCreateWithoutManagedCategoriesInput, DepartmentStateAdminUncheckedCreateWithoutManagedCategoriesInput>
    connectOrCreate?: DepartmentStateAdminCreateOrConnectWithoutManagedCategoriesInput
    connect?: DepartmentStateAdminWhereUniqueInput
  }

  export type ComplaintUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<ComplaintCreateWithoutCategoryInput, ComplaintUncheckedCreateWithoutCategoryInput> | ComplaintCreateWithoutCategoryInput[] | ComplaintUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ComplaintCreateOrConnectWithoutCategoryInput | ComplaintCreateOrConnectWithoutCategoryInput[]
    createMany?: ComplaintCreateManyCategoryInputEnvelope
    connect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
  }

  export type CategoryUpdatesubCategoriesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type CategoryUpdatelearnedSubCategoriesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type ComplaintUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<ComplaintCreateWithoutCategoryInput, ComplaintUncheckedCreateWithoutCategoryInput> | ComplaintCreateWithoutCategoryInput[] | ComplaintUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ComplaintCreateOrConnectWithoutCategoryInput | ComplaintCreateOrConnectWithoutCategoryInput[]
    upsert?: ComplaintUpsertWithWhereUniqueWithoutCategoryInput | ComplaintUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: ComplaintCreateManyCategoryInputEnvelope
    set?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    disconnect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    delete?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    connect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    update?: ComplaintUpdateWithWhereUniqueWithoutCategoryInput | ComplaintUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: ComplaintUpdateManyWithWhereWithoutCategoryInput | ComplaintUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: ComplaintScalarWhereInput | ComplaintScalarWhereInput[]
  }

  export type SuperAdminUpdateOneWithoutManagedCategoriesNestedInput = {
    create?: XOR<SuperAdminCreateWithoutManagedCategoriesInput, SuperAdminUncheckedCreateWithoutManagedCategoriesInput>
    connectOrCreate?: SuperAdminCreateOrConnectWithoutManagedCategoriesInput
    upsert?: SuperAdminUpsertWithoutManagedCategoriesInput
    disconnect?: SuperAdminWhereInput | boolean
    delete?: SuperAdminWhereInput | boolean
    connect?: SuperAdminWhereUniqueInput
    update?: XOR<XOR<SuperAdminUpdateToOneWithWhereWithoutManagedCategoriesInput, SuperAdminUpdateWithoutManagedCategoriesInput>, SuperAdminUncheckedUpdateWithoutManagedCategoriesInput>
  }

  export type DepartmentStateAdminUpdateOneWithoutManagedCategoriesNestedInput = {
    create?: XOR<DepartmentStateAdminCreateWithoutManagedCategoriesInput, DepartmentStateAdminUncheckedCreateWithoutManagedCategoriesInput>
    connectOrCreate?: DepartmentStateAdminCreateOrConnectWithoutManagedCategoriesInput
    upsert?: DepartmentStateAdminUpsertWithoutManagedCategoriesInput
    disconnect?: DepartmentStateAdminWhereInput | boolean
    delete?: DepartmentStateAdminWhereInput | boolean
    connect?: DepartmentStateAdminWhereUniqueInput
    update?: XOR<XOR<DepartmentStateAdminUpdateToOneWithWhereWithoutManagedCategoriesInput, DepartmentStateAdminUpdateWithoutManagedCategoriesInput>, DepartmentStateAdminUncheckedUpdateWithoutManagedCategoriesInput>
  }

  export type ComplaintUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<ComplaintCreateWithoutCategoryInput, ComplaintUncheckedCreateWithoutCategoryInput> | ComplaintCreateWithoutCategoryInput[] | ComplaintUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ComplaintCreateOrConnectWithoutCategoryInput | ComplaintCreateOrConnectWithoutCategoryInput[]
    upsert?: ComplaintUpsertWithWhereUniqueWithoutCategoryInput | ComplaintUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: ComplaintCreateManyCategoryInputEnvelope
    set?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    disconnect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    delete?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    connect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    update?: ComplaintUpdateWithWhereUniqueWithoutCategoryInput | ComplaintUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: ComplaintUpdateManyWithWhereWithoutCategoryInput | ComplaintUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: ComplaintScalarWhereInput | ComplaintScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutComplaintsInput = {
    create?: XOR<UserCreateWithoutComplaintsInput, UserUncheckedCreateWithoutComplaintsInput>
    connectOrCreate?: UserCreateOrConnectWithoutComplaintsInput
    connect?: UserWhereUniqueInput
  }

  export type CategoryCreateNestedOneWithoutComplaintsInput = {
    create?: XOR<CategoryCreateWithoutComplaintsInput, CategoryUncheckedCreateWithoutComplaintsInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutComplaintsInput
    connect?: CategoryWhereUniqueInput
  }

  export type ComplaintLocationCreateNestedOneWithoutComplaintInput = {
    create?: XOR<ComplaintLocationCreateWithoutComplaintInput, ComplaintLocationUncheckedCreateWithoutComplaintInput>
    connectOrCreate?: ComplaintLocationCreateOrConnectWithoutComplaintInput
    connect?: ComplaintLocationWhereUniqueInput
  }

  export type AgentCreateNestedOneWithoutAssignedComplaintsInput = {
    create?: XOR<AgentCreateWithoutAssignedComplaintsInput, AgentUncheckedCreateWithoutAssignedComplaintsInput>
    connectOrCreate?: AgentCreateOrConnectWithoutAssignedComplaintsInput
    connect?: AgentWhereUniqueInput
  }

  export type AgentCreateNestedManyWithoutCoAssignedComplaintsInput = {
    create?: XOR<AgentCreateWithoutCoAssignedComplaintsInput, AgentUncheckedCreateWithoutCoAssignedComplaintsInput> | AgentCreateWithoutCoAssignedComplaintsInput[] | AgentUncheckedCreateWithoutCoAssignedComplaintsInput[]
    connectOrCreate?: AgentCreateOrConnectWithoutCoAssignedComplaintsInput | AgentCreateOrConnectWithoutCoAssignedComplaintsInput[]
    connect?: AgentWhereUniqueInput | AgentWhereUniqueInput[]
  }

  export type DepartmentMunicipalAdminCreateNestedOneWithoutManagedComplaintsInput = {
    create?: XOR<DepartmentMunicipalAdminCreateWithoutManagedComplaintsInput, DepartmentMunicipalAdminUncheckedCreateWithoutManagedComplaintsInput>
    connectOrCreate?: DepartmentMunicipalAdminCreateOrConnectWithoutManagedComplaintsInput
    connect?: DepartmentMunicipalAdminWhereUniqueInput
  }

  export type DepartmentMunicipalAdminCreateNestedOneWithoutCommunityModerationInput = {
    create?: XOR<DepartmentMunicipalAdminCreateWithoutCommunityModerationInput, DepartmentMunicipalAdminUncheckedCreateWithoutCommunityModerationInput>
    connectOrCreate?: DepartmentMunicipalAdminCreateOrConnectWithoutCommunityModerationInput
    connect?: DepartmentMunicipalAdminWhereUniqueInput
  }

  export type SuperMunicipalAdminCreateNestedOneWithoutCrossDepartmentIssuesInput = {
    create?: XOR<SuperMunicipalAdminCreateWithoutCrossDepartmentIssuesInput, SuperMunicipalAdminUncheckedCreateWithoutCrossDepartmentIssuesInput>
    connectOrCreate?: SuperMunicipalAdminCreateOrConnectWithoutCrossDepartmentIssuesInput
    connect?: SuperMunicipalAdminWhereUniqueInput
  }

  export type DepartmentStateAdminCreateNestedOneWithoutEscalatedComplaintsInput = {
    create?: XOR<DepartmentStateAdminCreateWithoutEscalatedComplaintsInput, DepartmentStateAdminUncheckedCreateWithoutEscalatedComplaintsInput>
    connectOrCreate?: DepartmentStateAdminCreateOrConnectWithoutEscalatedComplaintsInput
    connect?: DepartmentStateAdminWhereUniqueInput
  }

  export type SuperStateAdminCreateNestedOneWithoutEscalatedComplaintsInput = {
    create?: XOR<SuperStateAdminCreateWithoutEscalatedComplaintsInput, SuperStateAdminUncheckedCreateWithoutEscalatedComplaintsInput>
    connectOrCreate?: SuperStateAdminCreateOrConnectWithoutEscalatedComplaintsInput
    connect?: SuperStateAdminWhereUniqueInput
  }

  export type SuperAdminCreateNestedOneWithoutManagedComplaintsInput = {
    create?: XOR<SuperAdminCreateWithoutManagedComplaintsInput, SuperAdminUncheckedCreateWithoutManagedComplaintsInput>
    connectOrCreate?: SuperAdminCreateOrConnectWithoutManagedComplaintsInput
    connect?: SuperAdminWhereUniqueInput
  }

  export type UpvoteCreateNestedManyWithoutComplaintInput = {
    create?: XOR<UpvoteCreateWithoutComplaintInput, UpvoteUncheckedCreateWithoutComplaintInput> | UpvoteCreateWithoutComplaintInput[] | UpvoteUncheckedCreateWithoutComplaintInput[]
    connectOrCreate?: UpvoteCreateOrConnectWithoutComplaintInput | UpvoteCreateOrConnectWithoutComplaintInput[]
    createMany?: UpvoteCreateManyComplaintInputEnvelope
    connect?: UpvoteWhereUniqueInput | UpvoteWhereUniqueInput[]
  }

  export type AuditLogCreateNestedManyWithoutComplaintInput = {
    create?: XOR<AuditLogCreateWithoutComplaintInput, AuditLogUncheckedCreateWithoutComplaintInput> | AuditLogCreateWithoutComplaintInput[] | AuditLogUncheckedCreateWithoutComplaintInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutComplaintInput | AuditLogCreateOrConnectWithoutComplaintInput[]
    createMany?: AuditLogCreateManyComplaintInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type ComplaintLocationUncheckedCreateNestedOneWithoutComplaintInput = {
    create?: XOR<ComplaintLocationCreateWithoutComplaintInput, ComplaintLocationUncheckedCreateWithoutComplaintInput>
    connectOrCreate?: ComplaintLocationCreateOrConnectWithoutComplaintInput
    connect?: ComplaintLocationWhereUniqueInput
  }

  export type AgentUncheckedCreateNestedManyWithoutCoAssignedComplaintsInput = {
    create?: XOR<AgentCreateWithoutCoAssignedComplaintsInput, AgentUncheckedCreateWithoutCoAssignedComplaintsInput> | AgentCreateWithoutCoAssignedComplaintsInput[] | AgentUncheckedCreateWithoutCoAssignedComplaintsInput[]
    connectOrCreate?: AgentCreateOrConnectWithoutCoAssignedComplaintsInput | AgentCreateOrConnectWithoutCoAssignedComplaintsInput[]
    connect?: AgentWhereUniqueInput | AgentWhereUniqueInput[]
  }

  export type UpvoteUncheckedCreateNestedManyWithoutComplaintInput = {
    create?: XOR<UpvoteCreateWithoutComplaintInput, UpvoteUncheckedCreateWithoutComplaintInput> | UpvoteCreateWithoutComplaintInput[] | UpvoteUncheckedCreateWithoutComplaintInput[]
    connectOrCreate?: UpvoteCreateOrConnectWithoutComplaintInput | UpvoteCreateOrConnectWithoutComplaintInput[]
    createMany?: UpvoteCreateManyComplaintInputEnvelope
    connect?: UpvoteWhereUniqueInput | UpvoteWhereUniqueInput[]
  }

  export type AuditLogUncheckedCreateNestedManyWithoutComplaintInput = {
    create?: XOR<AuditLogCreateWithoutComplaintInput, AuditLogUncheckedCreateWithoutComplaintInput> | AuditLogCreateWithoutComplaintInput[] | AuditLogUncheckedCreateWithoutComplaintInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutComplaintInput | AuditLogCreateOrConnectWithoutComplaintInput[]
    createMany?: AuditLogCreateManyComplaintInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type EnumComplaintUrgencyFieldUpdateOperationsInput = {
    set?: $Enums.ComplaintUrgency
  }

  export type EnumComplaintStatusFieldUpdateOperationsInput = {
    set?: $Enums.ComplaintStatus
  }

  export type UserUpdateOneRequiredWithoutComplaintsNestedInput = {
    create?: XOR<UserCreateWithoutComplaintsInput, UserUncheckedCreateWithoutComplaintsInput>
    connectOrCreate?: UserCreateOrConnectWithoutComplaintsInput
    upsert?: UserUpsertWithoutComplaintsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutComplaintsInput, UserUpdateWithoutComplaintsInput>, UserUncheckedUpdateWithoutComplaintsInput>
  }

  export type CategoryUpdateOneRequiredWithoutComplaintsNestedInput = {
    create?: XOR<CategoryCreateWithoutComplaintsInput, CategoryUncheckedCreateWithoutComplaintsInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutComplaintsInput
    upsert?: CategoryUpsertWithoutComplaintsInput
    connect?: CategoryWhereUniqueInput
    update?: XOR<XOR<CategoryUpdateToOneWithWhereWithoutComplaintsInput, CategoryUpdateWithoutComplaintsInput>, CategoryUncheckedUpdateWithoutComplaintsInput>
  }

  export type ComplaintLocationUpdateOneWithoutComplaintNestedInput = {
    create?: XOR<ComplaintLocationCreateWithoutComplaintInput, ComplaintLocationUncheckedCreateWithoutComplaintInput>
    connectOrCreate?: ComplaintLocationCreateOrConnectWithoutComplaintInput
    upsert?: ComplaintLocationUpsertWithoutComplaintInput
    disconnect?: ComplaintLocationWhereInput | boolean
    delete?: ComplaintLocationWhereInput | boolean
    connect?: ComplaintLocationWhereUniqueInput
    update?: XOR<XOR<ComplaintLocationUpdateToOneWithWhereWithoutComplaintInput, ComplaintLocationUpdateWithoutComplaintInput>, ComplaintLocationUncheckedUpdateWithoutComplaintInput>
  }

  export type AgentUpdateOneWithoutAssignedComplaintsNestedInput = {
    create?: XOR<AgentCreateWithoutAssignedComplaintsInput, AgentUncheckedCreateWithoutAssignedComplaintsInput>
    connectOrCreate?: AgentCreateOrConnectWithoutAssignedComplaintsInput
    upsert?: AgentUpsertWithoutAssignedComplaintsInput
    disconnect?: AgentWhereInput | boolean
    delete?: AgentWhereInput | boolean
    connect?: AgentWhereUniqueInput
    update?: XOR<XOR<AgentUpdateToOneWithWhereWithoutAssignedComplaintsInput, AgentUpdateWithoutAssignedComplaintsInput>, AgentUncheckedUpdateWithoutAssignedComplaintsInput>
  }

  export type AgentUpdateManyWithoutCoAssignedComplaintsNestedInput = {
    create?: XOR<AgentCreateWithoutCoAssignedComplaintsInput, AgentUncheckedCreateWithoutCoAssignedComplaintsInput> | AgentCreateWithoutCoAssignedComplaintsInput[] | AgentUncheckedCreateWithoutCoAssignedComplaintsInput[]
    connectOrCreate?: AgentCreateOrConnectWithoutCoAssignedComplaintsInput | AgentCreateOrConnectWithoutCoAssignedComplaintsInput[]
    upsert?: AgentUpsertWithWhereUniqueWithoutCoAssignedComplaintsInput | AgentUpsertWithWhereUniqueWithoutCoAssignedComplaintsInput[]
    set?: AgentWhereUniqueInput | AgentWhereUniqueInput[]
    disconnect?: AgentWhereUniqueInput | AgentWhereUniqueInput[]
    delete?: AgentWhereUniqueInput | AgentWhereUniqueInput[]
    connect?: AgentWhereUniqueInput | AgentWhereUniqueInput[]
    update?: AgentUpdateWithWhereUniqueWithoutCoAssignedComplaintsInput | AgentUpdateWithWhereUniqueWithoutCoAssignedComplaintsInput[]
    updateMany?: AgentUpdateManyWithWhereWithoutCoAssignedComplaintsInput | AgentUpdateManyWithWhereWithoutCoAssignedComplaintsInput[]
    deleteMany?: AgentScalarWhereInput | AgentScalarWhereInput[]
  }

  export type DepartmentMunicipalAdminUpdateOneWithoutManagedComplaintsNestedInput = {
    create?: XOR<DepartmentMunicipalAdminCreateWithoutManagedComplaintsInput, DepartmentMunicipalAdminUncheckedCreateWithoutManagedComplaintsInput>
    connectOrCreate?: DepartmentMunicipalAdminCreateOrConnectWithoutManagedComplaintsInput
    upsert?: DepartmentMunicipalAdminUpsertWithoutManagedComplaintsInput
    disconnect?: DepartmentMunicipalAdminWhereInput | boolean
    delete?: DepartmentMunicipalAdminWhereInput | boolean
    connect?: DepartmentMunicipalAdminWhereUniqueInput
    update?: XOR<XOR<DepartmentMunicipalAdminUpdateToOneWithWhereWithoutManagedComplaintsInput, DepartmentMunicipalAdminUpdateWithoutManagedComplaintsInput>, DepartmentMunicipalAdminUncheckedUpdateWithoutManagedComplaintsInput>
  }

  export type DepartmentMunicipalAdminUpdateOneWithoutCommunityModerationNestedInput = {
    create?: XOR<DepartmentMunicipalAdminCreateWithoutCommunityModerationInput, DepartmentMunicipalAdminUncheckedCreateWithoutCommunityModerationInput>
    connectOrCreate?: DepartmentMunicipalAdminCreateOrConnectWithoutCommunityModerationInput
    upsert?: DepartmentMunicipalAdminUpsertWithoutCommunityModerationInput
    disconnect?: DepartmentMunicipalAdminWhereInput | boolean
    delete?: DepartmentMunicipalAdminWhereInput | boolean
    connect?: DepartmentMunicipalAdminWhereUniqueInput
    update?: XOR<XOR<DepartmentMunicipalAdminUpdateToOneWithWhereWithoutCommunityModerationInput, DepartmentMunicipalAdminUpdateWithoutCommunityModerationInput>, DepartmentMunicipalAdminUncheckedUpdateWithoutCommunityModerationInput>
  }

  export type SuperMunicipalAdminUpdateOneWithoutCrossDepartmentIssuesNestedInput = {
    create?: XOR<SuperMunicipalAdminCreateWithoutCrossDepartmentIssuesInput, SuperMunicipalAdminUncheckedCreateWithoutCrossDepartmentIssuesInput>
    connectOrCreate?: SuperMunicipalAdminCreateOrConnectWithoutCrossDepartmentIssuesInput
    upsert?: SuperMunicipalAdminUpsertWithoutCrossDepartmentIssuesInput
    disconnect?: SuperMunicipalAdminWhereInput | boolean
    delete?: SuperMunicipalAdminWhereInput | boolean
    connect?: SuperMunicipalAdminWhereUniqueInput
    update?: XOR<XOR<SuperMunicipalAdminUpdateToOneWithWhereWithoutCrossDepartmentIssuesInput, SuperMunicipalAdminUpdateWithoutCrossDepartmentIssuesInput>, SuperMunicipalAdminUncheckedUpdateWithoutCrossDepartmentIssuesInput>
  }

  export type DepartmentStateAdminUpdateOneWithoutEscalatedComplaintsNestedInput = {
    create?: XOR<DepartmentStateAdminCreateWithoutEscalatedComplaintsInput, DepartmentStateAdminUncheckedCreateWithoutEscalatedComplaintsInput>
    connectOrCreate?: DepartmentStateAdminCreateOrConnectWithoutEscalatedComplaintsInput
    upsert?: DepartmentStateAdminUpsertWithoutEscalatedComplaintsInput
    disconnect?: DepartmentStateAdminWhereInput | boolean
    delete?: DepartmentStateAdminWhereInput | boolean
    connect?: DepartmentStateAdminWhereUniqueInput
    update?: XOR<XOR<DepartmentStateAdminUpdateToOneWithWhereWithoutEscalatedComplaintsInput, DepartmentStateAdminUpdateWithoutEscalatedComplaintsInput>, DepartmentStateAdminUncheckedUpdateWithoutEscalatedComplaintsInput>
  }

  export type SuperStateAdminUpdateOneWithoutEscalatedComplaintsNestedInput = {
    create?: XOR<SuperStateAdminCreateWithoutEscalatedComplaintsInput, SuperStateAdminUncheckedCreateWithoutEscalatedComplaintsInput>
    connectOrCreate?: SuperStateAdminCreateOrConnectWithoutEscalatedComplaintsInput
    upsert?: SuperStateAdminUpsertWithoutEscalatedComplaintsInput
    disconnect?: SuperStateAdminWhereInput | boolean
    delete?: SuperStateAdminWhereInput | boolean
    connect?: SuperStateAdminWhereUniqueInput
    update?: XOR<XOR<SuperStateAdminUpdateToOneWithWhereWithoutEscalatedComplaintsInput, SuperStateAdminUpdateWithoutEscalatedComplaintsInput>, SuperStateAdminUncheckedUpdateWithoutEscalatedComplaintsInput>
  }

  export type SuperAdminUpdateOneWithoutManagedComplaintsNestedInput = {
    create?: XOR<SuperAdminCreateWithoutManagedComplaintsInput, SuperAdminUncheckedCreateWithoutManagedComplaintsInput>
    connectOrCreate?: SuperAdminCreateOrConnectWithoutManagedComplaintsInput
    upsert?: SuperAdminUpsertWithoutManagedComplaintsInput
    disconnect?: SuperAdminWhereInput | boolean
    delete?: SuperAdminWhereInput | boolean
    connect?: SuperAdminWhereUniqueInput
    update?: XOR<XOR<SuperAdminUpdateToOneWithWhereWithoutManagedComplaintsInput, SuperAdminUpdateWithoutManagedComplaintsInput>, SuperAdminUncheckedUpdateWithoutManagedComplaintsInput>
  }

  export type UpvoteUpdateManyWithoutComplaintNestedInput = {
    create?: XOR<UpvoteCreateWithoutComplaintInput, UpvoteUncheckedCreateWithoutComplaintInput> | UpvoteCreateWithoutComplaintInput[] | UpvoteUncheckedCreateWithoutComplaintInput[]
    connectOrCreate?: UpvoteCreateOrConnectWithoutComplaintInput | UpvoteCreateOrConnectWithoutComplaintInput[]
    upsert?: UpvoteUpsertWithWhereUniqueWithoutComplaintInput | UpvoteUpsertWithWhereUniqueWithoutComplaintInput[]
    createMany?: UpvoteCreateManyComplaintInputEnvelope
    set?: UpvoteWhereUniqueInput | UpvoteWhereUniqueInput[]
    disconnect?: UpvoteWhereUniqueInput | UpvoteWhereUniqueInput[]
    delete?: UpvoteWhereUniqueInput | UpvoteWhereUniqueInput[]
    connect?: UpvoteWhereUniqueInput | UpvoteWhereUniqueInput[]
    update?: UpvoteUpdateWithWhereUniqueWithoutComplaintInput | UpvoteUpdateWithWhereUniqueWithoutComplaintInput[]
    updateMany?: UpvoteUpdateManyWithWhereWithoutComplaintInput | UpvoteUpdateManyWithWhereWithoutComplaintInput[]
    deleteMany?: UpvoteScalarWhereInput | UpvoteScalarWhereInput[]
  }

  export type AuditLogUpdateManyWithoutComplaintNestedInput = {
    create?: XOR<AuditLogCreateWithoutComplaintInput, AuditLogUncheckedCreateWithoutComplaintInput> | AuditLogCreateWithoutComplaintInput[] | AuditLogUncheckedCreateWithoutComplaintInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutComplaintInput | AuditLogCreateOrConnectWithoutComplaintInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutComplaintInput | AuditLogUpsertWithWhereUniqueWithoutComplaintInput[]
    createMany?: AuditLogCreateManyComplaintInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutComplaintInput | AuditLogUpdateWithWhereUniqueWithoutComplaintInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutComplaintInput | AuditLogUpdateManyWithWhereWithoutComplaintInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type ComplaintLocationUncheckedUpdateOneWithoutComplaintNestedInput = {
    create?: XOR<ComplaintLocationCreateWithoutComplaintInput, ComplaintLocationUncheckedCreateWithoutComplaintInput>
    connectOrCreate?: ComplaintLocationCreateOrConnectWithoutComplaintInput
    upsert?: ComplaintLocationUpsertWithoutComplaintInput
    disconnect?: ComplaintLocationWhereInput | boolean
    delete?: ComplaintLocationWhereInput | boolean
    connect?: ComplaintLocationWhereUniqueInput
    update?: XOR<XOR<ComplaintLocationUpdateToOneWithWhereWithoutComplaintInput, ComplaintLocationUpdateWithoutComplaintInput>, ComplaintLocationUncheckedUpdateWithoutComplaintInput>
  }

  export type AgentUncheckedUpdateManyWithoutCoAssignedComplaintsNestedInput = {
    create?: XOR<AgentCreateWithoutCoAssignedComplaintsInput, AgentUncheckedCreateWithoutCoAssignedComplaintsInput> | AgentCreateWithoutCoAssignedComplaintsInput[] | AgentUncheckedCreateWithoutCoAssignedComplaintsInput[]
    connectOrCreate?: AgentCreateOrConnectWithoutCoAssignedComplaintsInput | AgentCreateOrConnectWithoutCoAssignedComplaintsInput[]
    upsert?: AgentUpsertWithWhereUniqueWithoutCoAssignedComplaintsInput | AgentUpsertWithWhereUniqueWithoutCoAssignedComplaintsInput[]
    set?: AgentWhereUniqueInput | AgentWhereUniqueInput[]
    disconnect?: AgentWhereUniqueInput | AgentWhereUniqueInput[]
    delete?: AgentWhereUniqueInput | AgentWhereUniqueInput[]
    connect?: AgentWhereUniqueInput | AgentWhereUniqueInput[]
    update?: AgentUpdateWithWhereUniqueWithoutCoAssignedComplaintsInput | AgentUpdateWithWhereUniqueWithoutCoAssignedComplaintsInput[]
    updateMany?: AgentUpdateManyWithWhereWithoutCoAssignedComplaintsInput | AgentUpdateManyWithWhereWithoutCoAssignedComplaintsInput[]
    deleteMany?: AgentScalarWhereInput | AgentScalarWhereInput[]
  }

  export type UpvoteUncheckedUpdateManyWithoutComplaintNestedInput = {
    create?: XOR<UpvoteCreateWithoutComplaintInput, UpvoteUncheckedCreateWithoutComplaintInput> | UpvoteCreateWithoutComplaintInput[] | UpvoteUncheckedCreateWithoutComplaintInput[]
    connectOrCreate?: UpvoteCreateOrConnectWithoutComplaintInput | UpvoteCreateOrConnectWithoutComplaintInput[]
    upsert?: UpvoteUpsertWithWhereUniqueWithoutComplaintInput | UpvoteUpsertWithWhereUniqueWithoutComplaintInput[]
    createMany?: UpvoteCreateManyComplaintInputEnvelope
    set?: UpvoteWhereUniqueInput | UpvoteWhereUniqueInput[]
    disconnect?: UpvoteWhereUniqueInput | UpvoteWhereUniqueInput[]
    delete?: UpvoteWhereUniqueInput | UpvoteWhereUniqueInput[]
    connect?: UpvoteWhereUniqueInput | UpvoteWhereUniqueInput[]
    update?: UpvoteUpdateWithWhereUniqueWithoutComplaintInput | UpvoteUpdateWithWhereUniqueWithoutComplaintInput[]
    updateMany?: UpvoteUpdateManyWithWhereWithoutComplaintInput | UpvoteUpdateManyWithWhereWithoutComplaintInput[]
    deleteMany?: UpvoteScalarWhereInput | UpvoteScalarWhereInput[]
  }

  export type AuditLogUncheckedUpdateManyWithoutComplaintNestedInput = {
    create?: XOR<AuditLogCreateWithoutComplaintInput, AuditLogUncheckedCreateWithoutComplaintInput> | AuditLogCreateWithoutComplaintInput[] | AuditLogUncheckedCreateWithoutComplaintInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutComplaintInput | AuditLogCreateOrConnectWithoutComplaintInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutComplaintInput | AuditLogUpsertWithWhereUniqueWithoutComplaintInput[]
    createMany?: AuditLogCreateManyComplaintInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutComplaintInput | AuditLogUpdateWithWhereUniqueWithoutComplaintInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutComplaintInput | AuditLogUpdateManyWithWhereWithoutComplaintInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type ComplaintCreateNestedOneWithoutLocationInput = {
    create?: XOR<ComplaintCreateWithoutLocationInput, ComplaintUncheckedCreateWithoutLocationInput>
    connectOrCreate?: ComplaintCreateOrConnectWithoutLocationInput
    connect?: ComplaintWhereUniqueInput
  }

  export type ComplaintUpdateOneRequiredWithoutLocationNestedInput = {
    create?: XOR<ComplaintCreateWithoutLocationInput, ComplaintUncheckedCreateWithoutLocationInput>
    connectOrCreate?: ComplaintCreateOrConnectWithoutLocationInput
    upsert?: ComplaintUpsertWithoutLocationInput
    connect?: ComplaintWhereUniqueInput
    update?: XOR<XOR<ComplaintUpdateToOneWithWhereWithoutLocationInput, ComplaintUpdateWithoutLocationInput>, ComplaintUncheckedUpdateWithoutLocationInput>
  }

  export type UserCreateNestedOneWithoutUpvotesInput = {
    create?: XOR<UserCreateWithoutUpvotesInput, UserUncheckedCreateWithoutUpvotesInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpvotesInput
    connect?: UserWhereUniqueInput
  }

  export type ComplaintCreateNestedOneWithoutUpvotesInput = {
    create?: XOR<ComplaintCreateWithoutUpvotesInput, ComplaintUncheckedCreateWithoutUpvotesInput>
    connectOrCreate?: ComplaintCreateOrConnectWithoutUpvotesInput
    connect?: ComplaintWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutUpvotesNestedInput = {
    create?: XOR<UserCreateWithoutUpvotesInput, UserUncheckedCreateWithoutUpvotesInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpvotesInput
    upsert?: UserUpsertWithoutUpvotesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUpvotesInput, UserUpdateWithoutUpvotesInput>, UserUncheckedUpdateWithoutUpvotesInput>
  }

  export type ComplaintUpdateOneRequiredWithoutUpvotesNestedInput = {
    create?: XOR<ComplaintCreateWithoutUpvotesInput, ComplaintUncheckedCreateWithoutUpvotesInput>
    connectOrCreate?: ComplaintCreateOrConnectWithoutUpvotesInput
    upsert?: ComplaintUpsertWithoutUpvotesInput
    connect?: ComplaintWhereUniqueInput
    update?: XOR<XOR<ComplaintUpdateToOneWithWhereWithoutUpvotesInput, ComplaintUpdateWithoutUpvotesInput>, ComplaintUncheckedUpdateWithoutUpvotesInput>
  }

  export type DepartmentMunicipalAdminCreateNestedOneWithoutNewsUpdatesInput = {
    create?: XOR<DepartmentMunicipalAdminCreateWithoutNewsUpdatesInput, DepartmentMunicipalAdminUncheckedCreateWithoutNewsUpdatesInput>
    connectOrCreate?: DepartmentMunicipalAdminCreateOrConnectWithoutNewsUpdatesInput
    connect?: DepartmentMunicipalAdminWhereUniqueInput
  }

  export type DepartmentMunicipalAdminUpdateOneRequiredWithoutNewsUpdatesNestedInput = {
    create?: XOR<DepartmentMunicipalAdminCreateWithoutNewsUpdatesInput, DepartmentMunicipalAdminUncheckedCreateWithoutNewsUpdatesInput>
    connectOrCreate?: DepartmentMunicipalAdminCreateOrConnectWithoutNewsUpdatesInput
    upsert?: DepartmentMunicipalAdminUpsertWithoutNewsUpdatesInput
    connect?: DepartmentMunicipalAdminWhereUniqueInput
    update?: XOR<XOR<DepartmentMunicipalAdminUpdateToOneWithWhereWithoutNewsUpdatesInput, DepartmentMunicipalAdminUpdateWithoutNewsUpdatesInput>, DepartmentMunicipalAdminUncheckedUpdateWithoutNewsUpdatesInput>
  }

  export type UserCreateNestedOneWithoutAuditLogsCreatedInput = {
    create?: XOR<UserCreateWithoutAuditLogsCreatedInput, UserUncheckedCreateWithoutAuditLogsCreatedInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuditLogsCreatedInput
    connect?: UserWhereUniqueInput
  }

  export type ComplaintCreateNestedOneWithoutAuditLogsInput = {
    create?: XOR<ComplaintCreateWithoutAuditLogsInput, ComplaintUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: ComplaintCreateOrConnectWithoutAuditLogsInput
    connect?: ComplaintWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutAuditLogsCreatedNestedInput = {
    create?: XOR<UserCreateWithoutAuditLogsCreatedInput, UserUncheckedCreateWithoutAuditLogsCreatedInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuditLogsCreatedInput
    upsert?: UserUpsertWithoutAuditLogsCreatedInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAuditLogsCreatedInput, UserUpdateWithoutAuditLogsCreatedInput>, UserUncheckedUpdateWithoutAuditLogsCreatedInput>
  }

  export type ComplaintUpdateOneWithoutAuditLogsNestedInput = {
    create?: XOR<ComplaintCreateWithoutAuditLogsInput, ComplaintUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: ComplaintCreateOrConnectWithoutAuditLogsInput
    upsert?: ComplaintUpsertWithoutAuditLogsInput
    disconnect?: ComplaintWhereInput | boolean
    delete?: ComplaintWhereInput | boolean
    connect?: ComplaintWhereUniqueInput
    update?: XOR<XOR<ComplaintUpdateToOneWithWhereWithoutAuditLogsInput, ComplaintUpdateWithoutAuditLogsInput>, ComplaintUncheckedUpdateWithoutAuditLogsInput>
  }

  export type DepartmentStateAdminCreateNestedOneWithoutRegionalWorkflowsInput = {
    create?: XOR<DepartmentStateAdminCreateWithoutRegionalWorkflowsInput, DepartmentStateAdminUncheckedCreateWithoutRegionalWorkflowsInput>
    connectOrCreate?: DepartmentStateAdminCreateOrConnectWithoutRegionalWorkflowsInput
    connect?: DepartmentStateAdminWhereUniqueInput
  }

  export type DepartmentStateAdminUpdateOneRequiredWithoutRegionalWorkflowsNestedInput = {
    create?: XOR<DepartmentStateAdminCreateWithoutRegionalWorkflowsInput, DepartmentStateAdminUncheckedCreateWithoutRegionalWorkflowsInput>
    connectOrCreate?: DepartmentStateAdminCreateOrConnectWithoutRegionalWorkflowsInput
    upsert?: DepartmentStateAdminUpsertWithoutRegionalWorkflowsInput
    connect?: DepartmentStateAdminWhereUniqueInput
    update?: XOR<XOR<DepartmentStateAdminUpdateToOneWithWhereWithoutRegionalWorkflowsInput, DepartmentStateAdminUpdateWithoutRegionalWorkflowsInput>, DepartmentStateAdminUncheckedUpdateWithoutRegionalWorkflowsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedEnumComplaintUrgencyFilter<$PrismaModel = never> = {
    equals?: $Enums.ComplaintUrgency | EnumComplaintUrgencyFieldRefInput<$PrismaModel>
    in?: $Enums.ComplaintUrgency[] | ListEnumComplaintUrgencyFieldRefInput<$PrismaModel>
    notIn?: $Enums.ComplaintUrgency[] | ListEnumComplaintUrgencyFieldRefInput<$PrismaModel>
    not?: NestedEnumComplaintUrgencyFilter<$PrismaModel> | $Enums.ComplaintUrgency
  }

  export type NestedEnumComplaintStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ComplaintStatus | EnumComplaintStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ComplaintStatus[] | ListEnumComplaintStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ComplaintStatus[] | ListEnumComplaintStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumComplaintStatusFilter<$PrismaModel> | $Enums.ComplaintStatus
  }

  export type NestedEnumComplaintUrgencyWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ComplaintUrgency | EnumComplaintUrgencyFieldRefInput<$PrismaModel>
    in?: $Enums.ComplaintUrgency[] | ListEnumComplaintUrgencyFieldRefInput<$PrismaModel>
    notIn?: $Enums.ComplaintUrgency[] | ListEnumComplaintUrgencyFieldRefInput<$PrismaModel>
    not?: NestedEnumComplaintUrgencyWithAggregatesFilter<$PrismaModel> | $Enums.ComplaintUrgency
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumComplaintUrgencyFilter<$PrismaModel>
    _max?: NestedEnumComplaintUrgencyFilter<$PrismaModel>
  }

  export type NestedEnumComplaintStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ComplaintStatus | EnumComplaintStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ComplaintStatus[] | ListEnumComplaintStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ComplaintStatus[] | ListEnumComplaintStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumComplaintStatusWithAggregatesFilter<$PrismaModel> | $Enums.ComplaintStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumComplaintStatusFilter<$PrismaModel>
    _max?: NestedEnumComplaintStatusFilter<$PrismaModel>
  }

  export type UserLocationCreateWithoutUserInput = {
    id?: string
    pin: string
    district: string
    city: string
    locality: string
    street: string
    municipal: string
  }

  export type UserLocationUncheckedCreateWithoutUserInput = {
    id?: string
    pin: string
    district: string
    city: string
    locality: string
    street: string
    municipal: string
  }

  export type UserLocationCreateOrConnectWithoutUserInput = {
    where: UserLocationWhereUniqueInput
    create: XOR<UserLocationCreateWithoutUserInput, UserLocationUncheckedCreateWithoutUserInput>
  }

  export type ComplaintCreateWithoutComplainantInput = {
    id?: string
    submissionDate?: Date | string
    seq?: number
    subCategory: string
    standardizedSubCategory?: string | null
    description: string
    urgency?: $Enums.ComplaintUrgency
    attachmentUrl?: string | null
    assignedDepartment: string
    status?: $Enums.ComplaintStatus
    sla?: string | null
    upvoteCount?: number
    isPublic?: boolean
    escalationLevel?: string | null
    dateOfResolution?: Date | string | null
    category: CategoryCreateNestedOneWithoutComplaintsInput
    location?: ComplaintLocationCreateNestedOneWithoutComplaintInput
    assignedAgent?: AgentCreateNestedOneWithoutAssignedComplaintsInput
    coAssignedAgents?: AgentCreateNestedManyWithoutCoAssignedComplaintsInput
    managedByMunicipalAdmin?: DepartmentMunicipalAdminCreateNestedOneWithoutManagedComplaintsInput
    moderatedByMunicipalAdmin?: DepartmentMunicipalAdminCreateNestedOneWithoutCommunityModerationInput
    crossDeptIssueSuperMunicipal?: SuperMunicipalAdminCreateNestedOneWithoutCrossDepartmentIssuesInput
    escalatedToStateAdmin?: DepartmentStateAdminCreateNestedOneWithoutEscalatedComplaintsInput
    escalatedToSuperStateAdmin?: SuperStateAdminCreateNestedOneWithoutEscalatedComplaintsInput
    managedBySuperAdmin?: SuperAdminCreateNestedOneWithoutManagedComplaintsInput
    upvotes?: UpvoteCreateNestedManyWithoutComplaintInput
    auditLogs?: AuditLogCreateNestedManyWithoutComplaintInput
  }

  export type ComplaintUncheckedCreateWithoutComplainantInput = {
    id?: string
    submissionDate?: Date | string
    seq?: number
    categoryId: string
    subCategory: string
    standardizedSubCategory?: string | null
    description: string
    urgency?: $Enums.ComplaintUrgency
    attachmentUrl?: string | null
    assignedDepartment: string
    status?: $Enums.ComplaintStatus
    sla?: string | null
    upvoteCount?: number
    isPublic?: boolean
    escalationLevel?: string | null
    dateOfResolution?: Date | string | null
    assignedAgentId?: string | null
    managedByMunicipalAdminId?: string | null
    moderatedByMunicipalAdminId?: string | null
    crossDeptIssueSuperMunicipalId?: string | null
    escalatedToStateAdminId?: string | null
    escalatedToSuperStateAdminId?: string | null
    managedBySuperAdminId?: string | null
    location?: ComplaintLocationUncheckedCreateNestedOneWithoutComplaintInput
    coAssignedAgents?: AgentUncheckedCreateNestedManyWithoutCoAssignedComplaintsInput
    upvotes?: UpvoteUncheckedCreateNestedManyWithoutComplaintInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutComplaintInput
  }

  export type ComplaintCreateOrConnectWithoutComplainantInput = {
    where: ComplaintWhereUniqueInput
    create: XOR<ComplaintCreateWithoutComplainantInput, ComplaintUncheckedCreateWithoutComplainantInput>
  }

  export type ComplaintCreateManyComplainantInputEnvelope = {
    data: ComplaintCreateManyComplainantInput | ComplaintCreateManyComplainantInput[]
    skipDuplicates?: boolean
  }

  export type UpvoteCreateWithoutUserInput = {
    id?: string
    timestamp?: Date | string
    complaint: ComplaintCreateNestedOneWithoutUpvotesInput
  }

  export type UpvoteUncheckedCreateWithoutUserInput = {
    id?: string
    complaintId: string
    timestamp?: Date | string
  }

  export type UpvoteCreateOrConnectWithoutUserInput = {
    where: UpvoteWhereUniqueInput
    create: XOR<UpvoteCreateWithoutUserInput, UpvoteUncheckedCreateWithoutUserInput>
  }

  export type UpvoteCreateManyUserInputEnvelope = {
    data: UpvoteCreateManyUserInput | UpvoteCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AuditLogCreateWithoutUserInput = {
    id?: string
    action: string
    timestamp?: Date | string
    details?: string | null
    complaint?: ComplaintCreateNestedOneWithoutAuditLogsInput
  }

  export type AuditLogUncheckedCreateWithoutUserInput = {
    id?: string
    action: string
    complaintId?: string | null
    timestamp?: Date | string
    details?: string | null
  }

  export type AuditLogCreateOrConnectWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    create: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput>
  }

  export type AuditLogCreateManyUserInputEnvelope = {
    data: AuditLogCreateManyUserInput | AuditLogCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserLocationUpsertWithoutUserInput = {
    update: XOR<UserLocationUpdateWithoutUserInput, UserLocationUncheckedUpdateWithoutUserInput>
    create: XOR<UserLocationCreateWithoutUserInput, UserLocationUncheckedCreateWithoutUserInput>
    where?: UserLocationWhereInput
  }

  export type UserLocationUpdateToOneWithWhereWithoutUserInput = {
    where?: UserLocationWhereInput
    data: XOR<UserLocationUpdateWithoutUserInput, UserLocationUncheckedUpdateWithoutUserInput>
  }

  export type UserLocationUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    pin?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    locality?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    municipal?: StringFieldUpdateOperationsInput | string
  }

  export type UserLocationUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    pin?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    locality?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    municipal?: StringFieldUpdateOperationsInput | string
  }

  export type ComplaintUpsertWithWhereUniqueWithoutComplainantInput = {
    where: ComplaintWhereUniqueInput
    update: XOR<ComplaintUpdateWithoutComplainantInput, ComplaintUncheckedUpdateWithoutComplainantInput>
    create: XOR<ComplaintCreateWithoutComplainantInput, ComplaintUncheckedCreateWithoutComplainantInput>
  }

  export type ComplaintUpdateWithWhereUniqueWithoutComplainantInput = {
    where: ComplaintWhereUniqueInput
    data: XOR<ComplaintUpdateWithoutComplainantInput, ComplaintUncheckedUpdateWithoutComplainantInput>
  }

  export type ComplaintUpdateManyWithWhereWithoutComplainantInput = {
    where: ComplaintScalarWhereInput
    data: XOR<ComplaintUpdateManyMutationInput, ComplaintUncheckedUpdateManyWithoutComplainantInput>
  }

  export type ComplaintScalarWhereInput = {
    AND?: ComplaintScalarWhereInput | ComplaintScalarWhereInput[]
    OR?: ComplaintScalarWhereInput[]
    NOT?: ComplaintScalarWhereInput | ComplaintScalarWhereInput[]
    id?: StringFilter<"Complaint"> | string
    submissionDate?: DateTimeFilter<"Complaint"> | Date | string
    seq?: IntFilter<"Complaint"> | number
    complainantId?: StringFilter<"Complaint"> | string
    categoryId?: StringFilter<"Complaint"> | string
    subCategory?: StringFilter<"Complaint"> | string
    standardizedSubCategory?: StringNullableFilter<"Complaint"> | string | null
    description?: StringFilter<"Complaint"> | string
    urgency?: EnumComplaintUrgencyFilter<"Complaint"> | $Enums.ComplaintUrgency
    attachmentUrl?: StringNullableFilter<"Complaint"> | string | null
    assignedDepartment?: StringFilter<"Complaint"> | string
    status?: EnumComplaintStatusFilter<"Complaint"> | $Enums.ComplaintStatus
    sla?: StringNullableFilter<"Complaint"> | string | null
    upvoteCount?: IntFilter<"Complaint"> | number
    isPublic?: BoolFilter<"Complaint"> | boolean
    escalationLevel?: StringNullableFilter<"Complaint"> | string | null
    dateOfResolution?: DateTimeNullableFilter<"Complaint"> | Date | string | null
    assignedAgentId?: StringNullableFilter<"Complaint"> | string | null
    managedByMunicipalAdminId?: StringNullableFilter<"Complaint"> | string | null
    moderatedByMunicipalAdminId?: StringNullableFilter<"Complaint"> | string | null
    crossDeptIssueSuperMunicipalId?: StringNullableFilter<"Complaint"> | string | null
    escalatedToStateAdminId?: StringNullableFilter<"Complaint"> | string | null
    escalatedToSuperStateAdminId?: StringNullableFilter<"Complaint"> | string | null
    managedBySuperAdminId?: StringNullableFilter<"Complaint"> | string | null
  }

  export type UpvoteUpsertWithWhereUniqueWithoutUserInput = {
    where: UpvoteWhereUniqueInput
    update: XOR<UpvoteUpdateWithoutUserInput, UpvoteUncheckedUpdateWithoutUserInput>
    create: XOR<UpvoteCreateWithoutUserInput, UpvoteUncheckedCreateWithoutUserInput>
  }

  export type UpvoteUpdateWithWhereUniqueWithoutUserInput = {
    where: UpvoteWhereUniqueInput
    data: XOR<UpvoteUpdateWithoutUserInput, UpvoteUncheckedUpdateWithoutUserInput>
  }

  export type UpvoteUpdateManyWithWhereWithoutUserInput = {
    where: UpvoteScalarWhereInput
    data: XOR<UpvoteUpdateManyMutationInput, UpvoteUncheckedUpdateManyWithoutUserInput>
  }

  export type UpvoteScalarWhereInput = {
    AND?: UpvoteScalarWhereInput | UpvoteScalarWhereInput[]
    OR?: UpvoteScalarWhereInput[]
    NOT?: UpvoteScalarWhereInput | UpvoteScalarWhereInput[]
    id?: StringFilter<"Upvote"> | string
    userId?: StringFilter<"Upvote"> | string
    complaintId?: StringFilter<"Upvote"> | string
    timestamp?: DateTimeFilter<"Upvote"> | Date | string
  }

  export type AuditLogUpsertWithWhereUniqueWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    update: XOR<AuditLogUpdateWithoutUserInput, AuditLogUncheckedUpdateWithoutUserInput>
    create: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput>
  }

  export type AuditLogUpdateWithWhereUniqueWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    data: XOR<AuditLogUpdateWithoutUserInput, AuditLogUncheckedUpdateWithoutUserInput>
  }

  export type AuditLogUpdateManyWithWhereWithoutUserInput = {
    where: AuditLogScalarWhereInput
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyWithoutUserInput>
  }

  export type AuditLogScalarWhereInput = {
    AND?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
    OR?: AuditLogScalarWhereInput[]
    NOT?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
    id?: StringFilter<"AuditLog"> | string
    action?: StringFilter<"AuditLog"> | string
    userId?: StringFilter<"AuditLog"> | string
    complaintId?: StringNullableFilter<"AuditLog"> | string | null
    timestamp?: DateTimeFilter<"AuditLog"> | Date | string
    details?: StringNullableFilter<"AuditLog"> | string | null
  }

  export type UserCreateWithoutLocationInput = {
    id?: string
    email: string
    name: string
    phoneNumber: string
    dateOfBirth: Date | string
    password: string
    aadhaarId: string
    preferredLanguage?: string
    disability?: string | null
    consentDataCollection?: boolean
    dateOfCreation?: Date | string
    lastUpdated?: Date | string
    status?: string
    complaints?: ComplaintCreateNestedManyWithoutComplainantInput
    upvotes?: UpvoteCreateNestedManyWithoutUserInput
    auditLogsCreated?: AuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutLocationInput = {
    id?: string
    email: string
    name: string
    phoneNumber: string
    dateOfBirth: Date | string
    password: string
    aadhaarId: string
    preferredLanguage?: string
    disability?: string | null
    consentDataCollection?: boolean
    dateOfCreation?: Date | string
    lastUpdated?: Date | string
    status?: string
    complaints?: ComplaintUncheckedCreateNestedManyWithoutComplainantInput
    upvotes?: UpvoteUncheckedCreateNestedManyWithoutUserInput
    auditLogsCreated?: AuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutLocationInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutLocationInput, UserUncheckedCreateWithoutLocationInput>
  }

  export type UserUpsertWithoutLocationInput = {
    update: XOR<UserUpdateWithoutLocationInput, UserUncheckedUpdateWithoutLocationInput>
    create: XOR<UserCreateWithoutLocationInput, UserUncheckedCreateWithoutLocationInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutLocationInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutLocationInput, UserUncheckedUpdateWithoutLocationInput>
  }

  export type UserUpdateWithoutLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
    aadhaarId?: StringFieldUpdateOperationsInput | string
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    disability?: NullableStringFieldUpdateOperationsInput | string | null
    consentDataCollection?: BoolFieldUpdateOperationsInput | boolean
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    complaints?: ComplaintUpdateManyWithoutComplainantNestedInput
    upvotes?: UpvoteUpdateManyWithoutUserNestedInput
    auditLogsCreated?: AuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
    aadhaarId?: StringFieldUpdateOperationsInput | string
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    disability?: NullableStringFieldUpdateOperationsInput | string | null
    consentDataCollection?: BoolFieldUpdateOperationsInput | boolean
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    complaints?: ComplaintUncheckedUpdateManyWithoutComplainantNestedInput
    upvotes?: UpvoteUncheckedUpdateManyWithoutUserNestedInput
    auditLogsCreated?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ComplaintCreateWithoutAssignedAgentInput = {
    id?: string
    submissionDate?: Date | string
    seq?: number
    subCategory: string
    standardizedSubCategory?: string | null
    description: string
    urgency?: $Enums.ComplaintUrgency
    attachmentUrl?: string | null
    assignedDepartment: string
    status?: $Enums.ComplaintStatus
    sla?: string | null
    upvoteCount?: number
    isPublic?: boolean
    escalationLevel?: string | null
    dateOfResolution?: Date | string | null
    complainant: UserCreateNestedOneWithoutComplaintsInput
    category: CategoryCreateNestedOneWithoutComplaintsInput
    location?: ComplaintLocationCreateNestedOneWithoutComplaintInput
    coAssignedAgents?: AgentCreateNestedManyWithoutCoAssignedComplaintsInput
    managedByMunicipalAdmin?: DepartmentMunicipalAdminCreateNestedOneWithoutManagedComplaintsInput
    moderatedByMunicipalAdmin?: DepartmentMunicipalAdminCreateNestedOneWithoutCommunityModerationInput
    crossDeptIssueSuperMunicipal?: SuperMunicipalAdminCreateNestedOneWithoutCrossDepartmentIssuesInput
    escalatedToStateAdmin?: DepartmentStateAdminCreateNestedOneWithoutEscalatedComplaintsInput
    escalatedToSuperStateAdmin?: SuperStateAdminCreateNestedOneWithoutEscalatedComplaintsInput
    managedBySuperAdmin?: SuperAdminCreateNestedOneWithoutManagedComplaintsInput
    upvotes?: UpvoteCreateNestedManyWithoutComplaintInput
    auditLogs?: AuditLogCreateNestedManyWithoutComplaintInput
  }

  export type ComplaintUncheckedCreateWithoutAssignedAgentInput = {
    id?: string
    submissionDate?: Date | string
    seq?: number
    complainantId: string
    categoryId: string
    subCategory: string
    standardizedSubCategory?: string | null
    description: string
    urgency?: $Enums.ComplaintUrgency
    attachmentUrl?: string | null
    assignedDepartment: string
    status?: $Enums.ComplaintStatus
    sla?: string | null
    upvoteCount?: number
    isPublic?: boolean
    escalationLevel?: string | null
    dateOfResolution?: Date | string | null
    managedByMunicipalAdminId?: string | null
    moderatedByMunicipalAdminId?: string | null
    crossDeptIssueSuperMunicipalId?: string | null
    escalatedToStateAdminId?: string | null
    escalatedToSuperStateAdminId?: string | null
    managedBySuperAdminId?: string | null
    location?: ComplaintLocationUncheckedCreateNestedOneWithoutComplaintInput
    coAssignedAgents?: AgentUncheckedCreateNestedManyWithoutCoAssignedComplaintsInput
    upvotes?: UpvoteUncheckedCreateNestedManyWithoutComplaintInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutComplaintInput
  }

  export type ComplaintCreateOrConnectWithoutAssignedAgentInput = {
    where: ComplaintWhereUniqueInput
    create: XOR<ComplaintCreateWithoutAssignedAgentInput, ComplaintUncheckedCreateWithoutAssignedAgentInput>
  }

  export type ComplaintCreateManyAssignedAgentInputEnvelope = {
    data: ComplaintCreateManyAssignedAgentInput | ComplaintCreateManyAssignedAgentInput[]
    skipDuplicates?: boolean
  }

  export type ComplaintCreateWithoutCoAssignedAgentsInput = {
    id?: string
    submissionDate?: Date | string
    seq?: number
    subCategory: string
    standardizedSubCategory?: string | null
    description: string
    urgency?: $Enums.ComplaintUrgency
    attachmentUrl?: string | null
    assignedDepartment: string
    status?: $Enums.ComplaintStatus
    sla?: string | null
    upvoteCount?: number
    isPublic?: boolean
    escalationLevel?: string | null
    dateOfResolution?: Date | string | null
    complainant: UserCreateNestedOneWithoutComplaintsInput
    category: CategoryCreateNestedOneWithoutComplaintsInput
    location?: ComplaintLocationCreateNestedOneWithoutComplaintInput
    assignedAgent?: AgentCreateNestedOneWithoutAssignedComplaintsInput
    managedByMunicipalAdmin?: DepartmentMunicipalAdminCreateNestedOneWithoutManagedComplaintsInput
    moderatedByMunicipalAdmin?: DepartmentMunicipalAdminCreateNestedOneWithoutCommunityModerationInput
    crossDeptIssueSuperMunicipal?: SuperMunicipalAdminCreateNestedOneWithoutCrossDepartmentIssuesInput
    escalatedToStateAdmin?: DepartmentStateAdminCreateNestedOneWithoutEscalatedComplaintsInput
    escalatedToSuperStateAdmin?: SuperStateAdminCreateNestedOneWithoutEscalatedComplaintsInput
    managedBySuperAdmin?: SuperAdminCreateNestedOneWithoutManagedComplaintsInput
    upvotes?: UpvoteCreateNestedManyWithoutComplaintInput
    auditLogs?: AuditLogCreateNestedManyWithoutComplaintInput
  }

  export type ComplaintUncheckedCreateWithoutCoAssignedAgentsInput = {
    id?: string
    submissionDate?: Date | string
    seq?: number
    complainantId: string
    categoryId: string
    subCategory: string
    standardizedSubCategory?: string | null
    description: string
    urgency?: $Enums.ComplaintUrgency
    attachmentUrl?: string | null
    assignedDepartment: string
    status?: $Enums.ComplaintStatus
    sla?: string | null
    upvoteCount?: number
    isPublic?: boolean
    escalationLevel?: string | null
    dateOfResolution?: Date | string | null
    assignedAgentId?: string | null
    managedByMunicipalAdminId?: string | null
    moderatedByMunicipalAdminId?: string | null
    crossDeptIssueSuperMunicipalId?: string | null
    escalatedToStateAdminId?: string | null
    escalatedToSuperStateAdminId?: string | null
    managedBySuperAdminId?: string | null
    location?: ComplaintLocationUncheckedCreateNestedOneWithoutComplaintInput
    upvotes?: UpvoteUncheckedCreateNestedManyWithoutComplaintInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutComplaintInput
  }

  export type ComplaintCreateOrConnectWithoutCoAssignedAgentsInput = {
    where: ComplaintWhereUniqueInput
    create: XOR<ComplaintCreateWithoutCoAssignedAgentsInput, ComplaintUncheckedCreateWithoutCoAssignedAgentsInput>
  }

  export type DepartmentMunicipalAdminCreateWithoutManagedAgentsInput = {
    id?: string
    fullName: string
    adminId: string
    officialEmail: string
    phoneNumber: string
    password: string
    department: string
    municipality: string
    accessLevel: string
    dateOfCreation?: Date | string
    lastUpdated?: Date | string
    status?: string
    lastLogin?: Date | string | null
    resolutionRate?: number
    slaComplianceRate?: number | null
    escalationCount?: number
    managedComplaints?: ComplaintCreateNestedManyWithoutManagedByMunicipalAdminInput
    communityModeration?: ComplaintCreateNestedManyWithoutModeratedByMunicipalAdminInput
    newsUpdates?: NewsUpdateCreateNestedManyWithoutCreatedByInput
    managedByStateAdmin?: DepartmentStateAdminCreateNestedOneWithoutManagedMunicipalAdminsInput
    managedBySuperMunicipal?: SuperMunicipalAdminCreateNestedOneWithoutManagedDepartmentAdminsInput
  }

  export type DepartmentMunicipalAdminUncheckedCreateWithoutManagedAgentsInput = {
    id?: string
    fullName: string
    adminId: string
    officialEmail: string
    phoneNumber: string
    password: string
    department: string
    municipality: string
    accessLevel: string
    dateOfCreation?: Date | string
    lastUpdated?: Date | string
    status?: string
    lastLogin?: Date | string | null
    resolutionRate?: number
    slaComplianceRate?: number | null
    escalationCount?: number
    managedByStateAdminId?: string | null
    managedBySuperMunicipalId?: string | null
    managedComplaints?: ComplaintUncheckedCreateNestedManyWithoutManagedByMunicipalAdminInput
    communityModeration?: ComplaintUncheckedCreateNestedManyWithoutModeratedByMunicipalAdminInput
    newsUpdates?: NewsUpdateUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type DepartmentMunicipalAdminCreateOrConnectWithoutManagedAgentsInput = {
    where: DepartmentMunicipalAdminWhereUniqueInput
    create: XOR<DepartmentMunicipalAdminCreateWithoutManagedAgentsInput, DepartmentMunicipalAdminUncheckedCreateWithoutManagedAgentsInput>
  }

  export type ComplaintUpsertWithWhereUniqueWithoutAssignedAgentInput = {
    where: ComplaintWhereUniqueInput
    update: XOR<ComplaintUpdateWithoutAssignedAgentInput, ComplaintUncheckedUpdateWithoutAssignedAgentInput>
    create: XOR<ComplaintCreateWithoutAssignedAgentInput, ComplaintUncheckedCreateWithoutAssignedAgentInput>
  }

  export type ComplaintUpdateWithWhereUniqueWithoutAssignedAgentInput = {
    where: ComplaintWhereUniqueInput
    data: XOR<ComplaintUpdateWithoutAssignedAgentInput, ComplaintUncheckedUpdateWithoutAssignedAgentInput>
  }

  export type ComplaintUpdateManyWithWhereWithoutAssignedAgentInput = {
    where: ComplaintScalarWhereInput
    data: XOR<ComplaintUpdateManyMutationInput, ComplaintUncheckedUpdateManyWithoutAssignedAgentInput>
  }

  export type ComplaintUpsertWithWhereUniqueWithoutCoAssignedAgentsInput = {
    where: ComplaintWhereUniqueInput
    update: XOR<ComplaintUpdateWithoutCoAssignedAgentsInput, ComplaintUncheckedUpdateWithoutCoAssignedAgentsInput>
    create: XOR<ComplaintCreateWithoutCoAssignedAgentsInput, ComplaintUncheckedCreateWithoutCoAssignedAgentsInput>
  }

  export type ComplaintUpdateWithWhereUniqueWithoutCoAssignedAgentsInput = {
    where: ComplaintWhereUniqueInput
    data: XOR<ComplaintUpdateWithoutCoAssignedAgentsInput, ComplaintUncheckedUpdateWithoutCoAssignedAgentsInput>
  }

  export type ComplaintUpdateManyWithWhereWithoutCoAssignedAgentsInput = {
    where: ComplaintScalarWhereInput
    data: XOR<ComplaintUpdateManyMutationInput, ComplaintUncheckedUpdateManyWithoutCoAssignedAgentsInput>
  }

  export type DepartmentMunicipalAdminUpsertWithoutManagedAgentsInput = {
    update: XOR<DepartmentMunicipalAdminUpdateWithoutManagedAgentsInput, DepartmentMunicipalAdminUncheckedUpdateWithoutManagedAgentsInput>
    create: XOR<DepartmentMunicipalAdminCreateWithoutManagedAgentsInput, DepartmentMunicipalAdminUncheckedCreateWithoutManagedAgentsInput>
    where?: DepartmentMunicipalAdminWhereInput
  }

  export type DepartmentMunicipalAdminUpdateToOneWithWhereWithoutManagedAgentsInput = {
    where?: DepartmentMunicipalAdminWhereInput
    data: XOR<DepartmentMunicipalAdminUpdateWithoutManagedAgentsInput, DepartmentMunicipalAdminUncheckedUpdateWithoutManagedAgentsInput>
  }

  export type DepartmentMunicipalAdminUpdateWithoutManagedAgentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    officialEmail?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    municipality?: StringFieldUpdateOperationsInput | string
    accessLevel?: StringFieldUpdateOperationsInput | string
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolutionRate?: FloatFieldUpdateOperationsInput | number
    slaComplianceRate?: NullableFloatFieldUpdateOperationsInput | number | null
    escalationCount?: IntFieldUpdateOperationsInput | number
    managedComplaints?: ComplaintUpdateManyWithoutManagedByMunicipalAdminNestedInput
    communityModeration?: ComplaintUpdateManyWithoutModeratedByMunicipalAdminNestedInput
    newsUpdates?: NewsUpdateUpdateManyWithoutCreatedByNestedInput
    managedByStateAdmin?: DepartmentStateAdminUpdateOneWithoutManagedMunicipalAdminsNestedInput
    managedBySuperMunicipal?: SuperMunicipalAdminUpdateOneWithoutManagedDepartmentAdminsNestedInput
  }

  export type DepartmentMunicipalAdminUncheckedUpdateWithoutManagedAgentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    officialEmail?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    municipality?: StringFieldUpdateOperationsInput | string
    accessLevel?: StringFieldUpdateOperationsInput | string
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolutionRate?: FloatFieldUpdateOperationsInput | number
    slaComplianceRate?: NullableFloatFieldUpdateOperationsInput | number | null
    escalationCount?: IntFieldUpdateOperationsInput | number
    managedByStateAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    managedBySuperMunicipalId?: NullableStringFieldUpdateOperationsInput | string | null
    managedComplaints?: ComplaintUncheckedUpdateManyWithoutManagedByMunicipalAdminNestedInput
    communityModeration?: ComplaintUncheckedUpdateManyWithoutModeratedByMunicipalAdminNestedInput
    newsUpdates?: NewsUpdateUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type AgentCreateWithoutManagedByMunicipalInput = {
    id?: string
    email: string
    fullName: string
    employeeId: string
    password: string
    phoneNumber: string
    officialEmail: string
    department: string
    municipality: string
    autonomyLevel: string
    accessLevel: string
    workloadLimit?: number
    currentWorkload?: number
    availabilityStatus?: string
    dateOfCreation?: Date | string
    lastUpdated?: Date | string
    status?: string
    lastLogin?: Date | string | null
    resolutionRate?: number
    avgResolutionTime?: string | null
    collaborationMetric?: number
    assignedComplaints?: ComplaintCreateNestedManyWithoutAssignedAgentInput
    coAssignedComplaints?: ComplaintCreateNestedManyWithoutCoAssignedAgentsInput
  }

  export type AgentUncheckedCreateWithoutManagedByMunicipalInput = {
    id?: string
    email: string
    fullName: string
    employeeId: string
    password: string
    phoneNumber: string
    officialEmail: string
    department: string
    municipality: string
    autonomyLevel: string
    accessLevel: string
    workloadLimit?: number
    currentWorkload?: number
    availabilityStatus?: string
    dateOfCreation?: Date | string
    lastUpdated?: Date | string
    status?: string
    lastLogin?: Date | string | null
    resolutionRate?: number
    avgResolutionTime?: string | null
    collaborationMetric?: number
    assignedComplaints?: ComplaintUncheckedCreateNestedManyWithoutAssignedAgentInput
    coAssignedComplaints?: ComplaintUncheckedCreateNestedManyWithoutCoAssignedAgentsInput
  }

  export type AgentCreateOrConnectWithoutManagedByMunicipalInput = {
    where: AgentWhereUniqueInput
    create: XOR<AgentCreateWithoutManagedByMunicipalInput, AgentUncheckedCreateWithoutManagedByMunicipalInput>
  }

  export type AgentCreateManyManagedByMunicipalInputEnvelope = {
    data: AgentCreateManyManagedByMunicipalInput | AgentCreateManyManagedByMunicipalInput[]
    skipDuplicates?: boolean
  }

  export type ComplaintCreateWithoutManagedByMunicipalAdminInput = {
    id?: string
    submissionDate?: Date | string
    seq?: number
    subCategory: string
    standardizedSubCategory?: string | null
    description: string
    urgency?: $Enums.ComplaintUrgency
    attachmentUrl?: string | null
    assignedDepartment: string
    status?: $Enums.ComplaintStatus
    sla?: string | null
    upvoteCount?: number
    isPublic?: boolean
    escalationLevel?: string | null
    dateOfResolution?: Date | string | null
    complainant: UserCreateNestedOneWithoutComplaintsInput
    category: CategoryCreateNestedOneWithoutComplaintsInput
    location?: ComplaintLocationCreateNestedOneWithoutComplaintInput
    assignedAgent?: AgentCreateNestedOneWithoutAssignedComplaintsInput
    coAssignedAgents?: AgentCreateNestedManyWithoutCoAssignedComplaintsInput
    moderatedByMunicipalAdmin?: DepartmentMunicipalAdminCreateNestedOneWithoutCommunityModerationInput
    crossDeptIssueSuperMunicipal?: SuperMunicipalAdminCreateNestedOneWithoutCrossDepartmentIssuesInput
    escalatedToStateAdmin?: DepartmentStateAdminCreateNestedOneWithoutEscalatedComplaintsInput
    escalatedToSuperStateAdmin?: SuperStateAdminCreateNestedOneWithoutEscalatedComplaintsInput
    managedBySuperAdmin?: SuperAdminCreateNestedOneWithoutManagedComplaintsInput
    upvotes?: UpvoteCreateNestedManyWithoutComplaintInput
    auditLogs?: AuditLogCreateNestedManyWithoutComplaintInput
  }

  export type ComplaintUncheckedCreateWithoutManagedByMunicipalAdminInput = {
    id?: string
    submissionDate?: Date | string
    seq?: number
    complainantId: string
    categoryId: string
    subCategory: string
    standardizedSubCategory?: string | null
    description: string
    urgency?: $Enums.ComplaintUrgency
    attachmentUrl?: string | null
    assignedDepartment: string
    status?: $Enums.ComplaintStatus
    sla?: string | null
    upvoteCount?: number
    isPublic?: boolean
    escalationLevel?: string | null
    dateOfResolution?: Date | string | null
    assignedAgentId?: string | null
    moderatedByMunicipalAdminId?: string | null
    crossDeptIssueSuperMunicipalId?: string | null
    escalatedToStateAdminId?: string | null
    escalatedToSuperStateAdminId?: string | null
    managedBySuperAdminId?: string | null
    location?: ComplaintLocationUncheckedCreateNestedOneWithoutComplaintInput
    coAssignedAgents?: AgentUncheckedCreateNestedManyWithoutCoAssignedComplaintsInput
    upvotes?: UpvoteUncheckedCreateNestedManyWithoutComplaintInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutComplaintInput
  }

  export type ComplaintCreateOrConnectWithoutManagedByMunicipalAdminInput = {
    where: ComplaintWhereUniqueInput
    create: XOR<ComplaintCreateWithoutManagedByMunicipalAdminInput, ComplaintUncheckedCreateWithoutManagedByMunicipalAdminInput>
  }

  export type ComplaintCreateManyManagedByMunicipalAdminInputEnvelope = {
    data: ComplaintCreateManyManagedByMunicipalAdminInput | ComplaintCreateManyManagedByMunicipalAdminInput[]
    skipDuplicates?: boolean
  }

  export type ComplaintCreateWithoutModeratedByMunicipalAdminInput = {
    id?: string
    submissionDate?: Date | string
    seq?: number
    subCategory: string
    standardizedSubCategory?: string | null
    description: string
    urgency?: $Enums.ComplaintUrgency
    attachmentUrl?: string | null
    assignedDepartment: string
    status?: $Enums.ComplaintStatus
    sla?: string | null
    upvoteCount?: number
    isPublic?: boolean
    escalationLevel?: string | null
    dateOfResolution?: Date | string | null
    complainant: UserCreateNestedOneWithoutComplaintsInput
    category: CategoryCreateNestedOneWithoutComplaintsInput
    location?: ComplaintLocationCreateNestedOneWithoutComplaintInput
    assignedAgent?: AgentCreateNestedOneWithoutAssignedComplaintsInput
    coAssignedAgents?: AgentCreateNestedManyWithoutCoAssignedComplaintsInput
    managedByMunicipalAdmin?: DepartmentMunicipalAdminCreateNestedOneWithoutManagedComplaintsInput
    crossDeptIssueSuperMunicipal?: SuperMunicipalAdminCreateNestedOneWithoutCrossDepartmentIssuesInput
    escalatedToStateAdmin?: DepartmentStateAdminCreateNestedOneWithoutEscalatedComplaintsInput
    escalatedToSuperStateAdmin?: SuperStateAdminCreateNestedOneWithoutEscalatedComplaintsInput
    managedBySuperAdmin?: SuperAdminCreateNestedOneWithoutManagedComplaintsInput
    upvotes?: UpvoteCreateNestedManyWithoutComplaintInput
    auditLogs?: AuditLogCreateNestedManyWithoutComplaintInput
  }

  export type ComplaintUncheckedCreateWithoutModeratedByMunicipalAdminInput = {
    id?: string
    submissionDate?: Date | string
    seq?: number
    complainantId: string
    categoryId: string
    subCategory: string
    standardizedSubCategory?: string | null
    description: string
    urgency?: $Enums.ComplaintUrgency
    attachmentUrl?: string | null
    assignedDepartment: string
    status?: $Enums.ComplaintStatus
    sla?: string | null
    upvoteCount?: number
    isPublic?: boolean
    escalationLevel?: string | null
    dateOfResolution?: Date | string | null
    assignedAgentId?: string | null
    managedByMunicipalAdminId?: string | null
    crossDeptIssueSuperMunicipalId?: string | null
    escalatedToStateAdminId?: string | null
    escalatedToSuperStateAdminId?: string | null
    managedBySuperAdminId?: string | null
    location?: ComplaintLocationUncheckedCreateNestedOneWithoutComplaintInput
    coAssignedAgents?: AgentUncheckedCreateNestedManyWithoutCoAssignedComplaintsInput
    upvotes?: UpvoteUncheckedCreateNestedManyWithoutComplaintInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutComplaintInput
  }

  export type ComplaintCreateOrConnectWithoutModeratedByMunicipalAdminInput = {
    where: ComplaintWhereUniqueInput
    create: XOR<ComplaintCreateWithoutModeratedByMunicipalAdminInput, ComplaintUncheckedCreateWithoutModeratedByMunicipalAdminInput>
  }

  export type ComplaintCreateManyModeratedByMunicipalAdminInputEnvelope = {
    data: ComplaintCreateManyModeratedByMunicipalAdminInput | ComplaintCreateManyModeratedByMunicipalAdminInput[]
    skipDuplicates?: boolean
  }

  export type NewsUpdateCreateWithoutCreatedByInput = {
    id?: string
    title: string
    content: string
    date?: Date | string
  }

  export type NewsUpdateUncheckedCreateWithoutCreatedByInput = {
    id?: string
    title: string
    content: string
    date?: Date | string
  }

  export type NewsUpdateCreateOrConnectWithoutCreatedByInput = {
    where: NewsUpdateWhereUniqueInput
    create: XOR<NewsUpdateCreateWithoutCreatedByInput, NewsUpdateUncheckedCreateWithoutCreatedByInput>
  }

  export type NewsUpdateCreateManyCreatedByInputEnvelope = {
    data: NewsUpdateCreateManyCreatedByInput | NewsUpdateCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type DepartmentStateAdminCreateWithoutManagedMunicipalAdminsInput = {
    id?: string
    fullName: string
    adminId: string
    officialEmail: string
    password: string
    phoneNumber?: string | null
    department: string
    state: string
    accessLevel: string
    dateOfCreation?: Date | string
    lastUpdated?: Date | string
    status?: string
    lastLogin?: Date | string | null
    stateResolutionRate?: number
    systemicIssuesIdentified?: number
    managedMunicipalities?: DepartmentStateAdminCreatemanagedMunicipalitiesInput | string[]
    escalatedComplaints?: ComplaintCreateNestedManyWithoutEscalatedToStateAdminInput
    regionalWorkflows?: RegionalWorkflowCreateNestedManyWithoutCreatedByInput
    managedCategories?: CategoryCreateNestedManyWithoutManagedByDeptStateAdminInput
    managedBySuperState?: SuperStateAdminCreateNestedOneWithoutManagedDepartmentAdminsInput
  }

  export type DepartmentStateAdminUncheckedCreateWithoutManagedMunicipalAdminsInput = {
    id?: string
    fullName: string
    adminId: string
    officialEmail: string
    password: string
    phoneNumber?: string | null
    department: string
    state: string
    accessLevel: string
    dateOfCreation?: Date | string
    lastUpdated?: Date | string
    status?: string
    lastLogin?: Date | string | null
    stateResolutionRate?: number
    systemicIssuesIdentified?: number
    managedMunicipalities?: DepartmentStateAdminCreatemanagedMunicipalitiesInput | string[]
    managedBySuperStateId?: string | null
    escalatedComplaints?: ComplaintUncheckedCreateNestedManyWithoutEscalatedToStateAdminInput
    regionalWorkflows?: RegionalWorkflowUncheckedCreateNestedManyWithoutCreatedByInput
    managedCategories?: CategoryUncheckedCreateNestedManyWithoutManagedByDeptStateAdminInput
  }

  export type DepartmentStateAdminCreateOrConnectWithoutManagedMunicipalAdminsInput = {
    where: DepartmentStateAdminWhereUniqueInput
    create: XOR<DepartmentStateAdminCreateWithoutManagedMunicipalAdminsInput, DepartmentStateAdminUncheckedCreateWithoutManagedMunicipalAdminsInput>
  }

  export type SuperMunicipalAdminCreateWithoutManagedDepartmentAdminsInput = {
    id?: string
    fullName: string
    adminId: string
    officialEmail: string
    password: string
    phoneNumber?: string | null
    municipality: string
    accessLevel: string
    dateOfCreation?: Date | string
    lastUpdated?: Date | string
    status?: string
    lastLogin?: Date | string | null
    municipalityResolutionRate?: number
    crossDepartmentSuccess?: number
    crossDepartmentIssues?: ComplaintCreateNestedManyWithoutCrossDeptIssueSuperMunicipalInput
    managedBySuperState?: SuperStateAdminCreateNestedOneWithoutManagedSuperMunicipalAdminsInput
  }

  export type SuperMunicipalAdminUncheckedCreateWithoutManagedDepartmentAdminsInput = {
    id?: string
    fullName: string
    adminId: string
    officialEmail: string
    password: string
    phoneNumber?: string | null
    municipality: string
    accessLevel: string
    dateOfCreation?: Date | string
    lastUpdated?: Date | string
    status?: string
    lastLogin?: Date | string | null
    municipalityResolutionRate?: number
    crossDepartmentSuccess?: number
    managedBySuperStateId?: string | null
    crossDepartmentIssues?: ComplaintUncheckedCreateNestedManyWithoutCrossDeptIssueSuperMunicipalInput
  }

  export type SuperMunicipalAdminCreateOrConnectWithoutManagedDepartmentAdminsInput = {
    where: SuperMunicipalAdminWhereUniqueInput
    create: XOR<SuperMunicipalAdminCreateWithoutManagedDepartmentAdminsInput, SuperMunicipalAdminUncheckedCreateWithoutManagedDepartmentAdminsInput>
  }

  export type AgentUpsertWithWhereUniqueWithoutManagedByMunicipalInput = {
    where: AgentWhereUniqueInput
    update: XOR<AgentUpdateWithoutManagedByMunicipalInput, AgentUncheckedUpdateWithoutManagedByMunicipalInput>
    create: XOR<AgentCreateWithoutManagedByMunicipalInput, AgentUncheckedCreateWithoutManagedByMunicipalInput>
  }

  export type AgentUpdateWithWhereUniqueWithoutManagedByMunicipalInput = {
    where: AgentWhereUniqueInput
    data: XOR<AgentUpdateWithoutManagedByMunicipalInput, AgentUncheckedUpdateWithoutManagedByMunicipalInput>
  }

  export type AgentUpdateManyWithWhereWithoutManagedByMunicipalInput = {
    where: AgentScalarWhereInput
    data: XOR<AgentUpdateManyMutationInput, AgentUncheckedUpdateManyWithoutManagedByMunicipalInput>
  }

  export type AgentScalarWhereInput = {
    AND?: AgentScalarWhereInput | AgentScalarWhereInput[]
    OR?: AgentScalarWhereInput[]
    NOT?: AgentScalarWhereInput | AgentScalarWhereInput[]
    id?: StringFilter<"Agent"> | string
    email?: StringFilter<"Agent"> | string
    fullName?: StringFilter<"Agent"> | string
    employeeId?: StringFilter<"Agent"> | string
    password?: StringFilter<"Agent"> | string
    phoneNumber?: StringFilter<"Agent"> | string
    officialEmail?: StringFilter<"Agent"> | string
    department?: StringFilter<"Agent"> | string
    municipality?: StringFilter<"Agent"> | string
    autonomyLevel?: StringFilter<"Agent"> | string
    accessLevel?: StringFilter<"Agent"> | string
    workloadLimit?: IntFilter<"Agent"> | number
    currentWorkload?: IntFilter<"Agent"> | number
    availabilityStatus?: StringFilter<"Agent"> | string
    dateOfCreation?: DateTimeFilter<"Agent"> | Date | string
    lastUpdated?: DateTimeFilter<"Agent"> | Date | string
    status?: StringFilter<"Agent"> | string
    lastLogin?: DateTimeNullableFilter<"Agent"> | Date | string | null
    resolutionRate?: FloatFilter<"Agent"> | number
    avgResolutionTime?: StringNullableFilter<"Agent"> | string | null
    collaborationMetric?: IntFilter<"Agent"> | number
    managedByMunicipalId?: StringNullableFilter<"Agent"> | string | null
  }

  export type ComplaintUpsertWithWhereUniqueWithoutManagedByMunicipalAdminInput = {
    where: ComplaintWhereUniqueInput
    update: XOR<ComplaintUpdateWithoutManagedByMunicipalAdminInput, ComplaintUncheckedUpdateWithoutManagedByMunicipalAdminInput>
    create: XOR<ComplaintCreateWithoutManagedByMunicipalAdminInput, ComplaintUncheckedCreateWithoutManagedByMunicipalAdminInput>
  }

  export type ComplaintUpdateWithWhereUniqueWithoutManagedByMunicipalAdminInput = {
    where: ComplaintWhereUniqueInput
    data: XOR<ComplaintUpdateWithoutManagedByMunicipalAdminInput, ComplaintUncheckedUpdateWithoutManagedByMunicipalAdminInput>
  }

  export type ComplaintUpdateManyWithWhereWithoutManagedByMunicipalAdminInput = {
    where: ComplaintScalarWhereInput
    data: XOR<ComplaintUpdateManyMutationInput, ComplaintUncheckedUpdateManyWithoutManagedByMunicipalAdminInput>
  }

  export type ComplaintUpsertWithWhereUniqueWithoutModeratedByMunicipalAdminInput = {
    where: ComplaintWhereUniqueInput
    update: XOR<ComplaintUpdateWithoutModeratedByMunicipalAdminInput, ComplaintUncheckedUpdateWithoutModeratedByMunicipalAdminInput>
    create: XOR<ComplaintCreateWithoutModeratedByMunicipalAdminInput, ComplaintUncheckedCreateWithoutModeratedByMunicipalAdminInput>
  }

  export type ComplaintUpdateWithWhereUniqueWithoutModeratedByMunicipalAdminInput = {
    where: ComplaintWhereUniqueInput
    data: XOR<ComplaintUpdateWithoutModeratedByMunicipalAdminInput, ComplaintUncheckedUpdateWithoutModeratedByMunicipalAdminInput>
  }

  export type ComplaintUpdateManyWithWhereWithoutModeratedByMunicipalAdminInput = {
    where: ComplaintScalarWhereInput
    data: XOR<ComplaintUpdateManyMutationInput, ComplaintUncheckedUpdateManyWithoutModeratedByMunicipalAdminInput>
  }

  export type NewsUpdateUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: NewsUpdateWhereUniqueInput
    update: XOR<NewsUpdateUpdateWithoutCreatedByInput, NewsUpdateUncheckedUpdateWithoutCreatedByInput>
    create: XOR<NewsUpdateCreateWithoutCreatedByInput, NewsUpdateUncheckedCreateWithoutCreatedByInput>
  }

  export type NewsUpdateUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: NewsUpdateWhereUniqueInput
    data: XOR<NewsUpdateUpdateWithoutCreatedByInput, NewsUpdateUncheckedUpdateWithoutCreatedByInput>
  }

  export type NewsUpdateUpdateManyWithWhereWithoutCreatedByInput = {
    where: NewsUpdateScalarWhereInput
    data: XOR<NewsUpdateUpdateManyMutationInput, NewsUpdateUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type NewsUpdateScalarWhereInput = {
    AND?: NewsUpdateScalarWhereInput | NewsUpdateScalarWhereInput[]
    OR?: NewsUpdateScalarWhereInput[]
    NOT?: NewsUpdateScalarWhereInput | NewsUpdateScalarWhereInput[]
    id?: StringFilter<"NewsUpdate"> | string
    title?: StringFilter<"NewsUpdate"> | string
    content?: StringFilter<"NewsUpdate"> | string
    date?: DateTimeFilter<"NewsUpdate"> | Date | string
    createdById?: StringFilter<"NewsUpdate"> | string
  }

  export type DepartmentStateAdminUpsertWithoutManagedMunicipalAdminsInput = {
    update: XOR<DepartmentStateAdminUpdateWithoutManagedMunicipalAdminsInput, DepartmentStateAdminUncheckedUpdateWithoutManagedMunicipalAdminsInput>
    create: XOR<DepartmentStateAdminCreateWithoutManagedMunicipalAdminsInput, DepartmentStateAdminUncheckedCreateWithoutManagedMunicipalAdminsInput>
    where?: DepartmentStateAdminWhereInput
  }

  export type DepartmentStateAdminUpdateToOneWithWhereWithoutManagedMunicipalAdminsInput = {
    where?: DepartmentStateAdminWhereInput
    data: XOR<DepartmentStateAdminUpdateWithoutManagedMunicipalAdminsInput, DepartmentStateAdminUncheckedUpdateWithoutManagedMunicipalAdminsInput>
  }

  export type DepartmentStateAdminUpdateWithoutManagedMunicipalAdminsInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    officialEmail?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    department?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    accessLevel?: StringFieldUpdateOperationsInput | string
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stateResolutionRate?: FloatFieldUpdateOperationsInput | number
    systemicIssuesIdentified?: IntFieldUpdateOperationsInput | number
    managedMunicipalities?: DepartmentStateAdminUpdatemanagedMunicipalitiesInput | string[]
    escalatedComplaints?: ComplaintUpdateManyWithoutEscalatedToStateAdminNestedInput
    regionalWorkflows?: RegionalWorkflowUpdateManyWithoutCreatedByNestedInput
    managedCategories?: CategoryUpdateManyWithoutManagedByDeptStateAdminNestedInput
    managedBySuperState?: SuperStateAdminUpdateOneWithoutManagedDepartmentAdminsNestedInput
  }

  export type DepartmentStateAdminUncheckedUpdateWithoutManagedMunicipalAdminsInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    officialEmail?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    department?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    accessLevel?: StringFieldUpdateOperationsInput | string
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stateResolutionRate?: FloatFieldUpdateOperationsInput | number
    systemicIssuesIdentified?: IntFieldUpdateOperationsInput | number
    managedMunicipalities?: DepartmentStateAdminUpdatemanagedMunicipalitiesInput | string[]
    managedBySuperStateId?: NullableStringFieldUpdateOperationsInput | string | null
    escalatedComplaints?: ComplaintUncheckedUpdateManyWithoutEscalatedToStateAdminNestedInput
    regionalWorkflows?: RegionalWorkflowUncheckedUpdateManyWithoutCreatedByNestedInput
    managedCategories?: CategoryUncheckedUpdateManyWithoutManagedByDeptStateAdminNestedInput
  }

  export type SuperMunicipalAdminUpsertWithoutManagedDepartmentAdminsInput = {
    update: XOR<SuperMunicipalAdminUpdateWithoutManagedDepartmentAdminsInput, SuperMunicipalAdminUncheckedUpdateWithoutManagedDepartmentAdminsInput>
    create: XOR<SuperMunicipalAdminCreateWithoutManagedDepartmentAdminsInput, SuperMunicipalAdminUncheckedCreateWithoutManagedDepartmentAdminsInput>
    where?: SuperMunicipalAdminWhereInput
  }

  export type SuperMunicipalAdminUpdateToOneWithWhereWithoutManagedDepartmentAdminsInput = {
    where?: SuperMunicipalAdminWhereInput
    data: XOR<SuperMunicipalAdminUpdateWithoutManagedDepartmentAdminsInput, SuperMunicipalAdminUncheckedUpdateWithoutManagedDepartmentAdminsInput>
  }

  export type SuperMunicipalAdminUpdateWithoutManagedDepartmentAdminsInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    officialEmail?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    municipality?: StringFieldUpdateOperationsInput | string
    accessLevel?: StringFieldUpdateOperationsInput | string
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    municipalityResolutionRate?: FloatFieldUpdateOperationsInput | number
    crossDepartmentSuccess?: IntFieldUpdateOperationsInput | number
    crossDepartmentIssues?: ComplaintUpdateManyWithoutCrossDeptIssueSuperMunicipalNestedInput
    managedBySuperState?: SuperStateAdminUpdateOneWithoutManagedSuperMunicipalAdminsNestedInput
  }

  export type SuperMunicipalAdminUncheckedUpdateWithoutManagedDepartmentAdminsInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    officialEmail?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    municipality?: StringFieldUpdateOperationsInput | string
    accessLevel?: StringFieldUpdateOperationsInput | string
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    municipalityResolutionRate?: FloatFieldUpdateOperationsInput | number
    crossDepartmentSuccess?: IntFieldUpdateOperationsInput | number
    managedBySuperStateId?: NullableStringFieldUpdateOperationsInput | string | null
    crossDepartmentIssues?: ComplaintUncheckedUpdateManyWithoutCrossDeptIssueSuperMunicipalNestedInput
  }

  export type DepartmentMunicipalAdminCreateWithoutManagedBySuperMunicipalInput = {
    id?: string
    fullName: string
    adminId: string
    officialEmail: string
    phoneNumber: string
    password: string
    department: string
    municipality: string
    accessLevel: string
    dateOfCreation?: Date | string
    lastUpdated?: Date | string
    status?: string
    lastLogin?: Date | string | null
    resolutionRate?: number
    slaComplianceRate?: number | null
    escalationCount?: number
    managedAgents?: AgentCreateNestedManyWithoutManagedByMunicipalInput
    managedComplaints?: ComplaintCreateNestedManyWithoutManagedByMunicipalAdminInput
    communityModeration?: ComplaintCreateNestedManyWithoutModeratedByMunicipalAdminInput
    newsUpdates?: NewsUpdateCreateNestedManyWithoutCreatedByInput
    managedByStateAdmin?: DepartmentStateAdminCreateNestedOneWithoutManagedMunicipalAdminsInput
  }

  export type DepartmentMunicipalAdminUncheckedCreateWithoutManagedBySuperMunicipalInput = {
    id?: string
    fullName: string
    adminId: string
    officialEmail: string
    phoneNumber: string
    password: string
    department: string
    municipality: string
    accessLevel: string
    dateOfCreation?: Date | string
    lastUpdated?: Date | string
    status?: string
    lastLogin?: Date | string | null
    resolutionRate?: number
    slaComplianceRate?: number | null
    escalationCount?: number
    managedByStateAdminId?: string | null
    managedAgents?: AgentUncheckedCreateNestedManyWithoutManagedByMunicipalInput
    managedComplaints?: ComplaintUncheckedCreateNestedManyWithoutManagedByMunicipalAdminInput
    communityModeration?: ComplaintUncheckedCreateNestedManyWithoutModeratedByMunicipalAdminInput
    newsUpdates?: NewsUpdateUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type DepartmentMunicipalAdminCreateOrConnectWithoutManagedBySuperMunicipalInput = {
    where: DepartmentMunicipalAdminWhereUniqueInput
    create: XOR<DepartmentMunicipalAdminCreateWithoutManagedBySuperMunicipalInput, DepartmentMunicipalAdminUncheckedCreateWithoutManagedBySuperMunicipalInput>
  }

  export type DepartmentMunicipalAdminCreateManyManagedBySuperMunicipalInputEnvelope = {
    data: DepartmentMunicipalAdminCreateManyManagedBySuperMunicipalInput | DepartmentMunicipalAdminCreateManyManagedBySuperMunicipalInput[]
    skipDuplicates?: boolean
  }

  export type ComplaintCreateWithoutCrossDeptIssueSuperMunicipalInput = {
    id?: string
    submissionDate?: Date | string
    seq?: number
    subCategory: string
    standardizedSubCategory?: string | null
    description: string
    urgency?: $Enums.ComplaintUrgency
    attachmentUrl?: string | null
    assignedDepartment: string
    status?: $Enums.ComplaintStatus
    sla?: string | null
    upvoteCount?: number
    isPublic?: boolean
    escalationLevel?: string | null
    dateOfResolution?: Date | string | null
    complainant: UserCreateNestedOneWithoutComplaintsInput
    category: CategoryCreateNestedOneWithoutComplaintsInput
    location?: ComplaintLocationCreateNestedOneWithoutComplaintInput
    assignedAgent?: AgentCreateNestedOneWithoutAssignedComplaintsInput
    coAssignedAgents?: AgentCreateNestedManyWithoutCoAssignedComplaintsInput
    managedByMunicipalAdmin?: DepartmentMunicipalAdminCreateNestedOneWithoutManagedComplaintsInput
    moderatedByMunicipalAdmin?: DepartmentMunicipalAdminCreateNestedOneWithoutCommunityModerationInput
    escalatedToStateAdmin?: DepartmentStateAdminCreateNestedOneWithoutEscalatedComplaintsInput
    escalatedToSuperStateAdmin?: SuperStateAdminCreateNestedOneWithoutEscalatedComplaintsInput
    managedBySuperAdmin?: SuperAdminCreateNestedOneWithoutManagedComplaintsInput
    upvotes?: UpvoteCreateNestedManyWithoutComplaintInput
    auditLogs?: AuditLogCreateNestedManyWithoutComplaintInput
  }

  export type ComplaintUncheckedCreateWithoutCrossDeptIssueSuperMunicipalInput = {
    id?: string
    submissionDate?: Date | string
    seq?: number
    complainantId: string
    categoryId: string
    subCategory: string
    standardizedSubCategory?: string | null
    description: string
    urgency?: $Enums.ComplaintUrgency
    attachmentUrl?: string | null
    assignedDepartment: string
    status?: $Enums.ComplaintStatus
    sla?: string | null
    upvoteCount?: number
    isPublic?: boolean
    escalationLevel?: string | null
    dateOfResolution?: Date | string | null
    assignedAgentId?: string | null
    managedByMunicipalAdminId?: string | null
    moderatedByMunicipalAdminId?: string | null
    escalatedToStateAdminId?: string | null
    escalatedToSuperStateAdminId?: string | null
    managedBySuperAdminId?: string | null
    location?: ComplaintLocationUncheckedCreateNestedOneWithoutComplaintInput
    coAssignedAgents?: AgentUncheckedCreateNestedManyWithoutCoAssignedComplaintsInput
    upvotes?: UpvoteUncheckedCreateNestedManyWithoutComplaintInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutComplaintInput
  }

  export type ComplaintCreateOrConnectWithoutCrossDeptIssueSuperMunicipalInput = {
    where: ComplaintWhereUniqueInput
    create: XOR<ComplaintCreateWithoutCrossDeptIssueSuperMunicipalInput, ComplaintUncheckedCreateWithoutCrossDeptIssueSuperMunicipalInput>
  }

  export type ComplaintCreateManyCrossDeptIssueSuperMunicipalInputEnvelope = {
    data: ComplaintCreateManyCrossDeptIssueSuperMunicipalInput | ComplaintCreateManyCrossDeptIssueSuperMunicipalInput[]
    skipDuplicates?: boolean
  }

  export type SuperStateAdminCreateWithoutManagedSuperMunicipalAdminsInput = {
    id?: string
    fullName: string
    adminId: string
    officialEmail: string
    phoneNumber?: string | null
    password: string
    state: string
    accessLevel: string
    dateOfCreation?: Date | string
    lastUpdated?: Date | string
    status?: string
    lastLogin?: Date | string | null
    stateResolutionRate?: number
    crossDepartmentSuccess?: number
    managedDepartmentAdmins?: DepartmentStateAdminCreateNestedManyWithoutManagedBySuperStateInput
    escalatedComplaints?: ComplaintCreateNestedManyWithoutEscalatedToSuperStateAdminInput
    managedBySuperAdmin?: SuperAdminCreateNestedOneWithoutManagedSuperStateAdminsInput
  }

  export type SuperStateAdminUncheckedCreateWithoutManagedSuperMunicipalAdminsInput = {
    id?: string
    fullName: string
    adminId: string
    officialEmail: string
    phoneNumber?: string | null
    password: string
    state: string
    accessLevel: string
    dateOfCreation?: Date | string
    lastUpdated?: Date | string
    status?: string
    lastLogin?: Date | string | null
    stateResolutionRate?: number
    crossDepartmentSuccess?: number
    managedBySuperAdminId?: string | null
    managedDepartmentAdmins?: DepartmentStateAdminUncheckedCreateNestedManyWithoutManagedBySuperStateInput
    escalatedComplaints?: ComplaintUncheckedCreateNestedManyWithoutEscalatedToSuperStateAdminInput
  }

  export type SuperStateAdminCreateOrConnectWithoutManagedSuperMunicipalAdminsInput = {
    where: SuperStateAdminWhereUniqueInput
    create: XOR<SuperStateAdminCreateWithoutManagedSuperMunicipalAdminsInput, SuperStateAdminUncheckedCreateWithoutManagedSuperMunicipalAdminsInput>
  }

  export type DepartmentMunicipalAdminUpsertWithWhereUniqueWithoutManagedBySuperMunicipalInput = {
    where: DepartmentMunicipalAdminWhereUniqueInput
    update: XOR<DepartmentMunicipalAdminUpdateWithoutManagedBySuperMunicipalInput, DepartmentMunicipalAdminUncheckedUpdateWithoutManagedBySuperMunicipalInput>
    create: XOR<DepartmentMunicipalAdminCreateWithoutManagedBySuperMunicipalInput, DepartmentMunicipalAdminUncheckedCreateWithoutManagedBySuperMunicipalInput>
  }

  export type DepartmentMunicipalAdminUpdateWithWhereUniqueWithoutManagedBySuperMunicipalInput = {
    where: DepartmentMunicipalAdminWhereUniqueInput
    data: XOR<DepartmentMunicipalAdminUpdateWithoutManagedBySuperMunicipalInput, DepartmentMunicipalAdminUncheckedUpdateWithoutManagedBySuperMunicipalInput>
  }

  export type DepartmentMunicipalAdminUpdateManyWithWhereWithoutManagedBySuperMunicipalInput = {
    where: DepartmentMunicipalAdminScalarWhereInput
    data: XOR<DepartmentMunicipalAdminUpdateManyMutationInput, DepartmentMunicipalAdminUncheckedUpdateManyWithoutManagedBySuperMunicipalInput>
  }

  export type DepartmentMunicipalAdminScalarWhereInput = {
    AND?: DepartmentMunicipalAdminScalarWhereInput | DepartmentMunicipalAdminScalarWhereInput[]
    OR?: DepartmentMunicipalAdminScalarWhereInput[]
    NOT?: DepartmentMunicipalAdminScalarWhereInput | DepartmentMunicipalAdminScalarWhereInput[]
    id?: StringFilter<"DepartmentMunicipalAdmin"> | string
    fullName?: StringFilter<"DepartmentMunicipalAdmin"> | string
    adminId?: StringFilter<"DepartmentMunicipalAdmin"> | string
    officialEmail?: StringFilter<"DepartmentMunicipalAdmin"> | string
    phoneNumber?: StringFilter<"DepartmentMunicipalAdmin"> | string
    password?: StringFilter<"DepartmentMunicipalAdmin"> | string
    department?: StringFilter<"DepartmentMunicipalAdmin"> | string
    municipality?: StringFilter<"DepartmentMunicipalAdmin"> | string
    accessLevel?: StringFilter<"DepartmentMunicipalAdmin"> | string
    dateOfCreation?: DateTimeFilter<"DepartmentMunicipalAdmin"> | Date | string
    lastUpdated?: DateTimeFilter<"DepartmentMunicipalAdmin"> | Date | string
    status?: StringFilter<"DepartmentMunicipalAdmin"> | string
    lastLogin?: DateTimeNullableFilter<"DepartmentMunicipalAdmin"> | Date | string | null
    resolutionRate?: FloatFilter<"DepartmentMunicipalAdmin"> | number
    slaComplianceRate?: FloatNullableFilter<"DepartmentMunicipalAdmin"> | number | null
    escalationCount?: IntFilter<"DepartmentMunicipalAdmin"> | number
    managedByStateAdminId?: StringNullableFilter<"DepartmentMunicipalAdmin"> | string | null
    managedBySuperMunicipalId?: StringNullableFilter<"DepartmentMunicipalAdmin"> | string | null
  }

  export type ComplaintUpsertWithWhereUniqueWithoutCrossDeptIssueSuperMunicipalInput = {
    where: ComplaintWhereUniqueInput
    update: XOR<ComplaintUpdateWithoutCrossDeptIssueSuperMunicipalInput, ComplaintUncheckedUpdateWithoutCrossDeptIssueSuperMunicipalInput>
    create: XOR<ComplaintCreateWithoutCrossDeptIssueSuperMunicipalInput, ComplaintUncheckedCreateWithoutCrossDeptIssueSuperMunicipalInput>
  }

  export type ComplaintUpdateWithWhereUniqueWithoutCrossDeptIssueSuperMunicipalInput = {
    where: ComplaintWhereUniqueInput
    data: XOR<ComplaintUpdateWithoutCrossDeptIssueSuperMunicipalInput, ComplaintUncheckedUpdateWithoutCrossDeptIssueSuperMunicipalInput>
  }

  export type ComplaintUpdateManyWithWhereWithoutCrossDeptIssueSuperMunicipalInput = {
    where: ComplaintScalarWhereInput
    data: XOR<ComplaintUpdateManyMutationInput, ComplaintUncheckedUpdateManyWithoutCrossDeptIssueSuperMunicipalInput>
  }

  export type SuperStateAdminUpsertWithoutManagedSuperMunicipalAdminsInput = {
    update: XOR<SuperStateAdminUpdateWithoutManagedSuperMunicipalAdminsInput, SuperStateAdminUncheckedUpdateWithoutManagedSuperMunicipalAdminsInput>
    create: XOR<SuperStateAdminCreateWithoutManagedSuperMunicipalAdminsInput, SuperStateAdminUncheckedCreateWithoutManagedSuperMunicipalAdminsInput>
    where?: SuperStateAdminWhereInput
  }

  export type SuperStateAdminUpdateToOneWithWhereWithoutManagedSuperMunicipalAdminsInput = {
    where?: SuperStateAdminWhereInput
    data: XOR<SuperStateAdminUpdateWithoutManagedSuperMunicipalAdminsInput, SuperStateAdminUncheckedUpdateWithoutManagedSuperMunicipalAdminsInput>
  }

  export type SuperStateAdminUpdateWithoutManagedSuperMunicipalAdminsInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    officialEmail?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    accessLevel?: StringFieldUpdateOperationsInput | string
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stateResolutionRate?: FloatFieldUpdateOperationsInput | number
    crossDepartmentSuccess?: IntFieldUpdateOperationsInput | number
    managedDepartmentAdmins?: DepartmentStateAdminUpdateManyWithoutManagedBySuperStateNestedInput
    escalatedComplaints?: ComplaintUpdateManyWithoutEscalatedToSuperStateAdminNestedInput
    managedBySuperAdmin?: SuperAdminUpdateOneWithoutManagedSuperStateAdminsNestedInput
  }

  export type SuperStateAdminUncheckedUpdateWithoutManagedSuperMunicipalAdminsInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    officialEmail?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    accessLevel?: StringFieldUpdateOperationsInput | string
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stateResolutionRate?: FloatFieldUpdateOperationsInput | number
    crossDepartmentSuccess?: IntFieldUpdateOperationsInput | number
    managedBySuperAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    managedDepartmentAdmins?: DepartmentStateAdminUncheckedUpdateManyWithoutManagedBySuperStateNestedInput
    escalatedComplaints?: ComplaintUncheckedUpdateManyWithoutEscalatedToSuperStateAdminNestedInput
  }

  export type DepartmentMunicipalAdminCreateWithoutManagedByStateAdminInput = {
    id?: string
    fullName: string
    adminId: string
    officialEmail: string
    phoneNumber: string
    password: string
    department: string
    municipality: string
    accessLevel: string
    dateOfCreation?: Date | string
    lastUpdated?: Date | string
    status?: string
    lastLogin?: Date | string | null
    resolutionRate?: number
    slaComplianceRate?: number | null
    escalationCount?: number
    managedAgents?: AgentCreateNestedManyWithoutManagedByMunicipalInput
    managedComplaints?: ComplaintCreateNestedManyWithoutManagedByMunicipalAdminInput
    communityModeration?: ComplaintCreateNestedManyWithoutModeratedByMunicipalAdminInput
    newsUpdates?: NewsUpdateCreateNestedManyWithoutCreatedByInput
    managedBySuperMunicipal?: SuperMunicipalAdminCreateNestedOneWithoutManagedDepartmentAdminsInput
  }

  export type DepartmentMunicipalAdminUncheckedCreateWithoutManagedByStateAdminInput = {
    id?: string
    fullName: string
    adminId: string
    officialEmail: string
    phoneNumber: string
    password: string
    department: string
    municipality: string
    accessLevel: string
    dateOfCreation?: Date | string
    lastUpdated?: Date | string
    status?: string
    lastLogin?: Date | string | null
    resolutionRate?: number
    slaComplianceRate?: number | null
    escalationCount?: number
    managedBySuperMunicipalId?: string | null
    managedAgents?: AgentUncheckedCreateNestedManyWithoutManagedByMunicipalInput
    managedComplaints?: ComplaintUncheckedCreateNestedManyWithoutManagedByMunicipalAdminInput
    communityModeration?: ComplaintUncheckedCreateNestedManyWithoutModeratedByMunicipalAdminInput
    newsUpdates?: NewsUpdateUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type DepartmentMunicipalAdminCreateOrConnectWithoutManagedByStateAdminInput = {
    where: DepartmentMunicipalAdminWhereUniqueInput
    create: XOR<DepartmentMunicipalAdminCreateWithoutManagedByStateAdminInput, DepartmentMunicipalAdminUncheckedCreateWithoutManagedByStateAdminInput>
  }

  export type DepartmentMunicipalAdminCreateManyManagedByStateAdminInputEnvelope = {
    data: DepartmentMunicipalAdminCreateManyManagedByStateAdminInput | DepartmentMunicipalAdminCreateManyManagedByStateAdminInput[]
    skipDuplicates?: boolean
  }

  export type ComplaintCreateWithoutEscalatedToStateAdminInput = {
    id?: string
    submissionDate?: Date | string
    seq?: number
    subCategory: string
    standardizedSubCategory?: string | null
    description: string
    urgency?: $Enums.ComplaintUrgency
    attachmentUrl?: string | null
    assignedDepartment: string
    status?: $Enums.ComplaintStatus
    sla?: string | null
    upvoteCount?: number
    isPublic?: boolean
    escalationLevel?: string | null
    dateOfResolution?: Date | string | null
    complainant: UserCreateNestedOneWithoutComplaintsInput
    category: CategoryCreateNestedOneWithoutComplaintsInput
    location?: ComplaintLocationCreateNestedOneWithoutComplaintInput
    assignedAgent?: AgentCreateNestedOneWithoutAssignedComplaintsInput
    coAssignedAgents?: AgentCreateNestedManyWithoutCoAssignedComplaintsInput
    managedByMunicipalAdmin?: DepartmentMunicipalAdminCreateNestedOneWithoutManagedComplaintsInput
    moderatedByMunicipalAdmin?: DepartmentMunicipalAdminCreateNestedOneWithoutCommunityModerationInput
    crossDeptIssueSuperMunicipal?: SuperMunicipalAdminCreateNestedOneWithoutCrossDepartmentIssuesInput
    escalatedToSuperStateAdmin?: SuperStateAdminCreateNestedOneWithoutEscalatedComplaintsInput
    managedBySuperAdmin?: SuperAdminCreateNestedOneWithoutManagedComplaintsInput
    upvotes?: UpvoteCreateNestedManyWithoutComplaintInput
    auditLogs?: AuditLogCreateNestedManyWithoutComplaintInput
  }

  export type ComplaintUncheckedCreateWithoutEscalatedToStateAdminInput = {
    id?: string
    submissionDate?: Date | string
    seq?: number
    complainantId: string
    categoryId: string
    subCategory: string
    standardizedSubCategory?: string | null
    description: string
    urgency?: $Enums.ComplaintUrgency
    attachmentUrl?: string | null
    assignedDepartment: string
    status?: $Enums.ComplaintStatus
    sla?: string | null
    upvoteCount?: number
    isPublic?: boolean
    escalationLevel?: string | null
    dateOfResolution?: Date | string | null
    assignedAgentId?: string | null
    managedByMunicipalAdminId?: string | null
    moderatedByMunicipalAdminId?: string | null
    crossDeptIssueSuperMunicipalId?: string | null
    escalatedToSuperStateAdminId?: string | null
    managedBySuperAdminId?: string | null
    location?: ComplaintLocationUncheckedCreateNestedOneWithoutComplaintInput
    coAssignedAgents?: AgentUncheckedCreateNestedManyWithoutCoAssignedComplaintsInput
    upvotes?: UpvoteUncheckedCreateNestedManyWithoutComplaintInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutComplaintInput
  }

  export type ComplaintCreateOrConnectWithoutEscalatedToStateAdminInput = {
    where: ComplaintWhereUniqueInput
    create: XOR<ComplaintCreateWithoutEscalatedToStateAdminInput, ComplaintUncheckedCreateWithoutEscalatedToStateAdminInput>
  }

  export type ComplaintCreateManyEscalatedToStateAdminInputEnvelope = {
    data: ComplaintCreateManyEscalatedToStateAdminInput | ComplaintCreateManyEscalatedToStateAdminInput[]
    skipDuplicates?: boolean
  }

  export type RegionalWorkflowCreateWithoutCreatedByInput = {
    id?: string
    state: string
    municipality?: string | null
    category: string
    sla: string
  }

  export type RegionalWorkflowUncheckedCreateWithoutCreatedByInput = {
    id?: string
    state: string
    municipality?: string | null
    category: string
    sla: string
  }

  export type RegionalWorkflowCreateOrConnectWithoutCreatedByInput = {
    where: RegionalWorkflowWhereUniqueInput
    create: XOR<RegionalWorkflowCreateWithoutCreatedByInput, RegionalWorkflowUncheckedCreateWithoutCreatedByInput>
  }

  export type RegionalWorkflowCreateManyCreatedByInputEnvelope = {
    data: RegionalWorkflowCreateManyCreatedByInput | RegionalWorkflowCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type CategoryCreateWithoutManagedByDeptStateAdminInput = {
    id?: string
    name: string
    subCategories?: CategoryCreatesubCategoriesInput | string[]
    learnedSubCategories?: CategoryCreatelearnedSubCategoriesInput | string[]
    assignedDepartment: string
    creationDate?: Date | string
    lastUpdated?: Date | string
    complaints?: ComplaintCreateNestedManyWithoutCategoryInput
    createdBySuperAdmin?: SuperAdminCreateNestedOneWithoutManagedCategoriesInput
  }

  export type CategoryUncheckedCreateWithoutManagedByDeptStateAdminInput = {
    id?: string
    name: string
    subCategories?: CategoryCreatesubCategoriesInput | string[]
    learnedSubCategories?: CategoryCreatelearnedSubCategoriesInput | string[]
    assignedDepartment: string
    creationDate?: Date | string
    lastUpdated?: Date | string
    createdBySuperAdminId?: string | null
    complaints?: ComplaintUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryCreateOrConnectWithoutManagedByDeptStateAdminInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutManagedByDeptStateAdminInput, CategoryUncheckedCreateWithoutManagedByDeptStateAdminInput>
  }

  export type CategoryCreateManyManagedByDeptStateAdminInputEnvelope = {
    data: CategoryCreateManyManagedByDeptStateAdminInput | CategoryCreateManyManagedByDeptStateAdminInput[]
    skipDuplicates?: boolean
  }

  export type SuperStateAdminCreateWithoutManagedDepartmentAdminsInput = {
    id?: string
    fullName: string
    adminId: string
    officialEmail: string
    phoneNumber?: string | null
    password: string
    state: string
    accessLevel: string
    dateOfCreation?: Date | string
    lastUpdated?: Date | string
    status?: string
    lastLogin?: Date | string | null
    stateResolutionRate?: number
    crossDepartmentSuccess?: number
    managedSuperMunicipalAdmins?: SuperMunicipalAdminCreateNestedManyWithoutManagedBySuperStateInput
    escalatedComplaints?: ComplaintCreateNestedManyWithoutEscalatedToSuperStateAdminInput
    managedBySuperAdmin?: SuperAdminCreateNestedOneWithoutManagedSuperStateAdminsInput
  }

  export type SuperStateAdminUncheckedCreateWithoutManagedDepartmentAdminsInput = {
    id?: string
    fullName: string
    adminId: string
    officialEmail: string
    phoneNumber?: string | null
    password: string
    state: string
    accessLevel: string
    dateOfCreation?: Date | string
    lastUpdated?: Date | string
    status?: string
    lastLogin?: Date | string | null
    stateResolutionRate?: number
    crossDepartmentSuccess?: number
    managedBySuperAdminId?: string | null
    managedSuperMunicipalAdmins?: SuperMunicipalAdminUncheckedCreateNestedManyWithoutManagedBySuperStateInput
    escalatedComplaints?: ComplaintUncheckedCreateNestedManyWithoutEscalatedToSuperStateAdminInput
  }

  export type SuperStateAdminCreateOrConnectWithoutManagedDepartmentAdminsInput = {
    where: SuperStateAdminWhereUniqueInput
    create: XOR<SuperStateAdminCreateWithoutManagedDepartmentAdminsInput, SuperStateAdminUncheckedCreateWithoutManagedDepartmentAdminsInput>
  }

  export type DepartmentMunicipalAdminUpsertWithWhereUniqueWithoutManagedByStateAdminInput = {
    where: DepartmentMunicipalAdminWhereUniqueInput
    update: XOR<DepartmentMunicipalAdminUpdateWithoutManagedByStateAdminInput, DepartmentMunicipalAdminUncheckedUpdateWithoutManagedByStateAdminInput>
    create: XOR<DepartmentMunicipalAdminCreateWithoutManagedByStateAdminInput, DepartmentMunicipalAdminUncheckedCreateWithoutManagedByStateAdminInput>
  }

  export type DepartmentMunicipalAdminUpdateWithWhereUniqueWithoutManagedByStateAdminInput = {
    where: DepartmentMunicipalAdminWhereUniqueInput
    data: XOR<DepartmentMunicipalAdminUpdateWithoutManagedByStateAdminInput, DepartmentMunicipalAdminUncheckedUpdateWithoutManagedByStateAdminInput>
  }

  export type DepartmentMunicipalAdminUpdateManyWithWhereWithoutManagedByStateAdminInput = {
    where: DepartmentMunicipalAdminScalarWhereInput
    data: XOR<DepartmentMunicipalAdminUpdateManyMutationInput, DepartmentMunicipalAdminUncheckedUpdateManyWithoutManagedByStateAdminInput>
  }

  export type ComplaintUpsertWithWhereUniqueWithoutEscalatedToStateAdminInput = {
    where: ComplaintWhereUniqueInput
    update: XOR<ComplaintUpdateWithoutEscalatedToStateAdminInput, ComplaintUncheckedUpdateWithoutEscalatedToStateAdminInput>
    create: XOR<ComplaintCreateWithoutEscalatedToStateAdminInput, ComplaintUncheckedCreateWithoutEscalatedToStateAdminInput>
  }

  export type ComplaintUpdateWithWhereUniqueWithoutEscalatedToStateAdminInput = {
    where: ComplaintWhereUniqueInput
    data: XOR<ComplaintUpdateWithoutEscalatedToStateAdminInput, ComplaintUncheckedUpdateWithoutEscalatedToStateAdminInput>
  }

  export type ComplaintUpdateManyWithWhereWithoutEscalatedToStateAdminInput = {
    where: ComplaintScalarWhereInput
    data: XOR<ComplaintUpdateManyMutationInput, ComplaintUncheckedUpdateManyWithoutEscalatedToStateAdminInput>
  }

  export type RegionalWorkflowUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: RegionalWorkflowWhereUniqueInput
    update: XOR<RegionalWorkflowUpdateWithoutCreatedByInput, RegionalWorkflowUncheckedUpdateWithoutCreatedByInput>
    create: XOR<RegionalWorkflowCreateWithoutCreatedByInput, RegionalWorkflowUncheckedCreateWithoutCreatedByInput>
  }

  export type RegionalWorkflowUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: RegionalWorkflowWhereUniqueInput
    data: XOR<RegionalWorkflowUpdateWithoutCreatedByInput, RegionalWorkflowUncheckedUpdateWithoutCreatedByInput>
  }

  export type RegionalWorkflowUpdateManyWithWhereWithoutCreatedByInput = {
    where: RegionalWorkflowScalarWhereInput
    data: XOR<RegionalWorkflowUpdateManyMutationInput, RegionalWorkflowUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type RegionalWorkflowScalarWhereInput = {
    AND?: RegionalWorkflowScalarWhereInput | RegionalWorkflowScalarWhereInput[]
    OR?: RegionalWorkflowScalarWhereInput[]
    NOT?: RegionalWorkflowScalarWhereInput | RegionalWorkflowScalarWhereInput[]
    id?: StringFilter<"RegionalWorkflow"> | string
    state?: StringFilter<"RegionalWorkflow"> | string
    municipality?: StringNullableFilter<"RegionalWorkflow"> | string | null
    category?: StringFilter<"RegionalWorkflow"> | string
    sla?: StringFilter<"RegionalWorkflow"> | string
    createdById?: StringFilter<"RegionalWorkflow"> | string
  }

  export type CategoryUpsertWithWhereUniqueWithoutManagedByDeptStateAdminInput = {
    where: CategoryWhereUniqueInput
    update: XOR<CategoryUpdateWithoutManagedByDeptStateAdminInput, CategoryUncheckedUpdateWithoutManagedByDeptStateAdminInput>
    create: XOR<CategoryCreateWithoutManagedByDeptStateAdminInput, CategoryUncheckedCreateWithoutManagedByDeptStateAdminInput>
  }

  export type CategoryUpdateWithWhereUniqueWithoutManagedByDeptStateAdminInput = {
    where: CategoryWhereUniqueInput
    data: XOR<CategoryUpdateWithoutManagedByDeptStateAdminInput, CategoryUncheckedUpdateWithoutManagedByDeptStateAdminInput>
  }

  export type CategoryUpdateManyWithWhereWithoutManagedByDeptStateAdminInput = {
    where: CategoryScalarWhereInput
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyWithoutManagedByDeptStateAdminInput>
  }

  export type CategoryScalarWhereInput = {
    AND?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
    OR?: CategoryScalarWhereInput[]
    NOT?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
    id?: StringFilter<"Category"> | string
    name?: StringFilter<"Category"> | string
    subCategories?: StringNullableListFilter<"Category">
    learnedSubCategories?: StringNullableListFilter<"Category">
    assignedDepartment?: StringFilter<"Category"> | string
    creationDate?: DateTimeFilter<"Category"> | Date | string
    lastUpdated?: DateTimeFilter<"Category"> | Date | string
    createdBySuperAdminId?: StringNullableFilter<"Category"> | string | null
    managedByDeptStateAdminId?: StringNullableFilter<"Category"> | string | null
  }

  export type SuperStateAdminUpsertWithoutManagedDepartmentAdminsInput = {
    update: XOR<SuperStateAdminUpdateWithoutManagedDepartmentAdminsInput, SuperStateAdminUncheckedUpdateWithoutManagedDepartmentAdminsInput>
    create: XOR<SuperStateAdminCreateWithoutManagedDepartmentAdminsInput, SuperStateAdminUncheckedCreateWithoutManagedDepartmentAdminsInput>
    where?: SuperStateAdminWhereInput
  }

  export type SuperStateAdminUpdateToOneWithWhereWithoutManagedDepartmentAdminsInput = {
    where?: SuperStateAdminWhereInput
    data: XOR<SuperStateAdminUpdateWithoutManagedDepartmentAdminsInput, SuperStateAdminUncheckedUpdateWithoutManagedDepartmentAdminsInput>
  }

  export type SuperStateAdminUpdateWithoutManagedDepartmentAdminsInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    officialEmail?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    accessLevel?: StringFieldUpdateOperationsInput | string
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stateResolutionRate?: FloatFieldUpdateOperationsInput | number
    crossDepartmentSuccess?: IntFieldUpdateOperationsInput | number
    managedSuperMunicipalAdmins?: SuperMunicipalAdminUpdateManyWithoutManagedBySuperStateNestedInput
    escalatedComplaints?: ComplaintUpdateManyWithoutEscalatedToSuperStateAdminNestedInput
    managedBySuperAdmin?: SuperAdminUpdateOneWithoutManagedSuperStateAdminsNestedInput
  }

  export type SuperStateAdminUncheckedUpdateWithoutManagedDepartmentAdminsInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    officialEmail?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    accessLevel?: StringFieldUpdateOperationsInput | string
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stateResolutionRate?: FloatFieldUpdateOperationsInput | number
    crossDepartmentSuccess?: IntFieldUpdateOperationsInput | number
    managedBySuperAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    managedSuperMunicipalAdmins?: SuperMunicipalAdminUncheckedUpdateManyWithoutManagedBySuperStateNestedInput
    escalatedComplaints?: ComplaintUncheckedUpdateManyWithoutEscalatedToSuperStateAdminNestedInput
  }

  export type DepartmentStateAdminCreateWithoutManagedBySuperStateInput = {
    id?: string
    fullName: string
    adminId: string
    officialEmail: string
    password: string
    phoneNumber?: string | null
    department: string
    state: string
    accessLevel: string
    dateOfCreation?: Date | string
    lastUpdated?: Date | string
    status?: string
    lastLogin?: Date | string | null
    stateResolutionRate?: number
    systemicIssuesIdentified?: number
    managedMunicipalities?: DepartmentStateAdminCreatemanagedMunicipalitiesInput | string[]
    managedMunicipalAdmins?: DepartmentMunicipalAdminCreateNestedManyWithoutManagedByStateAdminInput
    escalatedComplaints?: ComplaintCreateNestedManyWithoutEscalatedToStateAdminInput
    regionalWorkflows?: RegionalWorkflowCreateNestedManyWithoutCreatedByInput
    managedCategories?: CategoryCreateNestedManyWithoutManagedByDeptStateAdminInput
  }

  export type DepartmentStateAdminUncheckedCreateWithoutManagedBySuperStateInput = {
    id?: string
    fullName: string
    adminId: string
    officialEmail: string
    password: string
    phoneNumber?: string | null
    department: string
    state: string
    accessLevel: string
    dateOfCreation?: Date | string
    lastUpdated?: Date | string
    status?: string
    lastLogin?: Date | string | null
    stateResolutionRate?: number
    systemicIssuesIdentified?: number
    managedMunicipalities?: DepartmentStateAdminCreatemanagedMunicipalitiesInput | string[]
    managedMunicipalAdmins?: DepartmentMunicipalAdminUncheckedCreateNestedManyWithoutManagedByStateAdminInput
    escalatedComplaints?: ComplaintUncheckedCreateNestedManyWithoutEscalatedToStateAdminInput
    regionalWorkflows?: RegionalWorkflowUncheckedCreateNestedManyWithoutCreatedByInput
    managedCategories?: CategoryUncheckedCreateNestedManyWithoutManagedByDeptStateAdminInput
  }

  export type DepartmentStateAdminCreateOrConnectWithoutManagedBySuperStateInput = {
    where: DepartmentStateAdminWhereUniqueInput
    create: XOR<DepartmentStateAdminCreateWithoutManagedBySuperStateInput, DepartmentStateAdminUncheckedCreateWithoutManagedBySuperStateInput>
  }

  export type DepartmentStateAdminCreateManyManagedBySuperStateInputEnvelope = {
    data: DepartmentStateAdminCreateManyManagedBySuperStateInput | DepartmentStateAdminCreateManyManagedBySuperStateInput[]
    skipDuplicates?: boolean
  }

  export type SuperMunicipalAdminCreateWithoutManagedBySuperStateInput = {
    id?: string
    fullName: string
    adminId: string
    officialEmail: string
    password: string
    phoneNumber?: string | null
    municipality: string
    accessLevel: string
    dateOfCreation?: Date | string
    lastUpdated?: Date | string
    status?: string
    lastLogin?: Date | string | null
    municipalityResolutionRate?: number
    crossDepartmentSuccess?: number
    managedDepartmentAdmins?: DepartmentMunicipalAdminCreateNestedManyWithoutManagedBySuperMunicipalInput
    crossDepartmentIssues?: ComplaintCreateNestedManyWithoutCrossDeptIssueSuperMunicipalInput
  }

  export type SuperMunicipalAdminUncheckedCreateWithoutManagedBySuperStateInput = {
    id?: string
    fullName: string
    adminId: string
    officialEmail: string
    password: string
    phoneNumber?: string | null
    municipality: string
    accessLevel: string
    dateOfCreation?: Date | string
    lastUpdated?: Date | string
    status?: string
    lastLogin?: Date | string | null
    municipalityResolutionRate?: number
    crossDepartmentSuccess?: number
    managedDepartmentAdmins?: DepartmentMunicipalAdminUncheckedCreateNestedManyWithoutManagedBySuperMunicipalInput
    crossDepartmentIssues?: ComplaintUncheckedCreateNestedManyWithoutCrossDeptIssueSuperMunicipalInput
  }

  export type SuperMunicipalAdminCreateOrConnectWithoutManagedBySuperStateInput = {
    where: SuperMunicipalAdminWhereUniqueInput
    create: XOR<SuperMunicipalAdminCreateWithoutManagedBySuperStateInput, SuperMunicipalAdminUncheckedCreateWithoutManagedBySuperStateInput>
  }

  export type SuperMunicipalAdminCreateManyManagedBySuperStateInputEnvelope = {
    data: SuperMunicipalAdminCreateManyManagedBySuperStateInput | SuperMunicipalAdminCreateManyManagedBySuperStateInput[]
    skipDuplicates?: boolean
  }

  export type ComplaintCreateWithoutEscalatedToSuperStateAdminInput = {
    id?: string
    submissionDate?: Date | string
    seq?: number
    subCategory: string
    standardizedSubCategory?: string | null
    description: string
    urgency?: $Enums.ComplaintUrgency
    attachmentUrl?: string | null
    assignedDepartment: string
    status?: $Enums.ComplaintStatus
    sla?: string | null
    upvoteCount?: number
    isPublic?: boolean
    escalationLevel?: string | null
    dateOfResolution?: Date | string | null
    complainant: UserCreateNestedOneWithoutComplaintsInput
    category: CategoryCreateNestedOneWithoutComplaintsInput
    location?: ComplaintLocationCreateNestedOneWithoutComplaintInput
    assignedAgent?: AgentCreateNestedOneWithoutAssignedComplaintsInput
    coAssignedAgents?: AgentCreateNestedManyWithoutCoAssignedComplaintsInput
    managedByMunicipalAdmin?: DepartmentMunicipalAdminCreateNestedOneWithoutManagedComplaintsInput
    moderatedByMunicipalAdmin?: DepartmentMunicipalAdminCreateNestedOneWithoutCommunityModerationInput
    crossDeptIssueSuperMunicipal?: SuperMunicipalAdminCreateNestedOneWithoutCrossDepartmentIssuesInput
    escalatedToStateAdmin?: DepartmentStateAdminCreateNestedOneWithoutEscalatedComplaintsInput
    managedBySuperAdmin?: SuperAdminCreateNestedOneWithoutManagedComplaintsInput
    upvotes?: UpvoteCreateNestedManyWithoutComplaintInput
    auditLogs?: AuditLogCreateNestedManyWithoutComplaintInput
  }

  export type ComplaintUncheckedCreateWithoutEscalatedToSuperStateAdminInput = {
    id?: string
    submissionDate?: Date | string
    seq?: number
    complainantId: string
    categoryId: string
    subCategory: string
    standardizedSubCategory?: string | null
    description: string
    urgency?: $Enums.ComplaintUrgency
    attachmentUrl?: string | null
    assignedDepartment: string
    status?: $Enums.ComplaintStatus
    sla?: string | null
    upvoteCount?: number
    isPublic?: boolean
    escalationLevel?: string | null
    dateOfResolution?: Date | string | null
    assignedAgentId?: string | null
    managedByMunicipalAdminId?: string | null
    moderatedByMunicipalAdminId?: string | null
    crossDeptIssueSuperMunicipalId?: string | null
    escalatedToStateAdminId?: string | null
    managedBySuperAdminId?: string | null
    location?: ComplaintLocationUncheckedCreateNestedOneWithoutComplaintInput
    coAssignedAgents?: AgentUncheckedCreateNestedManyWithoutCoAssignedComplaintsInput
    upvotes?: UpvoteUncheckedCreateNestedManyWithoutComplaintInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutComplaintInput
  }

  export type ComplaintCreateOrConnectWithoutEscalatedToSuperStateAdminInput = {
    where: ComplaintWhereUniqueInput
    create: XOR<ComplaintCreateWithoutEscalatedToSuperStateAdminInput, ComplaintUncheckedCreateWithoutEscalatedToSuperStateAdminInput>
  }

  export type ComplaintCreateManyEscalatedToSuperStateAdminInputEnvelope = {
    data: ComplaintCreateManyEscalatedToSuperStateAdminInput | ComplaintCreateManyEscalatedToSuperStateAdminInput[]
    skipDuplicates?: boolean
  }

  export type SuperAdminCreateWithoutManagedSuperStateAdminsInput = {
    id?: string
    fullName: string
    adminId: string
    officialEmail: string
    phoneNumber?: string | null
    password: string
    accessLevel: string
    dateOfCreation?: Date | string
    lastUpdated?: Date | string
    status?: string
    lastLogin?: Date | string | null
    managedCategories?: CategoryCreateNestedManyWithoutCreatedBySuperAdminInput
    managedComplaints?: ComplaintCreateNestedManyWithoutManagedBySuperAdminInput
  }

  export type SuperAdminUncheckedCreateWithoutManagedSuperStateAdminsInput = {
    id?: string
    fullName: string
    adminId: string
    officialEmail: string
    phoneNumber?: string | null
    password: string
    accessLevel: string
    dateOfCreation?: Date | string
    lastUpdated?: Date | string
    status?: string
    lastLogin?: Date | string | null
    managedCategories?: CategoryUncheckedCreateNestedManyWithoutCreatedBySuperAdminInput
    managedComplaints?: ComplaintUncheckedCreateNestedManyWithoutManagedBySuperAdminInput
  }

  export type SuperAdminCreateOrConnectWithoutManagedSuperStateAdminsInput = {
    where: SuperAdminWhereUniqueInput
    create: XOR<SuperAdminCreateWithoutManagedSuperStateAdminsInput, SuperAdminUncheckedCreateWithoutManagedSuperStateAdminsInput>
  }

  export type DepartmentStateAdminUpsertWithWhereUniqueWithoutManagedBySuperStateInput = {
    where: DepartmentStateAdminWhereUniqueInput
    update: XOR<DepartmentStateAdminUpdateWithoutManagedBySuperStateInput, DepartmentStateAdminUncheckedUpdateWithoutManagedBySuperStateInput>
    create: XOR<DepartmentStateAdminCreateWithoutManagedBySuperStateInput, DepartmentStateAdminUncheckedCreateWithoutManagedBySuperStateInput>
  }

  export type DepartmentStateAdminUpdateWithWhereUniqueWithoutManagedBySuperStateInput = {
    where: DepartmentStateAdminWhereUniqueInput
    data: XOR<DepartmentStateAdminUpdateWithoutManagedBySuperStateInput, DepartmentStateAdminUncheckedUpdateWithoutManagedBySuperStateInput>
  }

  export type DepartmentStateAdminUpdateManyWithWhereWithoutManagedBySuperStateInput = {
    where: DepartmentStateAdminScalarWhereInput
    data: XOR<DepartmentStateAdminUpdateManyMutationInput, DepartmentStateAdminUncheckedUpdateManyWithoutManagedBySuperStateInput>
  }

  export type DepartmentStateAdminScalarWhereInput = {
    AND?: DepartmentStateAdminScalarWhereInput | DepartmentStateAdminScalarWhereInput[]
    OR?: DepartmentStateAdminScalarWhereInput[]
    NOT?: DepartmentStateAdminScalarWhereInput | DepartmentStateAdminScalarWhereInput[]
    id?: StringFilter<"DepartmentStateAdmin"> | string
    fullName?: StringFilter<"DepartmentStateAdmin"> | string
    adminId?: StringFilter<"DepartmentStateAdmin"> | string
    officialEmail?: StringFilter<"DepartmentStateAdmin"> | string
    password?: StringFilter<"DepartmentStateAdmin"> | string
    phoneNumber?: StringNullableFilter<"DepartmentStateAdmin"> | string | null
    department?: StringFilter<"DepartmentStateAdmin"> | string
    state?: StringFilter<"DepartmentStateAdmin"> | string
    accessLevel?: StringFilter<"DepartmentStateAdmin"> | string
    dateOfCreation?: DateTimeFilter<"DepartmentStateAdmin"> | Date | string
    lastUpdated?: DateTimeFilter<"DepartmentStateAdmin"> | Date | string
    status?: StringFilter<"DepartmentStateAdmin"> | string
    lastLogin?: DateTimeNullableFilter<"DepartmentStateAdmin"> | Date | string | null
    stateResolutionRate?: FloatFilter<"DepartmentStateAdmin"> | number
    systemicIssuesIdentified?: IntFilter<"DepartmentStateAdmin"> | number
    managedMunicipalities?: StringNullableListFilter<"DepartmentStateAdmin">
    managedBySuperStateId?: StringNullableFilter<"DepartmentStateAdmin"> | string | null
  }

  export type SuperMunicipalAdminUpsertWithWhereUniqueWithoutManagedBySuperStateInput = {
    where: SuperMunicipalAdminWhereUniqueInput
    update: XOR<SuperMunicipalAdminUpdateWithoutManagedBySuperStateInput, SuperMunicipalAdminUncheckedUpdateWithoutManagedBySuperStateInput>
    create: XOR<SuperMunicipalAdminCreateWithoutManagedBySuperStateInput, SuperMunicipalAdminUncheckedCreateWithoutManagedBySuperStateInput>
  }

  export type SuperMunicipalAdminUpdateWithWhereUniqueWithoutManagedBySuperStateInput = {
    where: SuperMunicipalAdminWhereUniqueInput
    data: XOR<SuperMunicipalAdminUpdateWithoutManagedBySuperStateInput, SuperMunicipalAdminUncheckedUpdateWithoutManagedBySuperStateInput>
  }

  export type SuperMunicipalAdminUpdateManyWithWhereWithoutManagedBySuperStateInput = {
    where: SuperMunicipalAdminScalarWhereInput
    data: XOR<SuperMunicipalAdminUpdateManyMutationInput, SuperMunicipalAdminUncheckedUpdateManyWithoutManagedBySuperStateInput>
  }

  export type SuperMunicipalAdminScalarWhereInput = {
    AND?: SuperMunicipalAdminScalarWhereInput | SuperMunicipalAdminScalarWhereInput[]
    OR?: SuperMunicipalAdminScalarWhereInput[]
    NOT?: SuperMunicipalAdminScalarWhereInput | SuperMunicipalAdminScalarWhereInput[]
    id?: StringFilter<"SuperMunicipalAdmin"> | string
    fullName?: StringFilter<"SuperMunicipalAdmin"> | string
    adminId?: StringFilter<"SuperMunicipalAdmin"> | string
    officialEmail?: StringFilter<"SuperMunicipalAdmin"> | string
    password?: StringFilter<"SuperMunicipalAdmin"> | string
    phoneNumber?: StringNullableFilter<"SuperMunicipalAdmin"> | string | null
    municipality?: StringFilter<"SuperMunicipalAdmin"> | string
    accessLevel?: StringFilter<"SuperMunicipalAdmin"> | string
    dateOfCreation?: DateTimeFilter<"SuperMunicipalAdmin"> | Date | string
    lastUpdated?: DateTimeFilter<"SuperMunicipalAdmin"> | Date | string
    status?: StringFilter<"SuperMunicipalAdmin"> | string
    lastLogin?: DateTimeNullableFilter<"SuperMunicipalAdmin"> | Date | string | null
    municipalityResolutionRate?: FloatFilter<"SuperMunicipalAdmin"> | number
    crossDepartmentSuccess?: IntFilter<"SuperMunicipalAdmin"> | number
    managedBySuperStateId?: StringNullableFilter<"SuperMunicipalAdmin"> | string | null
  }

  export type ComplaintUpsertWithWhereUniqueWithoutEscalatedToSuperStateAdminInput = {
    where: ComplaintWhereUniqueInput
    update: XOR<ComplaintUpdateWithoutEscalatedToSuperStateAdminInput, ComplaintUncheckedUpdateWithoutEscalatedToSuperStateAdminInput>
    create: XOR<ComplaintCreateWithoutEscalatedToSuperStateAdminInput, ComplaintUncheckedCreateWithoutEscalatedToSuperStateAdminInput>
  }

  export type ComplaintUpdateWithWhereUniqueWithoutEscalatedToSuperStateAdminInput = {
    where: ComplaintWhereUniqueInput
    data: XOR<ComplaintUpdateWithoutEscalatedToSuperStateAdminInput, ComplaintUncheckedUpdateWithoutEscalatedToSuperStateAdminInput>
  }

  export type ComplaintUpdateManyWithWhereWithoutEscalatedToSuperStateAdminInput = {
    where: ComplaintScalarWhereInput
    data: XOR<ComplaintUpdateManyMutationInput, ComplaintUncheckedUpdateManyWithoutEscalatedToSuperStateAdminInput>
  }

  export type SuperAdminUpsertWithoutManagedSuperStateAdminsInput = {
    update: XOR<SuperAdminUpdateWithoutManagedSuperStateAdminsInput, SuperAdminUncheckedUpdateWithoutManagedSuperStateAdminsInput>
    create: XOR<SuperAdminCreateWithoutManagedSuperStateAdminsInput, SuperAdminUncheckedCreateWithoutManagedSuperStateAdminsInput>
    where?: SuperAdminWhereInput
  }

  export type SuperAdminUpdateToOneWithWhereWithoutManagedSuperStateAdminsInput = {
    where?: SuperAdminWhereInput
    data: XOR<SuperAdminUpdateWithoutManagedSuperStateAdminsInput, SuperAdminUncheckedUpdateWithoutManagedSuperStateAdminsInput>
  }

  export type SuperAdminUpdateWithoutManagedSuperStateAdminsInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    officialEmail?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    accessLevel?: StringFieldUpdateOperationsInput | string
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    managedCategories?: CategoryUpdateManyWithoutCreatedBySuperAdminNestedInput
    managedComplaints?: ComplaintUpdateManyWithoutManagedBySuperAdminNestedInput
  }

  export type SuperAdminUncheckedUpdateWithoutManagedSuperStateAdminsInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    officialEmail?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    accessLevel?: StringFieldUpdateOperationsInput | string
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    managedCategories?: CategoryUncheckedUpdateManyWithoutCreatedBySuperAdminNestedInput
    managedComplaints?: ComplaintUncheckedUpdateManyWithoutManagedBySuperAdminNestedInput
  }

  export type CategoryCreateWithoutCreatedBySuperAdminInput = {
    id?: string
    name: string
    subCategories?: CategoryCreatesubCategoriesInput | string[]
    learnedSubCategories?: CategoryCreatelearnedSubCategoriesInput | string[]
    assignedDepartment: string
    creationDate?: Date | string
    lastUpdated?: Date | string
    complaints?: ComplaintCreateNestedManyWithoutCategoryInput
    managedByDeptStateAdmin?: DepartmentStateAdminCreateNestedOneWithoutManagedCategoriesInput
  }

  export type CategoryUncheckedCreateWithoutCreatedBySuperAdminInput = {
    id?: string
    name: string
    subCategories?: CategoryCreatesubCategoriesInput | string[]
    learnedSubCategories?: CategoryCreatelearnedSubCategoriesInput | string[]
    assignedDepartment: string
    creationDate?: Date | string
    lastUpdated?: Date | string
    managedByDeptStateAdminId?: string | null
    complaints?: ComplaintUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryCreateOrConnectWithoutCreatedBySuperAdminInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutCreatedBySuperAdminInput, CategoryUncheckedCreateWithoutCreatedBySuperAdminInput>
  }

  export type CategoryCreateManyCreatedBySuperAdminInputEnvelope = {
    data: CategoryCreateManyCreatedBySuperAdminInput | CategoryCreateManyCreatedBySuperAdminInput[]
    skipDuplicates?: boolean
  }

  export type SuperStateAdminCreateWithoutManagedBySuperAdminInput = {
    id?: string
    fullName: string
    adminId: string
    officialEmail: string
    phoneNumber?: string | null
    password: string
    state: string
    accessLevel: string
    dateOfCreation?: Date | string
    lastUpdated?: Date | string
    status?: string
    lastLogin?: Date | string | null
    stateResolutionRate?: number
    crossDepartmentSuccess?: number
    managedDepartmentAdmins?: DepartmentStateAdminCreateNestedManyWithoutManagedBySuperStateInput
    managedSuperMunicipalAdmins?: SuperMunicipalAdminCreateNestedManyWithoutManagedBySuperStateInput
    escalatedComplaints?: ComplaintCreateNestedManyWithoutEscalatedToSuperStateAdminInput
  }

  export type SuperStateAdminUncheckedCreateWithoutManagedBySuperAdminInput = {
    id?: string
    fullName: string
    adminId: string
    officialEmail: string
    phoneNumber?: string | null
    password: string
    state: string
    accessLevel: string
    dateOfCreation?: Date | string
    lastUpdated?: Date | string
    status?: string
    lastLogin?: Date | string | null
    stateResolutionRate?: number
    crossDepartmentSuccess?: number
    managedDepartmentAdmins?: DepartmentStateAdminUncheckedCreateNestedManyWithoutManagedBySuperStateInput
    managedSuperMunicipalAdmins?: SuperMunicipalAdminUncheckedCreateNestedManyWithoutManagedBySuperStateInput
    escalatedComplaints?: ComplaintUncheckedCreateNestedManyWithoutEscalatedToSuperStateAdminInput
  }

  export type SuperStateAdminCreateOrConnectWithoutManagedBySuperAdminInput = {
    where: SuperStateAdminWhereUniqueInput
    create: XOR<SuperStateAdminCreateWithoutManagedBySuperAdminInput, SuperStateAdminUncheckedCreateWithoutManagedBySuperAdminInput>
  }

  export type SuperStateAdminCreateManyManagedBySuperAdminInputEnvelope = {
    data: SuperStateAdminCreateManyManagedBySuperAdminInput | SuperStateAdminCreateManyManagedBySuperAdminInput[]
    skipDuplicates?: boolean
  }

  export type ComplaintCreateWithoutManagedBySuperAdminInput = {
    id?: string
    submissionDate?: Date | string
    seq?: number
    subCategory: string
    standardizedSubCategory?: string | null
    description: string
    urgency?: $Enums.ComplaintUrgency
    attachmentUrl?: string | null
    assignedDepartment: string
    status?: $Enums.ComplaintStatus
    sla?: string | null
    upvoteCount?: number
    isPublic?: boolean
    escalationLevel?: string | null
    dateOfResolution?: Date | string | null
    complainant: UserCreateNestedOneWithoutComplaintsInput
    category: CategoryCreateNestedOneWithoutComplaintsInput
    location?: ComplaintLocationCreateNestedOneWithoutComplaintInput
    assignedAgent?: AgentCreateNestedOneWithoutAssignedComplaintsInput
    coAssignedAgents?: AgentCreateNestedManyWithoutCoAssignedComplaintsInput
    managedByMunicipalAdmin?: DepartmentMunicipalAdminCreateNestedOneWithoutManagedComplaintsInput
    moderatedByMunicipalAdmin?: DepartmentMunicipalAdminCreateNestedOneWithoutCommunityModerationInput
    crossDeptIssueSuperMunicipal?: SuperMunicipalAdminCreateNestedOneWithoutCrossDepartmentIssuesInput
    escalatedToStateAdmin?: DepartmentStateAdminCreateNestedOneWithoutEscalatedComplaintsInput
    escalatedToSuperStateAdmin?: SuperStateAdminCreateNestedOneWithoutEscalatedComplaintsInput
    upvotes?: UpvoteCreateNestedManyWithoutComplaintInput
    auditLogs?: AuditLogCreateNestedManyWithoutComplaintInput
  }

  export type ComplaintUncheckedCreateWithoutManagedBySuperAdminInput = {
    id?: string
    submissionDate?: Date | string
    seq?: number
    complainantId: string
    categoryId: string
    subCategory: string
    standardizedSubCategory?: string | null
    description: string
    urgency?: $Enums.ComplaintUrgency
    attachmentUrl?: string | null
    assignedDepartment: string
    status?: $Enums.ComplaintStatus
    sla?: string | null
    upvoteCount?: number
    isPublic?: boolean
    escalationLevel?: string | null
    dateOfResolution?: Date | string | null
    assignedAgentId?: string | null
    managedByMunicipalAdminId?: string | null
    moderatedByMunicipalAdminId?: string | null
    crossDeptIssueSuperMunicipalId?: string | null
    escalatedToStateAdminId?: string | null
    escalatedToSuperStateAdminId?: string | null
    location?: ComplaintLocationUncheckedCreateNestedOneWithoutComplaintInput
    coAssignedAgents?: AgentUncheckedCreateNestedManyWithoutCoAssignedComplaintsInput
    upvotes?: UpvoteUncheckedCreateNestedManyWithoutComplaintInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutComplaintInput
  }

  export type ComplaintCreateOrConnectWithoutManagedBySuperAdminInput = {
    where: ComplaintWhereUniqueInput
    create: XOR<ComplaintCreateWithoutManagedBySuperAdminInput, ComplaintUncheckedCreateWithoutManagedBySuperAdminInput>
  }

  export type ComplaintCreateManyManagedBySuperAdminInputEnvelope = {
    data: ComplaintCreateManyManagedBySuperAdminInput | ComplaintCreateManyManagedBySuperAdminInput[]
    skipDuplicates?: boolean
  }

  export type CategoryUpsertWithWhereUniqueWithoutCreatedBySuperAdminInput = {
    where: CategoryWhereUniqueInput
    update: XOR<CategoryUpdateWithoutCreatedBySuperAdminInput, CategoryUncheckedUpdateWithoutCreatedBySuperAdminInput>
    create: XOR<CategoryCreateWithoutCreatedBySuperAdminInput, CategoryUncheckedCreateWithoutCreatedBySuperAdminInput>
  }

  export type CategoryUpdateWithWhereUniqueWithoutCreatedBySuperAdminInput = {
    where: CategoryWhereUniqueInput
    data: XOR<CategoryUpdateWithoutCreatedBySuperAdminInput, CategoryUncheckedUpdateWithoutCreatedBySuperAdminInput>
  }

  export type CategoryUpdateManyWithWhereWithoutCreatedBySuperAdminInput = {
    where: CategoryScalarWhereInput
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyWithoutCreatedBySuperAdminInput>
  }

  export type SuperStateAdminUpsertWithWhereUniqueWithoutManagedBySuperAdminInput = {
    where: SuperStateAdminWhereUniqueInput
    update: XOR<SuperStateAdminUpdateWithoutManagedBySuperAdminInput, SuperStateAdminUncheckedUpdateWithoutManagedBySuperAdminInput>
    create: XOR<SuperStateAdminCreateWithoutManagedBySuperAdminInput, SuperStateAdminUncheckedCreateWithoutManagedBySuperAdminInput>
  }

  export type SuperStateAdminUpdateWithWhereUniqueWithoutManagedBySuperAdminInput = {
    where: SuperStateAdminWhereUniqueInput
    data: XOR<SuperStateAdminUpdateWithoutManagedBySuperAdminInput, SuperStateAdminUncheckedUpdateWithoutManagedBySuperAdminInput>
  }

  export type SuperStateAdminUpdateManyWithWhereWithoutManagedBySuperAdminInput = {
    where: SuperStateAdminScalarWhereInput
    data: XOR<SuperStateAdminUpdateManyMutationInput, SuperStateAdminUncheckedUpdateManyWithoutManagedBySuperAdminInput>
  }

  export type SuperStateAdminScalarWhereInput = {
    AND?: SuperStateAdminScalarWhereInput | SuperStateAdminScalarWhereInput[]
    OR?: SuperStateAdminScalarWhereInput[]
    NOT?: SuperStateAdminScalarWhereInput | SuperStateAdminScalarWhereInput[]
    id?: StringFilter<"SuperStateAdmin"> | string
    fullName?: StringFilter<"SuperStateAdmin"> | string
    adminId?: StringFilter<"SuperStateAdmin"> | string
    officialEmail?: StringFilter<"SuperStateAdmin"> | string
    phoneNumber?: StringNullableFilter<"SuperStateAdmin"> | string | null
    password?: StringFilter<"SuperStateAdmin"> | string
    state?: StringFilter<"SuperStateAdmin"> | string
    accessLevel?: StringFilter<"SuperStateAdmin"> | string
    dateOfCreation?: DateTimeFilter<"SuperStateAdmin"> | Date | string
    lastUpdated?: DateTimeFilter<"SuperStateAdmin"> | Date | string
    status?: StringFilter<"SuperStateAdmin"> | string
    lastLogin?: DateTimeNullableFilter<"SuperStateAdmin"> | Date | string | null
    stateResolutionRate?: FloatFilter<"SuperStateAdmin"> | number
    crossDepartmentSuccess?: IntFilter<"SuperStateAdmin"> | number
    managedBySuperAdminId?: StringNullableFilter<"SuperStateAdmin"> | string | null
  }

  export type ComplaintUpsertWithWhereUniqueWithoutManagedBySuperAdminInput = {
    where: ComplaintWhereUniqueInput
    update: XOR<ComplaintUpdateWithoutManagedBySuperAdminInput, ComplaintUncheckedUpdateWithoutManagedBySuperAdminInput>
    create: XOR<ComplaintCreateWithoutManagedBySuperAdminInput, ComplaintUncheckedCreateWithoutManagedBySuperAdminInput>
  }

  export type ComplaintUpdateWithWhereUniqueWithoutManagedBySuperAdminInput = {
    where: ComplaintWhereUniqueInput
    data: XOR<ComplaintUpdateWithoutManagedBySuperAdminInput, ComplaintUncheckedUpdateWithoutManagedBySuperAdminInput>
  }

  export type ComplaintUpdateManyWithWhereWithoutManagedBySuperAdminInput = {
    where: ComplaintScalarWhereInput
    data: XOR<ComplaintUpdateManyMutationInput, ComplaintUncheckedUpdateManyWithoutManagedBySuperAdminInput>
  }

  export type ComplaintCreateWithoutCategoryInput = {
    id?: string
    submissionDate?: Date | string
    seq?: number
    subCategory: string
    standardizedSubCategory?: string | null
    description: string
    urgency?: $Enums.ComplaintUrgency
    attachmentUrl?: string | null
    assignedDepartment: string
    status?: $Enums.ComplaintStatus
    sla?: string | null
    upvoteCount?: number
    isPublic?: boolean
    escalationLevel?: string | null
    dateOfResolution?: Date | string | null
    complainant: UserCreateNestedOneWithoutComplaintsInput
    location?: ComplaintLocationCreateNestedOneWithoutComplaintInput
    assignedAgent?: AgentCreateNestedOneWithoutAssignedComplaintsInput
    coAssignedAgents?: AgentCreateNestedManyWithoutCoAssignedComplaintsInput
    managedByMunicipalAdmin?: DepartmentMunicipalAdminCreateNestedOneWithoutManagedComplaintsInput
    moderatedByMunicipalAdmin?: DepartmentMunicipalAdminCreateNestedOneWithoutCommunityModerationInput
    crossDeptIssueSuperMunicipal?: SuperMunicipalAdminCreateNestedOneWithoutCrossDepartmentIssuesInput
    escalatedToStateAdmin?: DepartmentStateAdminCreateNestedOneWithoutEscalatedComplaintsInput
    escalatedToSuperStateAdmin?: SuperStateAdminCreateNestedOneWithoutEscalatedComplaintsInput
    managedBySuperAdmin?: SuperAdminCreateNestedOneWithoutManagedComplaintsInput
    upvotes?: UpvoteCreateNestedManyWithoutComplaintInput
    auditLogs?: AuditLogCreateNestedManyWithoutComplaintInput
  }

  export type ComplaintUncheckedCreateWithoutCategoryInput = {
    id?: string
    submissionDate?: Date | string
    seq?: number
    complainantId: string
    subCategory: string
    standardizedSubCategory?: string | null
    description: string
    urgency?: $Enums.ComplaintUrgency
    attachmentUrl?: string | null
    assignedDepartment: string
    status?: $Enums.ComplaintStatus
    sla?: string | null
    upvoteCount?: number
    isPublic?: boolean
    escalationLevel?: string | null
    dateOfResolution?: Date | string | null
    assignedAgentId?: string | null
    managedByMunicipalAdminId?: string | null
    moderatedByMunicipalAdminId?: string | null
    crossDeptIssueSuperMunicipalId?: string | null
    escalatedToStateAdminId?: string | null
    escalatedToSuperStateAdminId?: string | null
    managedBySuperAdminId?: string | null
    location?: ComplaintLocationUncheckedCreateNestedOneWithoutComplaintInput
    coAssignedAgents?: AgentUncheckedCreateNestedManyWithoutCoAssignedComplaintsInput
    upvotes?: UpvoteUncheckedCreateNestedManyWithoutComplaintInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutComplaintInput
  }

  export type ComplaintCreateOrConnectWithoutCategoryInput = {
    where: ComplaintWhereUniqueInput
    create: XOR<ComplaintCreateWithoutCategoryInput, ComplaintUncheckedCreateWithoutCategoryInput>
  }

  export type ComplaintCreateManyCategoryInputEnvelope = {
    data: ComplaintCreateManyCategoryInput | ComplaintCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type SuperAdminCreateWithoutManagedCategoriesInput = {
    id?: string
    fullName: string
    adminId: string
    officialEmail: string
    phoneNumber?: string | null
    password: string
    accessLevel: string
    dateOfCreation?: Date | string
    lastUpdated?: Date | string
    status?: string
    lastLogin?: Date | string | null
    managedSuperStateAdmins?: SuperStateAdminCreateNestedManyWithoutManagedBySuperAdminInput
    managedComplaints?: ComplaintCreateNestedManyWithoutManagedBySuperAdminInput
  }

  export type SuperAdminUncheckedCreateWithoutManagedCategoriesInput = {
    id?: string
    fullName: string
    adminId: string
    officialEmail: string
    phoneNumber?: string | null
    password: string
    accessLevel: string
    dateOfCreation?: Date | string
    lastUpdated?: Date | string
    status?: string
    lastLogin?: Date | string | null
    managedSuperStateAdmins?: SuperStateAdminUncheckedCreateNestedManyWithoutManagedBySuperAdminInput
    managedComplaints?: ComplaintUncheckedCreateNestedManyWithoutManagedBySuperAdminInput
  }

  export type SuperAdminCreateOrConnectWithoutManagedCategoriesInput = {
    where: SuperAdminWhereUniqueInput
    create: XOR<SuperAdminCreateWithoutManagedCategoriesInput, SuperAdminUncheckedCreateWithoutManagedCategoriesInput>
  }

  export type DepartmentStateAdminCreateWithoutManagedCategoriesInput = {
    id?: string
    fullName: string
    adminId: string
    officialEmail: string
    password: string
    phoneNumber?: string | null
    department: string
    state: string
    accessLevel: string
    dateOfCreation?: Date | string
    lastUpdated?: Date | string
    status?: string
    lastLogin?: Date | string | null
    stateResolutionRate?: number
    systemicIssuesIdentified?: number
    managedMunicipalities?: DepartmentStateAdminCreatemanagedMunicipalitiesInput | string[]
    managedMunicipalAdmins?: DepartmentMunicipalAdminCreateNestedManyWithoutManagedByStateAdminInput
    escalatedComplaints?: ComplaintCreateNestedManyWithoutEscalatedToStateAdminInput
    regionalWorkflows?: RegionalWorkflowCreateNestedManyWithoutCreatedByInput
    managedBySuperState?: SuperStateAdminCreateNestedOneWithoutManagedDepartmentAdminsInput
  }

  export type DepartmentStateAdminUncheckedCreateWithoutManagedCategoriesInput = {
    id?: string
    fullName: string
    adminId: string
    officialEmail: string
    password: string
    phoneNumber?: string | null
    department: string
    state: string
    accessLevel: string
    dateOfCreation?: Date | string
    lastUpdated?: Date | string
    status?: string
    lastLogin?: Date | string | null
    stateResolutionRate?: number
    systemicIssuesIdentified?: number
    managedMunicipalities?: DepartmentStateAdminCreatemanagedMunicipalitiesInput | string[]
    managedBySuperStateId?: string | null
    managedMunicipalAdmins?: DepartmentMunicipalAdminUncheckedCreateNestedManyWithoutManagedByStateAdminInput
    escalatedComplaints?: ComplaintUncheckedCreateNestedManyWithoutEscalatedToStateAdminInput
    regionalWorkflows?: RegionalWorkflowUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type DepartmentStateAdminCreateOrConnectWithoutManagedCategoriesInput = {
    where: DepartmentStateAdminWhereUniqueInput
    create: XOR<DepartmentStateAdminCreateWithoutManagedCategoriesInput, DepartmentStateAdminUncheckedCreateWithoutManagedCategoriesInput>
  }

  export type ComplaintUpsertWithWhereUniqueWithoutCategoryInput = {
    where: ComplaintWhereUniqueInput
    update: XOR<ComplaintUpdateWithoutCategoryInput, ComplaintUncheckedUpdateWithoutCategoryInput>
    create: XOR<ComplaintCreateWithoutCategoryInput, ComplaintUncheckedCreateWithoutCategoryInput>
  }

  export type ComplaintUpdateWithWhereUniqueWithoutCategoryInput = {
    where: ComplaintWhereUniqueInput
    data: XOR<ComplaintUpdateWithoutCategoryInput, ComplaintUncheckedUpdateWithoutCategoryInput>
  }

  export type ComplaintUpdateManyWithWhereWithoutCategoryInput = {
    where: ComplaintScalarWhereInput
    data: XOR<ComplaintUpdateManyMutationInput, ComplaintUncheckedUpdateManyWithoutCategoryInput>
  }

  export type SuperAdminUpsertWithoutManagedCategoriesInput = {
    update: XOR<SuperAdminUpdateWithoutManagedCategoriesInput, SuperAdminUncheckedUpdateWithoutManagedCategoriesInput>
    create: XOR<SuperAdminCreateWithoutManagedCategoriesInput, SuperAdminUncheckedCreateWithoutManagedCategoriesInput>
    where?: SuperAdminWhereInput
  }

  export type SuperAdminUpdateToOneWithWhereWithoutManagedCategoriesInput = {
    where?: SuperAdminWhereInput
    data: XOR<SuperAdminUpdateWithoutManagedCategoriesInput, SuperAdminUncheckedUpdateWithoutManagedCategoriesInput>
  }

  export type SuperAdminUpdateWithoutManagedCategoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    officialEmail?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    accessLevel?: StringFieldUpdateOperationsInput | string
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    managedSuperStateAdmins?: SuperStateAdminUpdateManyWithoutManagedBySuperAdminNestedInput
    managedComplaints?: ComplaintUpdateManyWithoutManagedBySuperAdminNestedInput
  }

  export type SuperAdminUncheckedUpdateWithoutManagedCategoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    officialEmail?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    accessLevel?: StringFieldUpdateOperationsInput | string
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    managedSuperStateAdmins?: SuperStateAdminUncheckedUpdateManyWithoutManagedBySuperAdminNestedInput
    managedComplaints?: ComplaintUncheckedUpdateManyWithoutManagedBySuperAdminNestedInput
  }

  export type DepartmentStateAdminUpsertWithoutManagedCategoriesInput = {
    update: XOR<DepartmentStateAdminUpdateWithoutManagedCategoriesInput, DepartmentStateAdminUncheckedUpdateWithoutManagedCategoriesInput>
    create: XOR<DepartmentStateAdminCreateWithoutManagedCategoriesInput, DepartmentStateAdminUncheckedCreateWithoutManagedCategoriesInput>
    where?: DepartmentStateAdminWhereInput
  }

  export type DepartmentStateAdminUpdateToOneWithWhereWithoutManagedCategoriesInput = {
    where?: DepartmentStateAdminWhereInput
    data: XOR<DepartmentStateAdminUpdateWithoutManagedCategoriesInput, DepartmentStateAdminUncheckedUpdateWithoutManagedCategoriesInput>
  }

  export type DepartmentStateAdminUpdateWithoutManagedCategoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    officialEmail?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    department?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    accessLevel?: StringFieldUpdateOperationsInput | string
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stateResolutionRate?: FloatFieldUpdateOperationsInput | number
    systemicIssuesIdentified?: IntFieldUpdateOperationsInput | number
    managedMunicipalities?: DepartmentStateAdminUpdatemanagedMunicipalitiesInput | string[]
    managedMunicipalAdmins?: DepartmentMunicipalAdminUpdateManyWithoutManagedByStateAdminNestedInput
    escalatedComplaints?: ComplaintUpdateManyWithoutEscalatedToStateAdminNestedInput
    regionalWorkflows?: RegionalWorkflowUpdateManyWithoutCreatedByNestedInput
    managedBySuperState?: SuperStateAdminUpdateOneWithoutManagedDepartmentAdminsNestedInput
  }

  export type DepartmentStateAdminUncheckedUpdateWithoutManagedCategoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    officialEmail?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    department?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    accessLevel?: StringFieldUpdateOperationsInput | string
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stateResolutionRate?: FloatFieldUpdateOperationsInput | number
    systemicIssuesIdentified?: IntFieldUpdateOperationsInput | number
    managedMunicipalities?: DepartmentStateAdminUpdatemanagedMunicipalitiesInput | string[]
    managedBySuperStateId?: NullableStringFieldUpdateOperationsInput | string | null
    managedMunicipalAdmins?: DepartmentMunicipalAdminUncheckedUpdateManyWithoutManagedByStateAdminNestedInput
    escalatedComplaints?: ComplaintUncheckedUpdateManyWithoutEscalatedToStateAdminNestedInput
    regionalWorkflows?: RegionalWorkflowUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type UserCreateWithoutComplaintsInput = {
    id?: string
    email: string
    name: string
    phoneNumber: string
    dateOfBirth: Date | string
    password: string
    aadhaarId: string
    preferredLanguage?: string
    disability?: string | null
    consentDataCollection?: boolean
    dateOfCreation?: Date | string
    lastUpdated?: Date | string
    status?: string
    location?: UserLocationCreateNestedOneWithoutUserInput
    upvotes?: UpvoteCreateNestedManyWithoutUserInput
    auditLogsCreated?: AuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutComplaintsInput = {
    id?: string
    email: string
    name: string
    phoneNumber: string
    dateOfBirth: Date | string
    password: string
    aadhaarId: string
    preferredLanguage?: string
    disability?: string | null
    consentDataCollection?: boolean
    dateOfCreation?: Date | string
    lastUpdated?: Date | string
    status?: string
    location?: UserLocationUncheckedCreateNestedOneWithoutUserInput
    upvotes?: UpvoteUncheckedCreateNestedManyWithoutUserInput
    auditLogsCreated?: AuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutComplaintsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutComplaintsInput, UserUncheckedCreateWithoutComplaintsInput>
  }

  export type CategoryCreateWithoutComplaintsInput = {
    id?: string
    name: string
    subCategories?: CategoryCreatesubCategoriesInput | string[]
    learnedSubCategories?: CategoryCreatelearnedSubCategoriesInput | string[]
    assignedDepartment: string
    creationDate?: Date | string
    lastUpdated?: Date | string
    createdBySuperAdmin?: SuperAdminCreateNestedOneWithoutManagedCategoriesInput
    managedByDeptStateAdmin?: DepartmentStateAdminCreateNestedOneWithoutManagedCategoriesInput
  }

  export type CategoryUncheckedCreateWithoutComplaintsInput = {
    id?: string
    name: string
    subCategories?: CategoryCreatesubCategoriesInput | string[]
    learnedSubCategories?: CategoryCreatelearnedSubCategoriesInput | string[]
    assignedDepartment: string
    creationDate?: Date | string
    lastUpdated?: Date | string
    createdBySuperAdminId?: string | null
    managedByDeptStateAdminId?: string | null
  }

  export type CategoryCreateOrConnectWithoutComplaintsInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutComplaintsInput, CategoryUncheckedCreateWithoutComplaintsInput>
  }

  export type ComplaintLocationCreateWithoutComplaintInput = {
    id?: string
    pin: string
    district: string
    city: string
    locality: string
    street?: string | null
    latitude?: number | null
    longitude?: number | null
  }

  export type ComplaintLocationUncheckedCreateWithoutComplaintInput = {
    id?: string
    pin: string
    district: string
    city: string
    locality: string
    street?: string | null
    latitude?: number | null
    longitude?: number | null
  }

  export type ComplaintLocationCreateOrConnectWithoutComplaintInput = {
    where: ComplaintLocationWhereUniqueInput
    create: XOR<ComplaintLocationCreateWithoutComplaintInput, ComplaintLocationUncheckedCreateWithoutComplaintInput>
  }

  export type AgentCreateWithoutAssignedComplaintsInput = {
    id?: string
    email: string
    fullName: string
    employeeId: string
    password: string
    phoneNumber: string
    officialEmail: string
    department: string
    municipality: string
    autonomyLevel: string
    accessLevel: string
    workloadLimit?: number
    currentWorkload?: number
    availabilityStatus?: string
    dateOfCreation?: Date | string
    lastUpdated?: Date | string
    status?: string
    lastLogin?: Date | string | null
    resolutionRate?: number
    avgResolutionTime?: string | null
    collaborationMetric?: number
    coAssignedComplaints?: ComplaintCreateNestedManyWithoutCoAssignedAgentsInput
    managedByMunicipal?: DepartmentMunicipalAdminCreateNestedOneWithoutManagedAgentsInput
  }

  export type AgentUncheckedCreateWithoutAssignedComplaintsInput = {
    id?: string
    email: string
    fullName: string
    employeeId: string
    password: string
    phoneNumber: string
    officialEmail: string
    department: string
    municipality: string
    autonomyLevel: string
    accessLevel: string
    workloadLimit?: number
    currentWorkload?: number
    availabilityStatus?: string
    dateOfCreation?: Date | string
    lastUpdated?: Date | string
    status?: string
    lastLogin?: Date | string | null
    resolutionRate?: number
    avgResolutionTime?: string | null
    collaborationMetric?: number
    managedByMunicipalId?: string | null
    coAssignedComplaints?: ComplaintUncheckedCreateNestedManyWithoutCoAssignedAgentsInput
  }

  export type AgentCreateOrConnectWithoutAssignedComplaintsInput = {
    where: AgentWhereUniqueInput
    create: XOR<AgentCreateWithoutAssignedComplaintsInput, AgentUncheckedCreateWithoutAssignedComplaintsInput>
  }

  export type AgentCreateWithoutCoAssignedComplaintsInput = {
    id?: string
    email: string
    fullName: string
    employeeId: string
    password: string
    phoneNumber: string
    officialEmail: string
    department: string
    municipality: string
    autonomyLevel: string
    accessLevel: string
    workloadLimit?: number
    currentWorkload?: number
    availabilityStatus?: string
    dateOfCreation?: Date | string
    lastUpdated?: Date | string
    status?: string
    lastLogin?: Date | string | null
    resolutionRate?: number
    avgResolutionTime?: string | null
    collaborationMetric?: number
    assignedComplaints?: ComplaintCreateNestedManyWithoutAssignedAgentInput
    managedByMunicipal?: DepartmentMunicipalAdminCreateNestedOneWithoutManagedAgentsInput
  }

  export type AgentUncheckedCreateWithoutCoAssignedComplaintsInput = {
    id?: string
    email: string
    fullName: string
    employeeId: string
    password: string
    phoneNumber: string
    officialEmail: string
    department: string
    municipality: string
    autonomyLevel: string
    accessLevel: string
    workloadLimit?: number
    currentWorkload?: number
    availabilityStatus?: string
    dateOfCreation?: Date | string
    lastUpdated?: Date | string
    status?: string
    lastLogin?: Date | string | null
    resolutionRate?: number
    avgResolutionTime?: string | null
    collaborationMetric?: number
    managedByMunicipalId?: string | null
    assignedComplaints?: ComplaintUncheckedCreateNestedManyWithoutAssignedAgentInput
  }

  export type AgentCreateOrConnectWithoutCoAssignedComplaintsInput = {
    where: AgentWhereUniqueInput
    create: XOR<AgentCreateWithoutCoAssignedComplaintsInput, AgentUncheckedCreateWithoutCoAssignedComplaintsInput>
  }

  export type DepartmentMunicipalAdminCreateWithoutManagedComplaintsInput = {
    id?: string
    fullName: string
    adminId: string
    officialEmail: string
    phoneNumber: string
    password: string
    department: string
    municipality: string
    accessLevel: string
    dateOfCreation?: Date | string
    lastUpdated?: Date | string
    status?: string
    lastLogin?: Date | string | null
    resolutionRate?: number
    slaComplianceRate?: number | null
    escalationCount?: number
    managedAgents?: AgentCreateNestedManyWithoutManagedByMunicipalInput
    communityModeration?: ComplaintCreateNestedManyWithoutModeratedByMunicipalAdminInput
    newsUpdates?: NewsUpdateCreateNestedManyWithoutCreatedByInput
    managedByStateAdmin?: DepartmentStateAdminCreateNestedOneWithoutManagedMunicipalAdminsInput
    managedBySuperMunicipal?: SuperMunicipalAdminCreateNestedOneWithoutManagedDepartmentAdminsInput
  }

  export type DepartmentMunicipalAdminUncheckedCreateWithoutManagedComplaintsInput = {
    id?: string
    fullName: string
    adminId: string
    officialEmail: string
    phoneNumber: string
    password: string
    department: string
    municipality: string
    accessLevel: string
    dateOfCreation?: Date | string
    lastUpdated?: Date | string
    status?: string
    lastLogin?: Date | string | null
    resolutionRate?: number
    slaComplianceRate?: number | null
    escalationCount?: number
    managedByStateAdminId?: string | null
    managedBySuperMunicipalId?: string | null
    managedAgents?: AgentUncheckedCreateNestedManyWithoutManagedByMunicipalInput
    communityModeration?: ComplaintUncheckedCreateNestedManyWithoutModeratedByMunicipalAdminInput
    newsUpdates?: NewsUpdateUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type DepartmentMunicipalAdminCreateOrConnectWithoutManagedComplaintsInput = {
    where: DepartmentMunicipalAdminWhereUniqueInput
    create: XOR<DepartmentMunicipalAdminCreateWithoutManagedComplaintsInput, DepartmentMunicipalAdminUncheckedCreateWithoutManagedComplaintsInput>
  }

  export type DepartmentMunicipalAdminCreateWithoutCommunityModerationInput = {
    id?: string
    fullName: string
    adminId: string
    officialEmail: string
    phoneNumber: string
    password: string
    department: string
    municipality: string
    accessLevel: string
    dateOfCreation?: Date | string
    lastUpdated?: Date | string
    status?: string
    lastLogin?: Date | string | null
    resolutionRate?: number
    slaComplianceRate?: number | null
    escalationCount?: number
    managedAgents?: AgentCreateNestedManyWithoutManagedByMunicipalInput
    managedComplaints?: ComplaintCreateNestedManyWithoutManagedByMunicipalAdminInput
    newsUpdates?: NewsUpdateCreateNestedManyWithoutCreatedByInput
    managedByStateAdmin?: DepartmentStateAdminCreateNestedOneWithoutManagedMunicipalAdminsInput
    managedBySuperMunicipal?: SuperMunicipalAdminCreateNestedOneWithoutManagedDepartmentAdminsInput
  }

  export type DepartmentMunicipalAdminUncheckedCreateWithoutCommunityModerationInput = {
    id?: string
    fullName: string
    adminId: string
    officialEmail: string
    phoneNumber: string
    password: string
    department: string
    municipality: string
    accessLevel: string
    dateOfCreation?: Date | string
    lastUpdated?: Date | string
    status?: string
    lastLogin?: Date | string | null
    resolutionRate?: number
    slaComplianceRate?: number | null
    escalationCount?: number
    managedByStateAdminId?: string | null
    managedBySuperMunicipalId?: string | null
    managedAgents?: AgentUncheckedCreateNestedManyWithoutManagedByMunicipalInput
    managedComplaints?: ComplaintUncheckedCreateNestedManyWithoutManagedByMunicipalAdminInput
    newsUpdates?: NewsUpdateUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type DepartmentMunicipalAdminCreateOrConnectWithoutCommunityModerationInput = {
    where: DepartmentMunicipalAdminWhereUniqueInput
    create: XOR<DepartmentMunicipalAdminCreateWithoutCommunityModerationInput, DepartmentMunicipalAdminUncheckedCreateWithoutCommunityModerationInput>
  }

  export type SuperMunicipalAdminCreateWithoutCrossDepartmentIssuesInput = {
    id?: string
    fullName: string
    adminId: string
    officialEmail: string
    password: string
    phoneNumber?: string | null
    municipality: string
    accessLevel: string
    dateOfCreation?: Date | string
    lastUpdated?: Date | string
    status?: string
    lastLogin?: Date | string | null
    municipalityResolutionRate?: number
    crossDepartmentSuccess?: number
    managedDepartmentAdmins?: DepartmentMunicipalAdminCreateNestedManyWithoutManagedBySuperMunicipalInput
    managedBySuperState?: SuperStateAdminCreateNestedOneWithoutManagedSuperMunicipalAdminsInput
  }

  export type SuperMunicipalAdminUncheckedCreateWithoutCrossDepartmentIssuesInput = {
    id?: string
    fullName: string
    adminId: string
    officialEmail: string
    password: string
    phoneNumber?: string | null
    municipality: string
    accessLevel: string
    dateOfCreation?: Date | string
    lastUpdated?: Date | string
    status?: string
    lastLogin?: Date | string | null
    municipalityResolutionRate?: number
    crossDepartmentSuccess?: number
    managedBySuperStateId?: string | null
    managedDepartmentAdmins?: DepartmentMunicipalAdminUncheckedCreateNestedManyWithoutManagedBySuperMunicipalInput
  }

  export type SuperMunicipalAdminCreateOrConnectWithoutCrossDepartmentIssuesInput = {
    where: SuperMunicipalAdminWhereUniqueInput
    create: XOR<SuperMunicipalAdminCreateWithoutCrossDepartmentIssuesInput, SuperMunicipalAdminUncheckedCreateWithoutCrossDepartmentIssuesInput>
  }

  export type DepartmentStateAdminCreateWithoutEscalatedComplaintsInput = {
    id?: string
    fullName: string
    adminId: string
    officialEmail: string
    password: string
    phoneNumber?: string | null
    department: string
    state: string
    accessLevel: string
    dateOfCreation?: Date | string
    lastUpdated?: Date | string
    status?: string
    lastLogin?: Date | string | null
    stateResolutionRate?: number
    systemicIssuesIdentified?: number
    managedMunicipalities?: DepartmentStateAdminCreatemanagedMunicipalitiesInput | string[]
    managedMunicipalAdmins?: DepartmentMunicipalAdminCreateNestedManyWithoutManagedByStateAdminInput
    regionalWorkflows?: RegionalWorkflowCreateNestedManyWithoutCreatedByInput
    managedCategories?: CategoryCreateNestedManyWithoutManagedByDeptStateAdminInput
    managedBySuperState?: SuperStateAdminCreateNestedOneWithoutManagedDepartmentAdminsInput
  }

  export type DepartmentStateAdminUncheckedCreateWithoutEscalatedComplaintsInput = {
    id?: string
    fullName: string
    adminId: string
    officialEmail: string
    password: string
    phoneNumber?: string | null
    department: string
    state: string
    accessLevel: string
    dateOfCreation?: Date | string
    lastUpdated?: Date | string
    status?: string
    lastLogin?: Date | string | null
    stateResolutionRate?: number
    systemicIssuesIdentified?: number
    managedMunicipalities?: DepartmentStateAdminCreatemanagedMunicipalitiesInput | string[]
    managedBySuperStateId?: string | null
    managedMunicipalAdmins?: DepartmentMunicipalAdminUncheckedCreateNestedManyWithoutManagedByStateAdminInput
    regionalWorkflows?: RegionalWorkflowUncheckedCreateNestedManyWithoutCreatedByInput
    managedCategories?: CategoryUncheckedCreateNestedManyWithoutManagedByDeptStateAdminInput
  }

  export type DepartmentStateAdminCreateOrConnectWithoutEscalatedComplaintsInput = {
    where: DepartmentStateAdminWhereUniqueInput
    create: XOR<DepartmentStateAdminCreateWithoutEscalatedComplaintsInput, DepartmentStateAdminUncheckedCreateWithoutEscalatedComplaintsInput>
  }

  export type SuperStateAdminCreateWithoutEscalatedComplaintsInput = {
    id?: string
    fullName: string
    adminId: string
    officialEmail: string
    phoneNumber?: string | null
    password: string
    state: string
    accessLevel: string
    dateOfCreation?: Date | string
    lastUpdated?: Date | string
    status?: string
    lastLogin?: Date | string | null
    stateResolutionRate?: number
    crossDepartmentSuccess?: number
    managedDepartmentAdmins?: DepartmentStateAdminCreateNestedManyWithoutManagedBySuperStateInput
    managedSuperMunicipalAdmins?: SuperMunicipalAdminCreateNestedManyWithoutManagedBySuperStateInput
    managedBySuperAdmin?: SuperAdminCreateNestedOneWithoutManagedSuperStateAdminsInput
  }

  export type SuperStateAdminUncheckedCreateWithoutEscalatedComplaintsInput = {
    id?: string
    fullName: string
    adminId: string
    officialEmail: string
    phoneNumber?: string | null
    password: string
    state: string
    accessLevel: string
    dateOfCreation?: Date | string
    lastUpdated?: Date | string
    status?: string
    lastLogin?: Date | string | null
    stateResolutionRate?: number
    crossDepartmentSuccess?: number
    managedBySuperAdminId?: string | null
    managedDepartmentAdmins?: DepartmentStateAdminUncheckedCreateNestedManyWithoutManagedBySuperStateInput
    managedSuperMunicipalAdmins?: SuperMunicipalAdminUncheckedCreateNestedManyWithoutManagedBySuperStateInput
  }

  export type SuperStateAdminCreateOrConnectWithoutEscalatedComplaintsInput = {
    where: SuperStateAdminWhereUniqueInput
    create: XOR<SuperStateAdminCreateWithoutEscalatedComplaintsInput, SuperStateAdminUncheckedCreateWithoutEscalatedComplaintsInput>
  }

  export type SuperAdminCreateWithoutManagedComplaintsInput = {
    id?: string
    fullName: string
    adminId: string
    officialEmail: string
    phoneNumber?: string | null
    password: string
    accessLevel: string
    dateOfCreation?: Date | string
    lastUpdated?: Date | string
    status?: string
    lastLogin?: Date | string | null
    managedCategories?: CategoryCreateNestedManyWithoutCreatedBySuperAdminInput
    managedSuperStateAdmins?: SuperStateAdminCreateNestedManyWithoutManagedBySuperAdminInput
  }

  export type SuperAdminUncheckedCreateWithoutManagedComplaintsInput = {
    id?: string
    fullName: string
    adminId: string
    officialEmail: string
    phoneNumber?: string | null
    password: string
    accessLevel: string
    dateOfCreation?: Date | string
    lastUpdated?: Date | string
    status?: string
    lastLogin?: Date | string | null
    managedCategories?: CategoryUncheckedCreateNestedManyWithoutCreatedBySuperAdminInput
    managedSuperStateAdmins?: SuperStateAdminUncheckedCreateNestedManyWithoutManagedBySuperAdminInput
  }

  export type SuperAdminCreateOrConnectWithoutManagedComplaintsInput = {
    where: SuperAdminWhereUniqueInput
    create: XOR<SuperAdminCreateWithoutManagedComplaintsInput, SuperAdminUncheckedCreateWithoutManagedComplaintsInput>
  }

  export type UpvoteCreateWithoutComplaintInput = {
    id?: string
    timestamp?: Date | string
    user: UserCreateNestedOneWithoutUpvotesInput
  }

  export type UpvoteUncheckedCreateWithoutComplaintInput = {
    id?: string
    userId: string
    timestamp?: Date | string
  }

  export type UpvoteCreateOrConnectWithoutComplaintInput = {
    where: UpvoteWhereUniqueInput
    create: XOR<UpvoteCreateWithoutComplaintInput, UpvoteUncheckedCreateWithoutComplaintInput>
  }

  export type UpvoteCreateManyComplaintInputEnvelope = {
    data: UpvoteCreateManyComplaintInput | UpvoteCreateManyComplaintInput[]
    skipDuplicates?: boolean
  }

  export type AuditLogCreateWithoutComplaintInput = {
    id?: string
    action: string
    timestamp?: Date | string
    details?: string | null
    user: UserCreateNestedOneWithoutAuditLogsCreatedInput
  }

  export type AuditLogUncheckedCreateWithoutComplaintInput = {
    id?: string
    action: string
    userId: string
    timestamp?: Date | string
    details?: string | null
  }

  export type AuditLogCreateOrConnectWithoutComplaintInput = {
    where: AuditLogWhereUniqueInput
    create: XOR<AuditLogCreateWithoutComplaintInput, AuditLogUncheckedCreateWithoutComplaintInput>
  }

  export type AuditLogCreateManyComplaintInputEnvelope = {
    data: AuditLogCreateManyComplaintInput | AuditLogCreateManyComplaintInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutComplaintsInput = {
    update: XOR<UserUpdateWithoutComplaintsInput, UserUncheckedUpdateWithoutComplaintsInput>
    create: XOR<UserCreateWithoutComplaintsInput, UserUncheckedCreateWithoutComplaintsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutComplaintsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutComplaintsInput, UserUncheckedUpdateWithoutComplaintsInput>
  }

  export type UserUpdateWithoutComplaintsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
    aadhaarId?: StringFieldUpdateOperationsInput | string
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    disability?: NullableStringFieldUpdateOperationsInput | string | null
    consentDataCollection?: BoolFieldUpdateOperationsInput | boolean
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    location?: UserLocationUpdateOneWithoutUserNestedInput
    upvotes?: UpvoteUpdateManyWithoutUserNestedInput
    auditLogsCreated?: AuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutComplaintsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
    aadhaarId?: StringFieldUpdateOperationsInput | string
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    disability?: NullableStringFieldUpdateOperationsInput | string | null
    consentDataCollection?: BoolFieldUpdateOperationsInput | boolean
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    location?: UserLocationUncheckedUpdateOneWithoutUserNestedInput
    upvotes?: UpvoteUncheckedUpdateManyWithoutUserNestedInput
    auditLogsCreated?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CategoryUpsertWithoutComplaintsInput = {
    update: XOR<CategoryUpdateWithoutComplaintsInput, CategoryUncheckedUpdateWithoutComplaintsInput>
    create: XOR<CategoryCreateWithoutComplaintsInput, CategoryUncheckedCreateWithoutComplaintsInput>
    where?: CategoryWhereInput
  }

  export type CategoryUpdateToOneWithWhereWithoutComplaintsInput = {
    where?: CategoryWhereInput
    data: XOR<CategoryUpdateWithoutComplaintsInput, CategoryUncheckedUpdateWithoutComplaintsInput>
  }

  export type CategoryUpdateWithoutComplaintsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subCategories?: CategoryUpdatesubCategoriesInput | string[]
    learnedSubCategories?: CategoryUpdatelearnedSubCategoriesInput | string[]
    assignedDepartment?: StringFieldUpdateOperationsInput | string
    creationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBySuperAdmin?: SuperAdminUpdateOneWithoutManagedCategoriesNestedInput
    managedByDeptStateAdmin?: DepartmentStateAdminUpdateOneWithoutManagedCategoriesNestedInput
  }

  export type CategoryUncheckedUpdateWithoutComplaintsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subCategories?: CategoryUpdatesubCategoriesInput | string[]
    learnedSubCategories?: CategoryUpdatelearnedSubCategoriesInput | string[]
    assignedDepartment?: StringFieldUpdateOperationsInput | string
    creationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBySuperAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    managedByDeptStateAdminId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ComplaintLocationUpsertWithoutComplaintInput = {
    update: XOR<ComplaintLocationUpdateWithoutComplaintInput, ComplaintLocationUncheckedUpdateWithoutComplaintInput>
    create: XOR<ComplaintLocationCreateWithoutComplaintInput, ComplaintLocationUncheckedCreateWithoutComplaintInput>
    where?: ComplaintLocationWhereInput
  }

  export type ComplaintLocationUpdateToOneWithWhereWithoutComplaintInput = {
    where?: ComplaintLocationWhereInput
    data: XOR<ComplaintLocationUpdateWithoutComplaintInput, ComplaintLocationUncheckedUpdateWithoutComplaintInput>
  }

  export type ComplaintLocationUpdateWithoutComplaintInput = {
    id?: StringFieldUpdateOperationsInput | string
    pin?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    locality?: StringFieldUpdateOperationsInput | string
    street?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type ComplaintLocationUncheckedUpdateWithoutComplaintInput = {
    id?: StringFieldUpdateOperationsInput | string
    pin?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    locality?: StringFieldUpdateOperationsInput | string
    street?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type AgentUpsertWithoutAssignedComplaintsInput = {
    update: XOR<AgentUpdateWithoutAssignedComplaintsInput, AgentUncheckedUpdateWithoutAssignedComplaintsInput>
    create: XOR<AgentCreateWithoutAssignedComplaintsInput, AgentUncheckedCreateWithoutAssignedComplaintsInput>
    where?: AgentWhereInput
  }

  export type AgentUpdateToOneWithWhereWithoutAssignedComplaintsInput = {
    where?: AgentWhereInput
    data: XOR<AgentUpdateWithoutAssignedComplaintsInput, AgentUncheckedUpdateWithoutAssignedComplaintsInput>
  }

  export type AgentUpdateWithoutAssignedComplaintsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    officialEmail?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    municipality?: StringFieldUpdateOperationsInput | string
    autonomyLevel?: StringFieldUpdateOperationsInput | string
    accessLevel?: StringFieldUpdateOperationsInput | string
    workloadLimit?: IntFieldUpdateOperationsInput | number
    currentWorkload?: IntFieldUpdateOperationsInput | number
    availabilityStatus?: StringFieldUpdateOperationsInput | string
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolutionRate?: FloatFieldUpdateOperationsInput | number
    avgResolutionTime?: NullableStringFieldUpdateOperationsInput | string | null
    collaborationMetric?: IntFieldUpdateOperationsInput | number
    coAssignedComplaints?: ComplaintUpdateManyWithoutCoAssignedAgentsNestedInput
    managedByMunicipal?: DepartmentMunicipalAdminUpdateOneWithoutManagedAgentsNestedInput
  }

  export type AgentUncheckedUpdateWithoutAssignedComplaintsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    officialEmail?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    municipality?: StringFieldUpdateOperationsInput | string
    autonomyLevel?: StringFieldUpdateOperationsInput | string
    accessLevel?: StringFieldUpdateOperationsInput | string
    workloadLimit?: IntFieldUpdateOperationsInput | number
    currentWorkload?: IntFieldUpdateOperationsInput | number
    availabilityStatus?: StringFieldUpdateOperationsInput | string
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolutionRate?: FloatFieldUpdateOperationsInput | number
    avgResolutionTime?: NullableStringFieldUpdateOperationsInput | string | null
    collaborationMetric?: IntFieldUpdateOperationsInput | number
    managedByMunicipalId?: NullableStringFieldUpdateOperationsInput | string | null
    coAssignedComplaints?: ComplaintUncheckedUpdateManyWithoutCoAssignedAgentsNestedInput
  }

  export type AgentUpsertWithWhereUniqueWithoutCoAssignedComplaintsInput = {
    where: AgentWhereUniqueInput
    update: XOR<AgentUpdateWithoutCoAssignedComplaintsInput, AgentUncheckedUpdateWithoutCoAssignedComplaintsInput>
    create: XOR<AgentCreateWithoutCoAssignedComplaintsInput, AgentUncheckedCreateWithoutCoAssignedComplaintsInput>
  }

  export type AgentUpdateWithWhereUniqueWithoutCoAssignedComplaintsInput = {
    where: AgentWhereUniqueInput
    data: XOR<AgentUpdateWithoutCoAssignedComplaintsInput, AgentUncheckedUpdateWithoutCoAssignedComplaintsInput>
  }

  export type AgentUpdateManyWithWhereWithoutCoAssignedComplaintsInput = {
    where: AgentScalarWhereInput
    data: XOR<AgentUpdateManyMutationInput, AgentUncheckedUpdateManyWithoutCoAssignedComplaintsInput>
  }

  export type DepartmentMunicipalAdminUpsertWithoutManagedComplaintsInput = {
    update: XOR<DepartmentMunicipalAdminUpdateWithoutManagedComplaintsInput, DepartmentMunicipalAdminUncheckedUpdateWithoutManagedComplaintsInput>
    create: XOR<DepartmentMunicipalAdminCreateWithoutManagedComplaintsInput, DepartmentMunicipalAdminUncheckedCreateWithoutManagedComplaintsInput>
    where?: DepartmentMunicipalAdminWhereInput
  }

  export type DepartmentMunicipalAdminUpdateToOneWithWhereWithoutManagedComplaintsInput = {
    where?: DepartmentMunicipalAdminWhereInput
    data: XOR<DepartmentMunicipalAdminUpdateWithoutManagedComplaintsInput, DepartmentMunicipalAdminUncheckedUpdateWithoutManagedComplaintsInput>
  }

  export type DepartmentMunicipalAdminUpdateWithoutManagedComplaintsInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    officialEmail?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    municipality?: StringFieldUpdateOperationsInput | string
    accessLevel?: StringFieldUpdateOperationsInput | string
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolutionRate?: FloatFieldUpdateOperationsInput | number
    slaComplianceRate?: NullableFloatFieldUpdateOperationsInput | number | null
    escalationCount?: IntFieldUpdateOperationsInput | number
    managedAgents?: AgentUpdateManyWithoutManagedByMunicipalNestedInput
    communityModeration?: ComplaintUpdateManyWithoutModeratedByMunicipalAdminNestedInput
    newsUpdates?: NewsUpdateUpdateManyWithoutCreatedByNestedInput
    managedByStateAdmin?: DepartmentStateAdminUpdateOneWithoutManagedMunicipalAdminsNestedInput
    managedBySuperMunicipal?: SuperMunicipalAdminUpdateOneWithoutManagedDepartmentAdminsNestedInput
  }

  export type DepartmentMunicipalAdminUncheckedUpdateWithoutManagedComplaintsInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    officialEmail?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    municipality?: StringFieldUpdateOperationsInput | string
    accessLevel?: StringFieldUpdateOperationsInput | string
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolutionRate?: FloatFieldUpdateOperationsInput | number
    slaComplianceRate?: NullableFloatFieldUpdateOperationsInput | number | null
    escalationCount?: IntFieldUpdateOperationsInput | number
    managedByStateAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    managedBySuperMunicipalId?: NullableStringFieldUpdateOperationsInput | string | null
    managedAgents?: AgentUncheckedUpdateManyWithoutManagedByMunicipalNestedInput
    communityModeration?: ComplaintUncheckedUpdateManyWithoutModeratedByMunicipalAdminNestedInput
    newsUpdates?: NewsUpdateUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type DepartmentMunicipalAdminUpsertWithoutCommunityModerationInput = {
    update: XOR<DepartmentMunicipalAdminUpdateWithoutCommunityModerationInput, DepartmentMunicipalAdminUncheckedUpdateWithoutCommunityModerationInput>
    create: XOR<DepartmentMunicipalAdminCreateWithoutCommunityModerationInput, DepartmentMunicipalAdminUncheckedCreateWithoutCommunityModerationInput>
    where?: DepartmentMunicipalAdminWhereInput
  }

  export type DepartmentMunicipalAdminUpdateToOneWithWhereWithoutCommunityModerationInput = {
    where?: DepartmentMunicipalAdminWhereInput
    data: XOR<DepartmentMunicipalAdminUpdateWithoutCommunityModerationInput, DepartmentMunicipalAdminUncheckedUpdateWithoutCommunityModerationInput>
  }

  export type DepartmentMunicipalAdminUpdateWithoutCommunityModerationInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    officialEmail?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    municipality?: StringFieldUpdateOperationsInput | string
    accessLevel?: StringFieldUpdateOperationsInput | string
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolutionRate?: FloatFieldUpdateOperationsInput | number
    slaComplianceRate?: NullableFloatFieldUpdateOperationsInput | number | null
    escalationCount?: IntFieldUpdateOperationsInput | number
    managedAgents?: AgentUpdateManyWithoutManagedByMunicipalNestedInput
    managedComplaints?: ComplaintUpdateManyWithoutManagedByMunicipalAdminNestedInput
    newsUpdates?: NewsUpdateUpdateManyWithoutCreatedByNestedInput
    managedByStateAdmin?: DepartmentStateAdminUpdateOneWithoutManagedMunicipalAdminsNestedInput
    managedBySuperMunicipal?: SuperMunicipalAdminUpdateOneWithoutManagedDepartmentAdminsNestedInput
  }

  export type DepartmentMunicipalAdminUncheckedUpdateWithoutCommunityModerationInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    officialEmail?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    municipality?: StringFieldUpdateOperationsInput | string
    accessLevel?: StringFieldUpdateOperationsInput | string
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolutionRate?: FloatFieldUpdateOperationsInput | number
    slaComplianceRate?: NullableFloatFieldUpdateOperationsInput | number | null
    escalationCount?: IntFieldUpdateOperationsInput | number
    managedByStateAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    managedBySuperMunicipalId?: NullableStringFieldUpdateOperationsInput | string | null
    managedAgents?: AgentUncheckedUpdateManyWithoutManagedByMunicipalNestedInput
    managedComplaints?: ComplaintUncheckedUpdateManyWithoutManagedByMunicipalAdminNestedInput
    newsUpdates?: NewsUpdateUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type SuperMunicipalAdminUpsertWithoutCrossDepartmentIssuesInput = {
    update: XOR<SuperMunicipalAdminUpdateWithoutCrossDepartmentIssuesInput, SuperMunicipalAdminUncheckedUpdateWithoutCrossDepartmentIssuesInput>
    create: XOR<SuperMunicipalAdminCreateWithoutCrossDepartmentIssuesInput, SuperMunicipalAdminUncheckedCreateWithoutCrossDepartmentIssuesInput>
    where?: SuperMunicipalAdminWhereInput
  }

  export type SuperMunicipalAdminUpdateToOneWithWhereWithoutCrossDepartmentIssuesInput = {
    where?: SuperMunicipalAdminWhereInput
    data: XOR<SuperMunicipalAdminUpdateWithoutCrossDepartmentIssuesInput, SuperMunicipalAdminUncheckedUpdateWithoutCrossDepartmentIssuesInput>
  }

  export type SuperMunicipalAdminUpdateWithoutCrossDepartmentIssuesInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    officialEmail?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    municipality?: StringFieldUpdateOperationsInput | string
    accessLevel?: StringFieldUpdateOperationsInput | string
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    municipalityResolutionRate?: FloatFieldUpdateOperationsInput | number
    crossDepartmentSuccess?: IntFieldUpdateOperationsInput | number
    managedDepartmentAdmins?: DepartmentMunicipalAdminUpdateManyWithoutManagedBySuperMunicipalNestedInput
    managedBySuperState?: SuperStateAdminUpdateOneWithoutManagedSuperMunicipalAdminsNestedInput
  }

  export type SuperMunicipalAdminUncheckedUpdateWithoutCrossDepartmentIssuesInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    officialEmail?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    municipality?: StringFieldUpdateOperationsInput | string
    accessLevel?: StringFieldUpdateOperationsInput | string
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    municipalityResolutionRate?: FloatFieldUpdateOperationsInput | number
    crossDepartmentSuccess?: IntFieldUpdateOperationsInput | number
    managedBySuperStateId?: NullableStringFieldUpdateOperationsInput | string | null
    managedDepartmentAdmins?: DepartmentMunicipalAdminUncheckedUpdateManyWithoutManagedBySuperMunicipalNestedInput
  }

  export type DepartmentStateAdminUpsertWithoutEscalatedComplaintsInput = {
    update: XOR<DepartmentStateAdminUpdateWithoutEscalatedComplaintsInput, DepartmentStateAdminUncheckedUpdateWithoutEscalatedComplaintsInput>
    create: XOR<DepartmentStateAdminCreateWithoutEscalatedComplaintsInput, DepartmentStateAdminUncheckedCreateWithoutEscalatedComplaintsInput>
    where?: DepartmentStateAdminWhereInput
  }

  export type DepartmentStateAdminUpdateToOneWithWhereWithoutEscalatedComplaintsInput = {
    where?: DepartmentStateAdminWhereInput
    data: XOR<DepartmentStateAdminUpdateWithoutEscalatedComplaintsInput, DepartmentStateAdminUncheckedUpdateWithoutEscalatedComplaintsInput>
  }

  export type DepartmentStateAdminUpdateWithoutEscalatedComplaintsInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    officialEmail?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    department?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    accessLevel?: StringFieldUpdateOperationsInput | string
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stateResolutionRate?: FloatFieldUpdateOperationsInput | number
    systemicIssuesIdentified?: IntFieldUpdateOperationsInput | number
    managedMunicipalities?: DepartmentStateAdminUpdatemanagedMunicipalitiesInput | string[]
    managedMunicipalAdmins?: DepartmentMunicipalAdminUpdateManyWithoutManagedByStateAdminNestedInput
    regionalWorkflows?: RegionalWorkflowUpdateManyWithoutCreatedByNestedInput
    managedCategories?: CategoryUpdateManyWithoutManagedByDeptStateAdminNestedInput
    managedBySuperState?: SuperStateAdminUpdateOneWithoutManagedDepartmentAdminsNestedInput
  }

  export type DepartmentStateAdminUncheckedUpdateWithoutEscalatedComplaintsInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    officialEmail?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    department?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    accessLevel?: StringFieldUpdateOperationsInput | string
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stateResolutionRate?: FloatFieldUpdateOperationsInput | number
    systemicIssuesIdentified?: IntFieldUpdateOperationsInput | number
    managedMunicipalities?: DepartmentStateAdminUpdatemanagedMunicipalitiesInput | string[]
    managedBySuperStateId?: NullableStringFieldUpdateOperationsInput | string | null
    managedMunicipalAdmins?: DepartmentMunicipalAdminUncheckedUpdateManyWithoutManagedByStateAdminNestedInput
    regionalWorkflows?: RegionalWorkflowUncheckedUpdateManyWithoutCreatedByNestedInput
    managedCategories?: CategoryUncheckedUpdateManyWithoutManagedByDeptStateAdminNestedInput
  }

  export type SuperStateAdminUpsertWithoutEscalatedComplaintsInput = {
    update: XOR<SuperStateAdminUpdateWithoutEscalatedComplaintsInput, SuperStateAdminUncheckedUpdateWithoutEscalatedComplaintsInput>
    create: XOR<SuperStateAdminCreateWithoutEscalatedComplaintsInput, SuperStateAdminUncheckedCreateWithoutEscalatedComplaintsInput>
    where?: SuperStateAdminWhereInput
  }

  export type SuperStateAdminUpdateToOneWithWhereWithoutEscalatedComplaintsInput = {
    where?: SuperStateAdminWhereInput
    data: XOR<SuperStateAdminUpdateWithoutEscalatedComplaintsInput, SuperStateAdminUncheckedUpdateWithoutEscalatedComplaintsInput>
  }

  export type SuperStateAdminUpdateWithoutEscalatedComplaintsInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    officialEmail?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    accessLevel?: StringFieldUpdateOperationsInput | string
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stateResolutionRate?: FloatFieldUpdateOperationsInput | number
    crossDepartmentSuccess?: IntFieldUpdateOperationsInput | number
    managedDepartmentAdmins?: DepartmentStateAdminUpdateManyWithoutManagedBySuperStateNestedInput
    managedSuperMunicipalAdmins?: SuperMunicipalAdminUpdateManyWithoutManagedBySuperStateNestedInput
    managedBySuperAdmin?: SuperAdminUpdateOneWithoutManagedSuperStateAdminsNestedInput
  }

  export type SuperStateAdminUncheckedUpdateWithoutEscalatedComplaintsInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    officialEmail?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    accessLevel?: StringFieldUpdateOperationsInput | string
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stateResolutionRate?: FloatFieldUpdateOperationsInput | number
    crossDepartmentSuccess?: IntFieldUpdateOperationsInput | number
    managedBySuperAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    managedDepartmentAdmins?: DepartmentStateAdminUncheckedUpdateManyWithoutManagedBySuperStateNestedInput
    managedSuperMunicipalAdmins?: SuperMunicipalAdminUncheckedUpdateManyWithoutManagedBySuperStateNestedInput
  }

  export type SuperAdminUpsertWithoutManagedComplaintsInput = {
    update: XOR<SuperAdminUpdateWithoutManagedComplaintsInput, SuperAdminUncheckedUpdateWithoutManagedComplaintsInput>
    create: XOR<SuperAdminCreateWithoutManagedComplaintsInput, SuperAdminUncheckedCreateWithoutManagedComplaintsInput>
    where?: SuperAdminWhereInput
  }

  export type SuperAdminUpdateToOneWithWhereWithoutManagedComplaintsInput = {
    where?: SuperAdminWhereInput
    data: XOR<SuperAdminUpdateWithoutManagedComplaintsInput, SuperAdminUncheckedUpdateWithoutManagedComplaintsInput>
  }

  export type SuperAdminUpdateWithoutManagedComplaintsInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    officialEmail?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    accessLevel?: StringFieldUpdateOperationsInput | string
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    managedCategories?: CategoryUpdateManyWithoutCreatedBySuperAdminNestedInput
    managedSuperStateAdmins?: SuperStateAdminUpdateManyWithoutManagedBySuperAdminNestedInput
  }

  export type SuperAdminUncheckedUpdateWithoutManagedComplaintsInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    officialEmail?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    accessLevel?: StringFieldUpdateOperationsInput | string
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    managedCategories?: CategoryUncheckedUpdateManyWithoutCreatedBySuperAdminNestedInput
    managedSuperStateAdmins?: SuperStateAdminUncheckedUpdateManyWithoutManagedBySuperAdminNestedInput
  }

  export type UpvoteUpsertWithWhereUniqueWithoutComplaintInput = {
    where: UpvoteWhereUniqueInput
    update: XOR<UpvoteUpdateWithoutComplaintInput, UpvoteUncheckedUpdateWithoutComplaintInput>
    create: XOR<UpvoteCreateWithoutComplaintInput, UpvoteUncheckedCreateWithoutComplaintInput>
  }

  export type UpvoteUpdateWithWhereUniqueWithoutComplaintInput = {
    where: UpvoteWhereUniqueInput
    data: XOR<UpvoteUpdateWithoutComplaintInput, UpvoteUncheckedUpdateWithoutComplaintInput>
  }

  export type UpvoteUpdateManyWithWhereWithoutComplaintInput = {
    where: UpvoteScalarWhereInput
    data: XOR<UpvoteUpdateManyMutationInput, UpvoteUncheckedUpdateManyWithoutComplaintInput>
  }

  export type AuditLogUpsertWithWhereUniqueWithoutComplaintInput = {
    where: AuditLogWhereUniqueInput
    update: XOR<AuditLogUpdateWithoutComplaintInput, AuditLogUncheckedUpdateWithoutComplaintInput>
    create: XOR<AuditLogCreateWithoutComplaintInput, AuditLogUncheckedCreateWithoutComplaintInput>
  }

  export type AuditLogUpdateWithWhereUniqueWithoutComplaintInput = {
    where: AuditLogWhereUniqueInput
    data: XOR<AuditLogUpdateWithoutComplaintInput, AuditLogUncheckedUpdateWithoutComplaintInput>
  }

  export type AuditLogUpdateManyWithWhereWithoutComplaintInput = {
    where: AuditLogScalarWhereInput
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyWithoutComplaintInput>
  }

  export type ComplaintCreateWithoutLocationInput = {
    id?: string
    submissionDate?: Date | string
    seq?: number
    subCategory: string
    standardizedSubCategory?: string | null
    description: string
    urgency?: $Enums.ComplaintUrgency
    attachmentUrl?: string | null
    assignedDepartment: string
    status?: $Enums.ComplaintStatus
    sla?: string | null
    upvoteCount?: number
    isPublic?: boolean
    escalationLevel?: string | null
    dateOfResolution?: Date | string | null
    complainant: UserCreateNestedOneWithoutComplaintsInput
    category: CategoryCreateNestedOneWithoutComplaintsInput
    assignedAgent?: AgentCreateNestedOneWithoutAssignedComplaintsInput
    coAssignedAgents?: AgentCreateNestedManyWithoutCoAssignedComplaintsInput
    managedByMunicipalAdmin?: DepartmentMunicipalAdminCreateNestedOneWithoutManagedComplaintsInput
    moderatedByMunicipalAdmin?: DepartmentMunicipalAdminCreateNestedOneWithoutCommunityModerationInput
    crossDeptIssueSuperMunicipal?: SuperMunicipalAdminCreateNestedOneWithoutCrossDepartmentIssuesInput
    escalatedToStateAdmin?: DepartmentStateAdminCreateNestedOneWithoutEscalatedComplaintsInput
    escalatedToSuperStateAdmin?: SuperStateAdminCreateNestedOneWithoutEscalatedComplaintsInput
    managedBySuperAdmin?: SuperAdminCreateNestedOneWithoutManagedComplaintsInput
    upvotes?: UpvoteCreateNestedManyWithoutComplaintInput
    auditLogs?: AuditLogCreateNestedManyWithoutComplaintInput
  }

  export type ComplaintUncheckedCreateWithoutLocationInput = {
    id?: string
    submissionDate?: Date | string
    seq?: number
    complainantId: string
    categoryId: string
    subCategory: string
    standardizedSubCategory?: string | null
    description: string
    urgency?: $Enums.ComplaintUrgency
    attachmentUrl?: string | null
    assignedDepartment: string
    status?: $Enums.ComplaintStatus
    sla?: string | null
    upvoteCount?: number
    isPublic?: boolean
    escalationLevel?: string | null
    dateOfResolution?: Date | string | null
    assignedAgentId?: string | null
    managedByMunicipalAdminId?: string | null
    moderatedByMunicipalAdminId?: string | null
    crossDeptIssueSuperMunicipalId?: string | null
    escalatedToStateAdminId?: string | null
    escalatedToSuperStateAdminId?: string | null
    managedBySuperAdminId?: string | null
    coAssignedAgents?: AgentUncheckedCreateNestedManyWithoutCoAssignedComplaintsInput
    upvotes?: UpvoteUncheckedCreateNestedManyWithoutComplaintInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutComplaintInput
  }

  export type ComplaintCreateOrConnectWithoutLocationInput = {
    where: ComplaintWhereUniqueInput
    create: XOR<ComplaintCreateWithoutLocationInput, ComplaintUncheckedCreateWithoutLocationInput>
  }

  export type ComplaintUpsertWithoutLocationInput = {
    update: XOR<ComplaintUpdateWithoutLocationInput, ComplaintUncheckedUpdateWithoutLocationInput>
    create: XOR<ComplaintCreateWithoutLocationInput, ComplaintUncheckedCreateWithoutLocationInput>
    where?: ComplaintWhereInput
  }

  export type ComplaintUpdateToOneWithWhereWithoutLocationInput = {
    where?: ComplaintWhereInput
    data: XOR<ComplaintUpdateWithoutLocationInput, ComplaintUncheckedUpdateWithoutLocationInput>
  }

  export type ComplaintUpdateWithoutLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    submissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    subCategory?: StringFieldUpdateOperationsInput | string
    standardizedSubCategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    urgency?: EnumComplaintUrgencyFieldUpdateOperationsInput | $Enums.ComplaintUrgency
    attachmentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    assignedDepartment?: StringFieldUpdateOperationsInput | string
    status?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    sla?: NullableStringFieldUpdateOperationsInput | string | null
    upvoteCount?: IntFieldUpdateOperationsInput | number
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    escalationLevel?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    complainant?: UserUpdateOneRequiredWithoutComplaintsNestedInput
    category?: CategoryUpdateOneRequiredWithoutComplaintsNestedInput
    assignedAgent?: AgentUpdateOneWithoutAssignedComplaintsNestedInput
    coAssignedAgents?: AgentUpdateManyWithoutCoAssignedComplaintsNestedInput
    managedByMunicipalAdmin?: DepartmentMunicipalAdminUpdateOneWithoutManagedComplaintsNestedInput
    moderatedByMunicipalAdmin?: DepartmentMunicipalAdminUpdateOneWithoutCommunityModerationNestedInput
    crossDeptIssueSuperMunicipal?: SuperMunicipalAdminUpdateOneWithoutCrossDepartmentIssuesNestedInput
    escalatedToStateAdmin?: DepartmentStateAdminUpdateOneWithoutEscalatedComplaintsNestedInput
    escalatedToSuperStateAdmin?: SuperStateAdminUpdateOneWithoutEscalatedComplaintsNestedInput
    managedBySuperAdmin?: SuperAdminUpdateOneWithoutManagedComplaintsNestedInput
    upvotes?: UpvoteUpdateManyWithoutComplaintNestedInput
    auditLogs?: AuditLogUpdateManyWithoutComplaintNestedInput
  }

  export type ComplaintUncheckedUpdateWithoutLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    submissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    seq?: IntFieldUpdateOperationsInput | number
    complainantId?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    subCategory?: StringFieldUpdateOperationsInput | string
    standardizedSubCategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    urgency?: EnumComplaintUrgencyFieldUpdateOperationsInput | $Enums.ComplaintUrgency
    attachmentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    assignedDepartment?: StringFieldUpdateOperationsInput | string
    status?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    sla?: NullableStringFieldUpdateOperationsInput | string | null
    upvoteCount?: IntFieldUpdateOperationsInput | number
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    escalationLevel?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignedAgentId?: NullableStringFieldUpdateOperationsInput | string | null
    managedByMunicipalAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    moderatedByMunicipalAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    crossDeptIssueSuperMunicipalId?: NullableStringFieldUpdateOperationsInput | string | null
    escalatedToStateAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    escalatedToSuperStateAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    managedBySuperAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    coAssignedAgents?: AgentUncheckedUpdateManyWithoutCoAssignedComplaintsNestedInput
    upvotes?: UpvoteUncheckedUpdateManyWithoutComplaintNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutComplaintNestedInput
  }

  export type UserCreateWithoutUpvotesInput = {
    id?: string
    email: string
    name: string
    phoneNumber: string
    dateOfBirth: Date | string
    password: string
    aadhaarId: string
    preferredLanguage?: string
    disability?: string | null
    consentDataCollection?: boolean
    dateOfCreation?: Date | string
    lastUpdated?: Date | string
    status?: string
    location?: UserLocationCreateNestedOneWithoutUserInput
    complaints?: ComplaintCreateNestedManyWithoutComplainantInput
    auditLogsCreated?: AuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUpvotesInput = {
    id?: string
    email: string
    name: string
    phoneNumber: string
    dateOfBirth: Date | string
    password: string
    aadhaarId: string
    preferredLanguage?: string
    disability?: string | null
    consentDataCollection?: boolean
    dateOfCreation?: Date | string
    lastUpdated?: Date | string
    status?: string
    location?: UserLocationUncheckedCreateNestedOneWithoutUserInput
    complaints?: ComplaintUncheckedCreateNestedManyWithoutComplainantInput
    auditLogsCreated?: AuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUpvotesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUpvotesInput, UserUncheckedCreateWithoutUpvotesInput>
  }

  export type ComplaintCreateWithoutUpvotesInput = {
    id?: string
    submissionDate?: Date | string
    seq?: number
    subCategory: string
    standardizedSubCategory?: string | null
    description: string
    urgency?: $Enums.ComplaintUrgency
    attachmentUrl?: string | null
    assignedDepartment: string
    status?: $Enums.ComplaintStatus
    sla?: string | null
    upvoteCount?: number
    isPublic?: boolean
    escalationLevel?: string | null
    dateOfResolution?: Date | string | null
    complainant: UserCreateNestedOneWithoutComplaintsInput
    category: CategoryCreateNestedOneWithoutComplaintsInput
    location?: ComplaintLocationCreateNestedOneWithoutComplaintInput
    assignedAgent?: AgentCreateNestedOneWithoutAssignedComplaintsInput
    coAssignedAgents?: AgentCreateNestedManyWithoutCoAssignedComplaintsInput
    managedByMunicipalAdmin?: DepartmentMunicipalAdminCreateNestedOneWithoutManagedComplaintsInput
    moderatedByMunicipalAdmin?: DepartmentMunicipalAdminCreateNestedOneWithoutCommunityModerationInput
    crossDeptIssueSuperMunicipal?: SuperMunicipalAdminCreateNestedOneWithoutCrossDepartmentIssuesInput
    escalatedToStateAdmin?: DepartmentStateAdminCreateNestedOneWithoutEscalatedComplaintsInput
    escalatedToSuperStateAdmin?: SuperStateAdminCreateNestedOneWithoutEscalatedComplaintsInput
    managedBySuperAdmin?: SuperAdminCreateNestedOneWithoutManagedComplaintsInput
    auditLogs?: AuditLogCreateNestedManyWithoutComplaintInput
  }

  export type ComplaintUncheckedCreateWithoutUpvotesInput = {
    id?: string
    submissionDate?: Date | string
    seq?: number
    complainantId: string
    categoryId: string
    subCategory: string
    standardizedSubCategory?: string | null
    description: string
    urgency?: $Enums.ComplaintUrgency
    attachmentUrl?: string | null
    assignedDepartment: string
    status?: $Enums.ComplaintStatus
    sla?: string | null
    upvoteCount?: number
    isPublic?: boolean
    escalationLevel?: string | null
    dateOfResolution?: Date | string | null
    assignedAgentId?: string | null
    managedByMunicipalAdminId?: string | null
    moderatedByMunicipalAdminId?: string | null
    crossDeptIssueSuperMunicipalId?: string | null
    escalatedToStateAdminId?: string | null
    escalatedToSuperStateAdminId?: string | null
    managedBySuperAdminId?: string | null
    location?: ComplaintLocationUncheckedCreateNestedOneWithoutComplaintInput
    coAssignedAgents?: AgentUncheckedCreateNestedManyWithoutCoAssignedComplaintsInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutComplaintInput
  }

  export type ComplaintCreateOrConnectWithoutUpvotesInput = {
    where: ComplaintWhereUniqueInput
    create: XOR<ComplaintCreateWithoutUpvotesInput, ComplaintUncheckedCreateWithoutUpvotesInput>
  }

  export type UserUpsertWithoutUpvotesInput = {
    update: XOR<UserUpdateWithoutUpvotesInput, UserUncheckedUpdateWithoutUpvotesInput>
    create: XOR<UserCreateWithoutUpvotesInput, UserUncheckedCreateWithoutUpvotesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUpvotesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUpvotesInput, UserUncheckedUpdateWithoutUpvotesInput>
  }

  export type UserUpdateWithoutUpvotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
    aadhaarId?: StringFieldUpdateOperationsInput | string
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    disability?: NullableStringFieldUpdateOperationsInput | string | null
    consentDataCollection?: BoolFieldUpdateOperationsInput | boolean
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    location?: UserLocationUpdateOneWithoutUserNestedInput
    complaints?: ComplaintUpdateManyWithoutComplainantNestedInput
    auditLogsCreated?: AuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUpvotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
    aadhaarId?: StringFieldUpdateOperationsInput | string
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    disability?: NullableStringFieldUpdateOperationsInput | string | null
    consentDataCollection?: BoolFieldUpdateOperationsInput | boolean
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    location?: UserLocationUncheckedUpdateOneWithoutUserNestedInput
    complaints?: ComplaintUncheckedUpdateManyWithoutComplainantNestedInput
    auditLogsCreated?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ComplaintUpsertWithoutUpvotesInput = {
    update: XOR<ComplaintUpdateWithoutUpvotesInput, ComplaintUncheckedUpdateWithoutUpvotesInput>
    create: XOR<ComplaintCreateWithoutUpvotesInput, ComplaintUncheckedCreateWithoutUpvotesInput>
    where?: ComplaintWhereInput
  }

  export type ComplaintUpdateToOneWithWhereWithoutUpvotesInput = {
    where?: ComplaintWhereInput
    data: XOR<ComplaintUpdateWithoutUpvotesInput, ComplaintUncheckedUpdateWithoutUpvotesInput>
  }

  export type ComplaintUpdateWithoutUpvotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    submissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    subCategory?: StringFieldUpdateOperationsInput | string
    standardizedSubCategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    urgency?: EnumComplaintUrgencyFieldUpdateOperationsInput | $Enums.ComplaintUrgency
    attachmentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    assignedDepartment?: StringFieldUpdateOperationsInput | string
    status?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    sla?: NullableStringFieldUpdateOperationsInput | string | null
    upvoteCount?: IntFieldUpdateOperationsInput | number
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    escalationLevel?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    complainant?: UserUpdateOneRequiredWithoutComplaintsNestedInput
    category?: CategoryUpdateOneRequiredWithoutComplaintsNestedInput
    location?: ComplaintLocationUpdateOneWithoutComplaintNestedInput
    assignedAgent?: AgentUpdateOneWithoutAssignedComplaintsNestedInput
    coAssignedAgents?: AgentUpdateManyWithoutCoAssignedComplaintsNestedInput
    managedByMunicipalAdmin?: DepartmentMunicipalAdminUpdateOneWithoutManagedComplaintsNestedInput
    moderatedByMunicipalAdmin?: DepartmentMunicipalAdminUpdateOneWithoutCommunityModerationNestedInput
    crossDeptIssueSuperMunicipal?: SuperMunicipalAdminUpdateOneWithoutCrossDepartmentIssuesNestedInput
    escalatedToStateAdmin?: DepartmentStateAdminUpdateOneWithoutEscalatedComplaintsNestedInput
    escalatedToSuperStateAdmin?: SuperStateAdminUpdateOneWithoutEscalatedComplaintsNestedInput
    managedBySuperAdmin?: SuperAdminUpdateOneWithoutManagedComplaintsNestedInput
    auditLogs?: AuditLogUpdateManyWithoutComplaintNestedInput
  }

  export type ComplaintUncheckedUpdateWithoutUpvotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    submissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    seq?: IntFieldUpdateOperationsInput | number
    complainantId?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    subCategory?: StringFieldUpdateOperationsInput | string
    standardizedSubCategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    urgency?: EnumComplaintUrgencyFieldUpdateOperationsInput | $Enums.ComplaintUrgency
    attachmentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    assignedDepartment?: StringFieldUpdateOperationsInput | string
    status?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    sla?: NullableStringFieldUpdateOperationsInput | string | null
    upvoteCount?: IntFieldUpdateOperationsInput | number
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    escalationLevel?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignedAgentId?: NullableStringFieldUpdateOperationsInput | string | null
    managedByMunicipalAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    moderatedByMunicipalAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    crossDeptIssueSuperMunicipalId?: NullableStringFieldUpdateOperationsInput | string | null
    escalatedToStateAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    escalatedToSuperStateAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    managedBySuperAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    location?: ComplaintLocationUncheckedUpdateOneWithoutComplaintNestedInput
    coAssignedAgents?: AgentUncheckedUpdateManyWithoutCoAssignedComplaintsNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutComplaintNestedInput
  }

  export type DepartmentMunicipalAdminCreateWithoutNewsUpdatesInput = {
    id?: string
    fullName: string
    adminId: string
    officialEmail: string
    phoneNumber: string
    password: string
    department: string
    municipality: string
    accessLevel: string
    dateOfCreation?: Date | string
    lastUpdated?: Date | string
    status?: string
    lastLogin?: Date | string | null
    resolutionRate?: number
    slaComplianceRate?: number | null
    escalationCount?: number
    managedAgents?: AgentCreateNestedManyWithoutManagedByMunicipalInput
    managedComplaints?: ComplaintCreateNestedManyWithoutManagedByMunicipalAdminInput
    communityModeration?: ComplaintCreateNestedManyWithoutModeratedByMunicipalAdminInput
    managedByStateAdmin?: DepartmentStateAdminCreateNestedOneWithoutManagedMunicipalAdminsInput
    managedBySuperMunicipal?: SuperMunicipalAdminCreateNestedOneWithoutManagedDepartmentAdminsInput
  }

  export type DepartmentMunicipalAdminUncheckedCreateWithoutNewsUpdatesInput = {
    id?: string
    fullName: string
    adminId: string
    officialEmail: string
    phoneNumber: string
    password: string
    department: string
    municipality: string
    accessLevel: string
    dateOfCreation?: Date | string
    lastUpdated?: Date | string
    status?: string
    lastLogin?: Date | string | null
    resolutionRate?: number
    slaComplianceRate?: number | null
    escalationCount?: number
    managedByStateAdminId?: string | null
    managedBySuperMunicipalId?: string | null
    managedAgents?: AgentUncheckedCreateNestedManyWithoutManagedByMunicipalInput
    managedComplaints?: ComplaintUncheckedCreateNestedManyWithoutManagedByMunicipalAdminInput
    communityModeration?: ComplaintUncheckedCreateNestedManyWithoutModeratedByMunicipalAdminInput
  }

  export type DepartmentMunicipalAdminCreateOrConnectWithoutNewsUpdatesInput = {
    where: DepartmentMunicipalAdminWhereUniqueInput
    create: XOR<DepartmentMunicipalAdminCreateWithoutNewsUpdatesInput, DepartmentMunicipalAdminUncheckedCreateWithoutNewsUpdatesInput>
  }

  export type DepartmentMunicipalAdminUpsertWithoutNewsUpdatesInput = {
    update: XOR<DepartmentMunicipalAdminUpdateWithoutNewsUpdatesInput, DepartmentMunicipalAdminUncheckedUpdateWithoutNewsUpdatesInput>
    create: XOR<DepartmentMunicipalAdminCreateWithoutNewsUpdatesInput, DepartmentMunicipalAdminUncheckedCreateWithoutNewsUpdatesInput>
    where?: DepartmentMunicipalAdminWhereInput
  }

  export type DepartmentMunicipalAdminUpdateToOneWithWhereWithoutNewsUpdatesInput = {
    where?: DepartmentMunicipalAdminWhereInput
    data: XOR<DepartmentMunicipalAdminUpdateWithoutNewsUpdatesInput, DepartmentMunicipalAdminUncheckedUpdateWithoutNewsUpdatesInput>
  }

  export type DepartmentMunicipalAdminUpdateWithoutNewsUpdatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    officialEmail?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    municipality?: StringFieldUpdateOperationsInput | string
    accessLevel?: StringFieldUpdateOperationsInput | string
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolutionRate?: FloatFieldUpdateOperationsInput | number
    slaComplianceRate?: NullableFloatFieldUpdateOperationsInput | number | null
    escalationCount?: IntFieldUpdateOperationsInput | number
    managedAgents?: AgentUpdateManyWithoutManagedByMunicipalNestedInput
    managedComplaints?: ComplaintUpdateManyWithoutManagedByMunicipalAdminNestedInput
    communityModeration?: ComplaintUpdateManyWithoutModeratedByMunicipalAdminNestedInput
    managedByStateAdmin?: DepartmentStateAdminUpdateOneWithoutManagedMunicipalAdminsNestedInput
    managedBySuperMunicipal?: SuperMunicipalAdminUpdateOneWithoutManagedDepartmentAdminsNestedInput
  }

  export type DepartmentMunicipalAdminUncheckedUpdateWithoutNewsUpdatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    officialEmail?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    municipality?: StringFieldUpdateOperationsInput | string
    accessLevel?: StringFieldUpdateOperationsInput | string
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolutionRate?: FloatFieldUpdateOperationsInput | number
    slaComplianceRate?: NullableFloatFieldUpdateOperationsInput | number | null
    escalationCount?: IntFieldUpdateOperationsInput | number
    managedByStateAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    managedBySuperMunicipalId?: NullableStringFieldUpdateOperationsInput | string | null
    managedAgents?: AgentUncheckedUpdateManyWithoutManagedByMunicipalNestedInput
    managedComplaints?: ComplaintUncheckedUpdateManyWithoutManagedByMunicipalAdminNestedInput
    communityModeration?: ComplaintUncheckedUpdateManyWithoutModeratedByMunicipalAdminNestedInput
  }

  export type UserCreateWithoutAuditLogsCreatedInput = {
    id?: string
    email: string
    name: string
    phoneNumber: string
    dateOfBirth: Date | string
    password: string
    aadhaarId: string
    preferredLanguage?: string
    disability?: string | null
    consentDataCollection?: boolean
    dateOfCreation?: Date | string
    lastUpdated?: Date | string
    status?: string
    location?: UserLocationCreateNestedOneWithoutUserInput
    complaints?: ComplaintCreateNestedManyWithoutComplainantInput
    upvotes?: UpvoteCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAuditLogsCreatedInput = {
    id?: string
    email: string
    name: string
    phoneNumber: string
    dateOfBirth: Date | string
    password: string
    aadhaarId: string
    preferredLanguage?: string
    disability?: string | null
    consentDataCollection?: boolean
    dateOfCreation?: Date | string
    lastUpdated?: Date | string
    status?: string
    location?: UserLocationUncheckedCreateNestedOneWithoutUserInput
    complaints?: ComplaintUncheckedCreateNestedManyWithoutComplainantInput
    upvotes?: UpvoteUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAuditLogsCreatedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAuditLogsCreatedInput, UserUncheckedCreateWithoutAuditLogsCreatedInput>
  }

  export type ComplaintCreateWithoutAuditLogsInput = {
    id?: string
    submissionDate?: Date | string
    seq?: number
    subCategory: string
    standardizedSubCategory?: string | null
    description: string
    urgency?: $Enums.ComplaintUrgency
    attachmentUrl?: string | null
    assignedDepartment: string
    status?: $Enums.ComplaintStatus
    sla?: string | null
    upvoteCount?: number
    isPublic?: boolean
    escalationLevel?: string | null
    dateOfResolution?: Date | string | null
    complainant: UserCreateNestedOneWithoutComplaintsInput
    category: CategoryCreateNestedOneWithoutComplaintsInput
    location?: ComplaintLocationCreateNestedOneWithoutComplaintInput
    assignedAgent?: AgentCreateNestedOneWithoutAssignedComplaintsInput
    coAssignedAgents?: AgentCreateNestedManyWithoutCoAssignedComplaintsInput
    managedByMunicipalAdmin?: DepartmentMunicipalAdminCreateNestedOneWithoutManagedComplaintsInput
    moderatedByMunicipalAdmin?: DepartmentMunicipalAdminCreateNestedOneWithoutCommunityModerationInput
    crossDeptIssueSuperMunicipal?: SuperMunicipalAdminCreateNestedOneWithoutCrossDepartmentIssuesInput
    escalatedToStateAdmin?: DepartmentStateAdminCreateNestedOneWithoutEscalatedComplaintsInput
    escalatedToSuperStateAdmin?: SuperStateAdminCreateNestedOneWithoutEscalatedComplaintsInput
    managedBySuperAdmin?: SuperAdminCreateNestedOneWithoutManagedComplaintsInput
    upvotes?: UpvoteCreateNestedManyWithoutComplaintInput
  }

  export type ComplaintUncheckedCreateWithoutAuditLogsInput = {
    id?: string
    submissionDate?: Date | string
    seq?: number
    complainantId: string
    categoryId: string
    subCategory: string
    standardizedSubCategory?: string | null
    description: string
    urgency?: $Enums.ComplaintUrgency
    attachmentUrl?: string | null
    assignedDepartment: string
    status?: $Enums.ComplaintStatus
    sla?: string | null
    upvoteCount?: number
    isPublic?: boolean
    escalationLevel?: string | null
    dateOfResolution?: Date | string | null
    assignedAgentId?: string | null
    managedByMunicipalAdminId?: string | null
    moderatedByMunicipalAdminId?: string | null
    crossDeptIssueSuperMunicipalId?: string | null
    escalatedToStateAdminId?: string | null
    escalatedToSuperStateAdminId?: string | null
    managedBySuperAdminId?: string | null
    location?: ComplaintLocationUncheckedCreateNestedOneWithoutComplaintInput
    coAssignedAgents?: AgentUncheckedCreateNestedManyWithoutCoAssignedComplaintsInput
    upvotes?: UpvoteUncheckedCreateNestedManyWithoutComplaintInput
  }

  export type ComplaintCreateOrConnectWithoutAuditLogsInput = {
    where: ComplaintWhereUniqueInput
    create: XOR<ComplaintCreateWithoutAuditLogsInput, ComplaintUncheckedCreateWithoutAuditLogsInput>
  }

  export type UserUpsertWithoutAuditLogsCreatedInput = {
    update: XOR<UserUpdateWithoutAuditLogsCreatedInput, UserUncheckedUpdateWithoutAuditLogsCreatedInput>
    create: XOR<UserCreateWithoutAuditLogsCreatedInput, UserUncheckedCreateWithoutAuditLogsCreatedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAuditLogsCreatedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAuditLogsCreatedInput, UserUncheckedUpdateWithoutAuditLogsCreatedInput>
  }

  export type UserUpdateWithoutAuditLogsCreatedInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
    aadhaarId?: StringFieldUpdateOperationsInput | string
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    disability?: NullableStringFieldUpdateOperationsInput | string | null
    consentDataCollection?: BoolFieldUpdateOperationsInput | boolean
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    location?: UserLocationUpdateOneWithoutUserNestedInput
    complaints?: ComplaintUpdateManyWithoutComplainantNestedInput
    upvotes?: UpvoteUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAuditLogsCreatedInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
    aadhaarId?: StringFieldUpdateOperationsInput | string
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    disability?: NullableStringFieldUpdateOperationsInput | string | null
    consentDataCollection?: BoolFieldUpdateOperationsInput | boolean
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    location?: UserLocationUncheckedUpdateOneWithoutUserNestedInput
    complaints?: ComplaintUncheckedUpdateManyWithoutComplainantNestedInput
    upvotes?: UpvoteUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ComplaintUpsertWithoutAuditLogsInput = {
    update: XOR<ComplaintUpdateWithoutAuditLogsInput, ComplaintUncheckedUpdateWithoutAuditLogsInput>
    create: XOR<ComplaintCreateWithoutAuditLogsInput, ComplaintUncheckedCreateWithoutAuditLogsInput>
    where?: ComplaintWhereInput
  }

  export type ComplaintUpdateToOneWithWhereWithoutAuditLogsInput = {
    where?: ComplaintWhereInput
    data: XOR<ComplaintUpdateWithoutAuditLogsInput, ComplaintUncheckedUpdateWithoutAuditLogsInput>
  }

  export type ComplaintUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    submissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    subCategory?: StringFieldUpdateOperationsInput | string
    standardizedSubCategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    urgency?: EnumComplaintUrgencyFieldUpdateOperationsInput | $Enums.ComplaintUrgency
    attachmentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    assignedDepartment?: StringFieldUpdateOperationsInput | string
    status?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    sla?: NullableStringFieldUpdateOperationsInput | string | null
    upvoteCount?: IntFieldUpdateOperationsInput | number
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    escalationLevel?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    complainant?: UserUpdateOneRequiredWithoutComplaintsNestedInput
    category?: CategoryUpdateOneRequiredWithoutComplaintsNestedInput
    location?: ComplaintLocationUpdateOneWithoutComplaintNestedInput
    assignedAgent?: AgentUpdateOneWithoutAssignedComplaintsNestedInput
    coAssignedAgents?: AgentUpdateManyWithoutCoAssignedComplaintsNestedInput
    managedByMunicipalAdmin?: DepartmentMunicipalAdminUpdateOneWithoutManagedComplaintsNestedInput
    moderatedByMunicipalAdmin?: DepartmentMunicipalAdminUpdateOneWithoutCommunityModerationNestedInput
    crossDeptIssueSuperMunicipal?: SuperMunicipalAdminUpdateOneWithoutCrossDepartmentIssuesNestedInput
    escalatedToStateAdmin?: DepartmentStateAdminUpdateOneWithoutEscalatedComplaintsNestedInput
    escalatedToSuperStateAdmin?: SuperStateAdminUpdateOneWithoutEscalatedComplaintsNestedInput
    managedBySuperAdmin?: SuperAdminUpdateOneWithoutManagedComplaintsNestedInput
    upvotes?: UpvoteUpdateManyWithoutComplaintNestedInput
  }

  export type ComplaintUncheckedUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    submissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    seq?: IntFieldUpdateOperationsInput | number
    complainantId?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    subCategory?: StringFieldUpdateOperationsInput | string
    standardizedSubCategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    urgency?: EnumComplaintUrgencyFieldUpdateOperationsInput | $Enums.ComplaintUrgency
    attachmentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    assignedDepartment?: StringFieldUpdateOperationsInput | string
    status?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    sla?: NullableStringFieldUpdateOperationsInput | string | null
    upvoteCount?: IntFieldUpdateOperationsInput | number
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    escalationLevel?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignedAgentId?: NullableStringFieldUpdateOperationsInput | string | null
    managedByMunicipalAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    moderatedByMunicipalAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    crossDeptIssueSuperMunicipalId?: NullableStringFieldUpdateOperationsInput | string | null
    escalatedToStateAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    escalatedToSuperStateAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    managedBySuperAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    location?: ComplaintLocationUncheckedUpdateOneWithoutComplaintNestedInput
    coAssignedAgents?: AgentUncheckedUpdateManyWithoutCoAssignedComplaintsNestedInput
    upvotes?: UpvoteUncheckedUpdateManyWithoutComplaintNestedInput
  }

  export type DepartmentStateAdminCreateWithoutRegionalWorkflowsInput = {
    id?: string
    fullName: string
    adminId: string
    officialEmail: string
    password: string
    phoneNumber?: string | null
    department: string
    state: string
    accessLevel: string
    dateOfCreation?: Date | string
    lastUpdated?: Date | string
    status?: string
    lastLogin?: Date | string | null
    stateResolutionRate?: number
    systemicIssuesIdentified?: number
    managedMunicipalities?: DepartmentStateAdminCreatemanagedMunicipalitiesInput | string[]
    managedMunicipalAdmins?: DepartmentMunicipalAdminCreateNestedManyWithoutManagedByStateAdminInput
    escalatedComplaints?: ComplaintCreateNestedManyWithoutEscalatedToStateAdminInput
    managedCategories?: CategoryCreateNestedManyWithoutManagedByDeptStateAdminInput
    managedBySuperState?: SuperStateAdminCreateNestedOneWithoutManagedDepartmentAdminsInput
  }

  export type DepartmentStateAdminUncheckedCreateWithoutRegionalWorkflowsInput = {
    id?: string
    fullName: string
    adminId: string
    officialEmail: string
    password: string
    phoneNumber?: string | null
    department: string
    state: string
    accessLevel: string
    dateOfCreation?: Date | string
    lastUpdated?: Date | string
    status?: string
    lastLogin?: Date | string | null
    stateResolutionRate?: number
    systemicIssuesIdentified?: number
    managedMunicipalities?: DepartmentStateAdminCreatemanagedMunicipalitiesInput | string[]
    managedBySuperStateId?: string | null
    managedMunicipalAdmins?: DepartmentMunicipalAdminUncheckedCreateNestedManyWithoutManagedByStateAdminInput
    escalatedComplaints?: ComplaintUncheckedCreateNestedManyWithoutEscalatedToStateAdminInput
    managedCategories?: CategoryUncheckedCreateNestedManyWithoutManagedByDeptStateAdminInput
  }

  export type DepartmentStateAdminCreateOrConnectWithoutRegionalWorkflowsInput = {
    where: DepartmentStateAdminWhereUniqueInput
    create: XOR<DepartmentStateAdminCreateWithoutRegionalWorkflowsInput, DepartmentStateAdminUncheckedCreateWithoutRegionalWorkflowsInput>
  }

  export type DepartmentStateAdminUpsertWithoutRegionalWorkflowsInput = {
    update: XOR<DepartmentStateAdminUpdateWithoutRegionalWorkflowsInput, DepartmentStateAdminUncheckedUpdateWithoutRegionalWorkflowsInput>
    create: XOR<DepartmentStateAdminCreateWithoutRegionalWorkflowsInput, DepartmentStateAdminUncheckedCreateWithoutRegionalWorkflowsInput>
    where?: DepartmentStateAdminWhereInput
  }

  export type DepartmentStateAdminUpdateToOneWithWhereWithoutRegionalWorkflowsInput = {
    where?: DepartmentStateAdminWhereInput
    data: XOR<DepartmentStateAdminUpdateWithoutRegionalWorkflowsInput, DepartmentStateAdminUncheckedUpdateWithoutRegionalWorkflowsInput>
  }

  export type DepartmentStateAdminUpdateWithoutRegionalWorkflowsInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    officialEmail?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    department?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    accessLevel?: StringFieldUpdateOperationsInput | string
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stateResolutionRate?: FloatFieldUpdateOperationsInput | number
    systemicIssuesIdentified?: IntFieldUpdateOperationsInput | number
    managedMunicipalities?: DepartmentStateAdminUpdatemanagedMunicipalitiesInput | string[]
    managedMunicipalAdmins?: DepartmentMunicipalAdminUpdateManyWithoutManagedByStateAdminNestedInput
    escalatedComplaints?: ComplaintUpdateManyWithoutEscalatedToStateAdminNestedInput
    managedCategories?: CategoryUpdateManyWithoutManagedByDeptStateAdminNestedInput
    managedBySuperState?: SuperStateAdminUpdateOneWithoutManagedDepartmentAdminsNestedInput
  }

  export type DepartmentStateAdminUncheckedUpdateWithoutRegionalWorkflowsInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    officialEmail?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    department?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    accessLevel?: StringFieldUpdateOperationsInput | string
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stateResolutionRate?: FloatFieldUpdateOperationsInput | number
    systemicIssuesIdentified?: IntFieldUpdateOperationsInput | number
    managedMunicipalities?: DepartmentStateAdminUpdatemanagedMunicipalitiesInput | string[]
    managedBySuperStateId?: NullableStringFieldUpdateOperationsInput | string | null
    managedMunicipalAdmins?: DepartmentMunicipalAdminUncheckedUpdateManyWithoutManagedByStateAdminNestedInput
    escalatedComplaints?: ComplaintUncheckedUpdateManyWithoutEscalatedToStateAdminNestedInput
    managedCategories?: CategoryUncheckedUpdateManyWithoutManagedByDeptStateAdminNestedInput
  }

  export type ComplaintCreateManyComplainantInput = {
    id?: string
    submissionDate?: Date | string
    seq?: number
    categoryId: string
    subCategory: string
    standardizedSubCategory?: string | null
    description: string
    urgency?: $Enums.ComplaintUrgency
    attachmentUrl?: string | null
    assignedDepartment: string
    status?: $Enums.ComplaintStatus
    sla?: string | null
    upvoteCount?: number
    isPublic?: boolean
    escalationLevel?: string | null
    dateOfResolution?: Date | string | null
    assignedAgentId?: string | null
    managedByMunicipalAdminId?: string | null
    moderatedByMunicipalAdminId?: string | null
    crossDeptIssueSuperMunicipalId?: string | null
    escalatedToStateAdminId?: string | null
    escalatedToSuperStateAdminId?: string | null
    managedBySuperAdminId?: string | null
  }

  export type UpvoteCreateManyUserInput = {
    id?: string
    complaintId: string
    timestamp?: Date | string
  }

  export type AuditLogCreateManyUserInput = {
    id?: string
    action: string
    complaintId?: string | null
    timestamp?: Date | string
    details?: string | null
  }

  export type ComplaintUpdateWithoutComplainantInput = {
    id?: StringFieldUpdateOperationsInput | string
    submissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    subCategory?: StringFieldUpdateOperationsInput | string
    standardizedSubCategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    urgency?: EnumComplaintUrgencyFieldUpdateOperationsInput | $Enums.ComplaintUrgency
    attachmentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    assignedDepartment?: StringFieldUpdateOperationsInput | string
    status?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    sla?: NullableStringFieldUpdateOperationsInput | string | null
    upvoteCount?: IntFieldUpdateOperationsInput | number
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    escalationLevel?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    category?: CategoryUpdateOneRequiredWithoutComplaintsNestedInput
    location?: ComplaintLocationUpdateOneWithoutComplaintNestedInput
    assignedAgent?: AgentUpdateOneWithoutAssignedComplaintsNestedInput
    coAssignedAgents?: AgentUpdateManyWithoutCoAssignedComplaintsNestedInput
    managedByMunicipalAdmin?: DepartmentMunicipalAdminUpdateOneWithoutManagedComplaintsNestedInput
    moderatedByMunicipalAdmin?: DepartmentMunicipalAdminUpdateOneWithoutCommunityModerationNestedInput
    crossDeptIssueSuperMunicipal?: SuperMunicipalAdminUpdateOneWithoutCrossDepartmentIssuesNestedInput
    escalatedToStateAdmin?: DepartmentStateAdminUpdateOneWithoutEscalatedComplaintsNestedInput
    escalatedToSuperStateAdmin?: SuperStateAdminUpdateOneWithoutEscalatedComplaintsNestedInput
    managedBySuperAdmin?: SuperAdminUpdateOneWithoutManagedComplaintsNestedInput
    upvotes?: UpvoteUpdateManyWithoutComplaintNestedInput
    auditLogs?: AuditLogUpdateManyWithoutComplaintNestedInput
  }

  export type ComplaintUncheckedUpdateWithoutComplainantInput = {
    id?: StringFieldUpdateOperationsInput | string
    submissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    seq?: IntFieldUpdateOperationsInput | number
    categoryId?: StringFieldUpdateOperationsInput | string
    subCategory?: StringFieldUpdateOperationsInput | string
    standardizedSubCategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    urgency?: EnumComplaintUrgencyFieldUpdateOperationsInput | $Enums.ComplaintUrgency
    attachmentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    assignedDepartment?: StringFieldUpdateOperationsInput | string
    status?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    sla?: NullableStringFieldUpdateOperationsInput | string | null
    upvoteCount?: IntFieldUpdateOperationsInput | number
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    escalationLevel?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignedAgentId?: NullableStringFieldUpdateOperationsInput | string | null
    managedByMunicipalAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    moderatedByMunicipalAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    crossDeptIssueSuperMunicipalId?: NullableStringFieldUpdateOperationsInput | string | null
    escalatedToStateAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    escalatedToSuperStateAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    managedBySuperAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    location?: ComplaintLocationUncheckedUpdateOneWithoutComplaintNestedInput
    coAssignedAgents?: AgentUncheckedUpdateManyWithoutCoAssignedComplaintsNestedInput
    upvotes?: UpvoteUncheckedUpdateManyWithoutComplaintNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutComplaintNestedInput
  }

  export type ComplaintUncheckedUpdateManyWithoutComplainantInput = {
    id?: StringFieldUpdateOperationsInput | string
    submissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    seq?: IntFieldUpdateOperationsInput | number
    categoryId?: StringFieldUpdateOperationsInput | string
    subCategory?: StringFieldUpdateOperationsInput | string
    standardizedSubCategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    urgency?: EnumComplaintUrgencyFieldUpdateOperationsInput | $Enums.ComplaintUrgency
    attachmentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    assignedDepartment?: StringFieldUpdateOperationsInput | string
    status?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    sla?: NullableStringFieldUpdateOperationsInput | string | null
    upvoteCount?: IntFieldUpdateOperationsInput | number
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    escalationLevel?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignedAgentId?: NullableStringFieldUpdateOperationsInput | string | null
    managedByMunicipalAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    moderatedByMunicipalAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    crossDeptIssueSuperMunicipalId?: NullableStringFieldUpdateOperationsInput | string | null
    escalatedToStateAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    escalatedToSuperStateAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    managedBySuperAdminId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UpvoteUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    complaint?: ComplaintUpdateOneRequiredWithoutUpvotesNestedInput
  }

  export type UpvoteUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    complaintId?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UpvoteUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    complaintId?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    complaint?: ComplaintUpdateOneWithoutAuditLogsNestedInput
  }

  export type AuditLogUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    complaintId?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AuditLogUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    complaintId?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ComplaintCreateManyAssignedAgentInput = {
    id?: string
    submissionDate?: Date | string
    seq?: number
    complainantId: string
    categoryId: string
    subCategory: string
    standardizedSubCategory?: string | null
    description: string
    urgency?: $Enums.ComplaintUrgency
    attachmentUrl?: string | null
    assignedDepartment: string
    status?: $Enums.ComplaintStatus
    sla?: string | null
    upvoteCount?: number
    isPublic?: boolean
    escalationLevel?: string | null
    dateOfResolution?: Date | string | null
    managedByMunicipalAdminId?: string | null
    moderatedByMunicipalAdminId?: string | null
    crossDeptIssueSuperMunicipalId?: string | null
    escalatedToStateAdminId?: string | null
    escalatedToSuperStateAdminId?: string | null
    managedBySuperAdminId?: string | null
  }

  export type ComplaintUpdateWithoutAssignedAgentInput = {
    id?: StringFieldUpdateOperationsInput | string
    submissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    subCategory?: StringFieldUpdateOperationsInput | string
    standardizedSubCategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    urgency?: EnumComplaintUrgencyFieldUpdateOperationsInput | $Enums.ComplaintUrgency
    attachmentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    assignedDepartment?: StringFieldUpdateOperationsInput | string
    status?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    sla?: NullableStringFieldUpdateOperationsInput | string | null
    upvoteCount?: IntFieldUpdateOperationsInput | number
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    escalationLevel?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    complainant?: UserUpdateOneRequiredWithoutComplaintsNestedInput
    category?: CategoryUpdateOneRequiredWithoutComplaintsNestedInput
    location?: ComplaintLocationUpdateOneWithoutComplaintNestedInput
    coAssignedAgents?: AgentUpdateManyWithoutCoAssignedComplaintsNestedInput
    managedByMunicipalAdmin?: DepartmentMunicipalAdminUpdateOneWithoutManagedComplaintsNestedInput
    moderatedByMunicipalAdmin?: DepartmentMunicipalAdminUpdateOneWithoutCommunityModerationNestedInput
    crossDeptIssueSuperMunicipal?: SuperMunicipalAdminUpdateOneWithoutCrossDepartmentIssuesNestedInput
    escalatedToStateAdmin?: DepartmentStateAdminUpdateOneWithoutEscalatedComplaintsNestedInput
    escalatedToSuperStateAdmin?: SuperStateAdminUpdateOneWithoutEscalatedComplaintsNestedInput
    managedBySuperAdmin?: SuperAdminUpdateOneWithoutManagedComplaintsNestedInput
    upvotes?: UpvoteUpdateManyWithoutComplaintNestedInput
    auditLogs?: AuditLogUpdateManyWithoutComplaintNestedInput
  }

  export type ComplaintUncheckedUpdateWithoutAssignedAgentInput = {
    id?: StringFieldUpdateOperationsInput | string
    submissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    seq?: IntFieldUpdateOperationsInput | number
    complainantId?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    subCategory?: StringFieldUpdateOperationsInput | string
    standardizedSubCategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    urgency?: EnumComplaintUrgencyFieldUpdateOperationsInput | $Enums.ComplaintUrgency
    attachmentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    assignedDepartment?: StringFieldUpdateOperationsInput | string
    status?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    sla?: NullableStringFieldUpdateOperationsInput | string | null
    upvoteCount?: IntFieldUpdateOperationsInput | number
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    escalationLevel?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    managedByMunicipalAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    moderatedByMunicipalAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    crossDeptIssueSuperMunicipalId?: NullableStringFieldUpdateOperationsInput | string | null
    escalatedToStateAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    escalatedToSuperStateAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    managedBySuperAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    location?: ComplaintLocationUncheckedUpdateOneWithoutComplaintNestedInput
    coAssignedAgents?: AgentUncheckedUpdateManyWithoutCoAssignedComplaintsNestedInput
    upvotes?: UpvoteUncheckedUpdateManyWithoutComplaintNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutComplaintNestedInput
  }

  export type ComplaintUncheckedUpdateManyWithoutAssignedAgentInput = {
    id?: StringFieldUpdateOperationsInput | string
    submissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    seq?: IntFieldUpdateOperationsInput | number
    complainantId?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    subCategory?: StringFieldUpdateOperationsInput | string
    standardizedSubCategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    urgency?: EnumComplaintUrgencyFieldUpdateOperationsInput | $Enums.ComplaintUrgency
    attachmentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    assignedDepartment?: StringFieldUpdateOperationsInput | string
    status?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    sla?: NullableStringFieldUpdateOperationsInput | string | null
    upvoteCount?: IntFieldUpdateOperationsInput | number
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    escalationLevel?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    managedByMunicipalAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    moderatedByMunicipalAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    crossDeptIssueSuperMunicipalId?: NullableStringFieldUpdateOperationsInput | string | null
    escalatedToStateAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    escalatedToSuperStateAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    managedBySuperAdminId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ComplaintUpdateWithoutCoAssignedAgentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    submissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    subCategory?: StringFieldUpdateOperationsInput | string
    standardizedSubCategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    urgency?: EnumComplaintUrgencyFieldUpdateOperationsInput | $Enums.ComplaintUrgency
    attachmentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    assignedDepartment?: StringFieldUpdateOperationsInput | string
    status?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    sla?: NullableStringFieldUpdateOperationsInput | string | null
    upvoteCount?: IntFieldUpdateOperationsInput | number
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    escalationLevel?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    complainant?: UserUpdateOneRequiredWithoutComplaintsNestedInput
    category?: CategoryUpdateOneRequiredWithoutComplaintsNestedInput
    location?: ComplaintLocationUpdateOneWithoutComplaintNestedInput
    assignedAgent?: AgentUpdateOneWithoutAssignedComplaintsNestedInput
    managedByMunicipalAdmin?: DepartmentMunicipalAdminUpdateOneWithoutManagedComplaintsNestedInput
    moderatedByMunicipalAdmin?: DepartmentMunicipalAdminUpdateOneWithoutCommunityModerationNestedInput
    crossDeptIssueSuperMunicipal?: SuperMunicipalAdminUpdateOneWithoutCrossDepartmentIssuesNestedInput
    escalatedToStateAdmin?: DepartmentStateAdminUpdateOneWithoutEscalatedComplaintsNestedInput
    escalatedToSuperStateAdmin?: SuperStateAdminUpdateOneWithoutEscalatedComplaintsNestedInput
    managedBySuperAdmin?: SuperAdminUpdateOneWithoutManagedComplaintsNestedInput
    upvotes?: UpvoteUpdateManyWithoutComplaintNestedInput
    auditLogs?: AuditLogUpdateManyWithoutComplaintNestedInput
  }

  export type ComplaintUncheckedUpdateWithoutCoAssignedAgentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    submissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    seq?: IntFieldUpdateOperationsInput | number
    complainantId?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    subCategory?: StringFieldUpdateOperationsInput | string
    standardizedSubCategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    urgency?: EnumComplaintUrgencyFieldUpdateOperationsInput | $Enums.ComplaintUrgency
    attachmentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    assignedDepartment?: StringFieldUpdateOperationsInput | string
    status?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    sla?: NullableStringFieldUpdateOperationsInput | string | null
    upvoteCount?: IntFieldUpdateOperationsInput | number
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    escalationLevel?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignedAgentId?: NullableStringFieldUpdateOperationsInput | string | null
    managedByMunicipalAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    moderatedByMunicipalAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    crossDeptIssueSuperMunicipalId?: NullableStringFieldUpdateOperationsInput | string | null
    escalatedToStateAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    escalatedToSuperStateAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    managedBySuperAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    location?: ComplaintLocationUncheckedUpdateOneWithoutComplaintNestedInput
    upvotes?: UpvoteUncheckedUpdateManyWithoutComplaintNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutComplaintNestedInput
  }

  export type ComplaintUncheckedUpdateManyWithoutCoAssignedAgentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    submissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    seq?: IntFieldUpdateOperationsInput | number
    complainantId?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    subCategory?: StringFieldUpdateOperationsInput | string
    standardizedSubCategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    urgency?: EnumComplaintUrgencyFieldUpdateOperationsInput | $Enums.ComplaintUrgency
    attachmentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    assignedDepartment?: StringFieldUpdateOperationsInput | string
    status?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    sla?: NullableStringFieldUpdateOperationsInput | string | null
    upvoteCount?: IntFieldUpdateOperationsInput | number
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    escalationLevel?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignedAgentId?: NullableStringFieldUpdateOperationsInput | string | null
    managedByMunicipalAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    moderatedByMunicipalAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    crossDeptIssueSuperMunicipalId?: NullableStringFieldUpdateOperationsInput | string | null
    escalatedToStateAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    escalatedToSuperStateAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    managedBySuperAdminId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AgentCreateManyManagedByMunicipalInput = {
    id?: string
    email: string
    fullName: string
    employeeId: string
    password: string
    phoneNumber: string
    officialEmail: string
    department: string
    municipality: string
    autonomyLevel: string
    accessLevel: string
    workloadLimit?: number
    currentWorkload?: number
    availabilityStatus?: string
    dateOfCreation?: Date | string
    lastUpdated?: Date | string
    status?: string
    lastLogin?: Date | string | null
    resolutionRate?: number
    avgResolutionTime?: string | null
    collaborationMetric?: number
  }

  export type ComplaintCreateManyManagedByMunicipalAdminInput = {
    id?: string
    submissionDate?: Date | string
    seq?: number
    complainantId: string
    categoryId: string
    subCategory: string
    standardizedSubCategory?: string | null
    description: string
    urgency?: $Enums.ComplaintUrgency
    attachmentUrl?: string | null
    assignedDepartment: string
    status?: $Enums.ComplaintStatus
    sla?: string | null
    upvoteCount?: number
    isPublic?: boolean
    escalationLevel?: string | null
    dateOfResolution?: Date | string | null
    assignedAgentId?: string | null
    moderatedByMunicipalAdminId?: string | null
    crossDeptIssueSuperMunicipalId?: string | null
    escalatedToStateAdminId?: string | null
    escalatedToSuperStateAdminId?: string | null
    managedBySuperAdminId?: string | null
  }

  export type ComplaintCreateManyModeratedByMunicipalAdminInput = {
    id?: string
    submissionDate?: Date | string
    seq?: number
    complainantId: string
    categoryId: string
    subCategory: string
    standardizedSubCategory?: string | null
    description: string
    urgency?: $Enums.ComplaintUrgency
    attachmentUrl?: string | null
    assignedDepartment: string
    status?: $Enums.ComplaintStatus
    sla?: string | null
    upvoteCount?: number
    isPublic?: boolean
    escalationLevel?: string | null
    dateOfResolution?: Date | string | null
    assignedAgentId?: string | null
    managedByMunicipalAdminId?: string | null
    crossDeptIssueSuperMunicipalId?: string | null
    escalatedToStateAdminId?: string | null
    escalatedToSuperStateAdminId?: string | null
    managedBySuperAdminId?: string | null
  }

  export type NewsUpdateCreateManyCreatedByInput = {
    id?: string
    title: string
    content: string
    date?: Date | string
  }

  export type AgentUpdateWithoutManagedByMunicipalInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    officialEmail?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    municipality?: StringFieldUpdateOperationsInput | string
    autonomyLevel?: StringFieldUpdateOperationsInput | string
    accessLevel?: StringFieldUpdateOperationsInput | string
    workloadLimit?: IntFieldUpdateOperationsInput | number
    currentWorkload?: IntFieldUpdateOperationsInput | number
    availabilityStatus?: StringFieldUpdateOperationsInput | string
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolutionRate?: FloatFieldUpdateOperationsInput | number
    avgResolutionTime?: NullableStringFieldUpdateOperationsInput | string | null
    collaborationMetric?: IntFieldUpdateOperationsInput | number
    assignedComplaints?: ComplaintUpdateManyWithoutAssignedAgentNestedInput
    coAssignedComplaints?: ComplaintUpdateManyWithoutCoAssignedAgentsNestedInput
  }

  export type AgentUncheckedUpdateWithoutManagedByMunicipalInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    officialEmail?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    municipality?: StringFieldUpdateOperationsInput | string
    autonomyLevel?: StringFieldUpdateOperationsInput | string
    accessLevel?: StringFieldUpdateOperationsInput | string
    workloadLimit?: IntFieldUpdateOperationsInput | number
    currentWorkload?: IntFieldUpdateOperationsInput | number
    availabilityStatus?: StringFieldUpdateOperationsInput | string
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolutionRate?: FloatFieldUpdateOperationsInput | number
    avgResolutionTime?: NullableStringFieldUpdateOperationsInput | string | null
    collaborationMetric?: IntFieldUpdateOperationsInput | number
    assignedComplaints?: ComplaintUncheckedUpdateManyWithoutAssignedAgentNestedInput
    coAssignedComplaints?: ComplaintUncheckedUpdateManyWithoutCoAssignedAgentsNestedInput
  }

  export type AgentUncheckedUpdateManyWithoutManagedByMunicipalInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    officialEmail?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    municipality?: StringFieldUpdateOperationsInput | string
    autonomyLevel?: StringFieldUpdateOperationsInput | string
    accessLevel?: StringFieldUpdateOperationsInput | string
    workloadLimit?: IntFieldUpdateOperationsInput | number
    currentWorkload?: IntFieldUpdateOperationsInput | number
    availabilityStatus?: StringFieldUpdateOperationsInput | string
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolutionRate?: FloatFieldUpdateOperationsInput | number
    avgResolutionTime?: NullableStringFieldUpdateOperationsInput | string | null
    collaborationMetric?: IntFieldUpdateOperationsInput | number
  }

  export type ComplaintUpdateWithoutManagedByMunicipalAdminInput = {
    id?: StringFieldUpdateOperationsInput | string
    submissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    subCategory?: StringFieldUpdateOperationsInput | string
    standardizedSubCategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    urgency?: EnumComplaintUrgencyFieldUpdateOperationsInput | $Enums.ComplaintUrgency
    attachmentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    assignedDepartment?: StringFieldUpdateOperationsInput | string
    status?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    sla?: NullableStringFieldUpdateOperationsInput | string | null
    upvoteCount?: IntFieldUpdateOperationsInput | number
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    escalationLevel?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    complainant?: UserUpdateOneRequiredWithoutComplaintsNestedInput
    category?: CategoryUpdateOneRequiredWithoutComplaintsNestedInput
    location?: ComplaintLocationUpdateOneWithoutComplaintNestedInput
    assignedAgent?: AgentUpdateOneWithoutAssignedComplaintsNestedInput
    coAssignedAgents?: AgentUpdateManyWithoutCoAssignedComplaintsNestedInput
    moderatedByMunicipalAdmin?: DepartmentMunicipalAdminUpdateOneWithoutCommunityModerationNestedInput
    crossDeptIssueSuperMunicipal?: SuperMunicipalAdminUpdateOneWithoutCrossDepartmentIssuesNestedInput
    escalatedToStateAdmin?: DepartmentStateAdminUpdateOneWithoutEscalatedComplaintsNestedInput
    escalatedToSuperStateAdmin?: SuperStateAdminUpdateOneWithoutEscalatedComplaintsNestedInput
    managedBySuperAdmin?: SuperAdminUpdateOneWithoutManagedComplaintsNestedInput
    upvotes?: UpvoteUpdateManyWithoutComplaintNestedInput
    auditLogs?: AuditLogUpdateManyWithoutComplaintNestedInput
  }

  export type ComplaintUncheckedUpdateWithoutManagedByMunicipalAdminInput = {
    id?: StringFieldUpdateOperationsInput | string
    submissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    seq?: IntFieldUpdateOperationsInput | number
    complainantId?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    subCategory?: StringFieldUpdateOperationsInput | string
    standardizedSubCategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    urgency?: EnumComplaintUrgencyFieldUpdateOperationsInput | $Enums.ComplaintUrgency
    attachmentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    assignedDepartment?: StringFieldUpdateOperationsInput | string
    status?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    sla?: NullableStringFieldUpdateOperationsInput | string | null
    upvoteCount?: IntFieldUpdateOperationsInput | number
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    escalationLevel?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignedAgentId?: NullableStringFieldUpdateOperationsInput | string | null
    moderatedByMunicipalAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    crossDeptIssueSuperMunicipalId?: NullableStringFieldUpdateOperationsInput | string | null
    escalatedToStateAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    escalatedToSuperStateAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    managedBySuperAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    location?: ComplaintLocationUncheckedUpdateOneWithoutComplaintNestedInput
    coAssignedAgents?: AgentUncheckedUpdateManyWithoutCoAssignedComplaintsNestedInput
    upvotes?: UpvoteUncheckedUpdateManyWithoutComplaintNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutComplaintNestedInput
  }

  export type ComplaintUncheckedUpdateManyWithoutManagedByMunicipalAdminInput = {
    id?: StringFieldUpdateOperationsInput | string
    submissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    seq?: IntFieldUpdateOperationsInput | number
    complainantId?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    subCategory?: StringFieldUpdateOperationsInput | string
    standardizedSubCategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    urgency?: EnumComplaintUrgencyFieldUpdateOperationsInput | $Enums.ComplaintUrgency
    attachmentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    assignedDepartment?: StringFieldUpdateOperationsInput | string
    status?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    sla?: NullableStringFieldUpdateOperationsInput | string | null
    upvoteCount?: IntFieldUpdateOperationsInput | number
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    escalationLevel?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignedAgentId?: NullableStringFieldUpdateOperationsInput | string | null
    moderatedByMunicipalAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    crossDeptIssueSuperMunicipalId?: NullableStringFieldUpdateOperationsInput | string | null
    escalatedToStateAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    escalatedToSuperStateAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    managedBySuperAdminId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ComplaintUpdateWithoutModeratedByMunicipalAdminInput = {
    id?: StringFieldUpdateOperationsInput | string
    submissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    subCategory?: StringFieldUpdateOperationsInput | string
    standardizedSubCategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    urgency?: EnumComplaintUrgencyFieldUpdateOperationsInput | $Enums.ComplaintUrgency
    attachmentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    assignedDepartment?: StringFieldUpdateOperationsInput | string
    status?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    sla?: NullableStringFieldUpdateOperationsInput | string | null
    upvoteCount?: IntFieldUpdateOperationsInput | number
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    escalationLevel?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    complainant?: UserUpdateOneRequiredWithoutComplaintsNestedInput
    category?: CategoryUpdateOneRequiredWithoutComplaintsNestedInput
    location?: ComplaintLocationUpdateOneWithoutComplaintNestedInput
    assignedAgent?: AgentUpdateOneWithoutAssignedComplaintsNestedInput
    coAssignedAgents?: AgentUpdateManyWithoutCoAssignedComplaintsNestedInput
    managedByMunicipalAdmin?: DepartmentMunicipalAdminUpdateOneWithoutManagedComplaintsNestedInput
    crossDeptIssueSuperMunicipal?: SuperMunicipalAdminUpdateOneWithoutCrossDepartmentIssuesNestedInput
    escalatedToStateAdmin?: DepartmentStateAdminUpdateOneWithoutEscalatedComplaintsNestedInput
    escalatedToSuperStateAdmin?: SuperStateAdminUpdateOneWithoutEscalatedComplaintsNestedInput
    managedBySuperAdmin?: SuperAdminUpdateOneWithoutManagedComplaintsNestedInput
    upvotes?: UpvoteUpdateManyWithoutComplaintNestedInput
    auditLogs?: AuditLogUpdateManyWithoutComplaintNestedInput
  }

  export type ComplaintUncheckedUpdateWithoutModeratedByMunicipalAdminInput = {
    id?: StringFieldUpdateOperationsInput | string
    submissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    seq?: IntFieldUpdateOperationsInput | number
    complainantId?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    subCategory?: StringFieldUpdateOperationsInput | string
    standardizedSubCategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    urgency?: EnumComplaintUrgencyFieldUpdateOperationsInput | $Enums.ComplaintUrgency
    attachmentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    assignedDepartment?: StringFieldUpdateOperationsInput | string
    status?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    sla?: NullableStringFieldUpdateOperationsInput | string | null
    upvoteCount?: IntFieldUpdateOperationsInput | number
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    escalationLevel?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignedAgentId?: NullableStringFieldUpdateOperationsInput | string | null
    managedByMunicipalAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    crossDeptIssueSuperMunicipalId?: NullableStringFieldUpdateOperationsInput | string | null
    escalatedToStateAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    escalatedToSuperStateAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    managedBySuperAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    location?: ComplaintLocationUncheckedUpdateOneWithoutComplaintNestedInput
    coAssignedAgents?: AgentUncheckedUpdateManyWithoutCoAssignedComplaintsNestedInput
    upvotes?: UpvoteUncheckedUpdateManyWithoutComplaintNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutComplaintNestedInput
  }

  export type ComplaintUncheckedUpdateManyWithoutModeratedByMunicipalAdminInput = {
    id?: StringFieldUpdateOperationsInput | string
    submissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    seq?: IntFieldUpdateOperationsInput | number
    complainantId?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    subCategory?: StringFieldUpdateOperationsInput | string
    standardizedSubCategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    urgency?: EnumComplaintUrgencyFieldUpdateOperationsInput | $Enums.ComplaintUrgency
    attachmentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    assignedDepartment?: StringFieldUpdateOperationsInput | string
    status?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    sla?: NullableStringFieldUpdateOperationsInput | string | null
    upvoteCount?: IntFieldUpdateOperationsInput | number
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    escalationLevel?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignedAgentId?: NullableStringFieldUpdateOperationsInput | string | null
    managedByMunicipalAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    crossDeptIssueSuperMunicipalId?: NullableStringFieldUpdateOperationsInput | string | null
    escalatedToStateAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    escalatedToSuperStateAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    managedBySuperAdminId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NewsUpdateUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NewsUpdateUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NewsUpdateUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DepartmentMunicipalAdminCreateManyManagedBySuperMunicipalInput = {
    id?: string
    fullName: string
    adminId: string
    officialEmail: string
    phoneNumber: string
    password: string
    department: string
    municipality: string
    accessLevel: string
    dateOfCreation?: Date | string
    lastUpdated?: Date | string
    status?: string
    lastLogin?: Date | string | null
    resolutionRate?: number
    slaComplianceRate?: number | null
    escalationCount?: number
    managedByStateAdminId?: string | null
  }

  export type ComplaintCreateManyCrossDeptIssueSuperMunicipalInput = {
    id?: string
    submissionDate?: Date | string
    seq?: number
    complainantId: string
    categoryId: string
    subCategory: string
    standardizedSubCategory?: string | null
    description: string
    urgency?: $Enums.ComplaintUrgency
    attachmentUrl?: string | null
    assignedDepartment: string
    status?: $Enums.ComplaintStatus
    sla?: string | null
    upvoteCount?: number
    isPublic?: boolean
    escalationLevel?: string | null
    dateOfResolution?: Date | string | null
    assignedAgentId?: string | null
    managedByMunicipalAdminId?: string | null
    moderatedByMunicipalAdminId?: string | null
    escalatedToStateAdminId?: string | null
    escalatedToSuperStateAdminId?: string | null
    managedBySuperAdminId?: string | null
  }

  export type DepartmentMunicipalAdminUpdateWithoutManagedBySuperMunicipalInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    officialEmail?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    municipality?: StringFieldUpdateOperationsInput | string
    accessLevel?: StringFieldUpdateOperationsInput | string
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolutionRate?: FloatFieldUpdateOperationsInput | number
    slaComplianceRate?: NullableFloatFieldUpdateOperationsInput | number | null
    escalationCount?: IntFieldUpdateOperationsInput | number
    managedAgents?: AgentUpdateManyWithoutManagedByMunicipalNestedInput
    managedComplaints?: ComplaintUpdateManyWithoutManagedByMunicipalAdminNestedInput
    communityModeration?: ComplaintUpdateManyWithoutModeratedByMunicipalAdminNestedInput
    newsUpdates?: NewsUpdateUpdateManyWithoutCreatedByNestedInput
    managedByStateAdmin?: DepartmentStateAdminUpdateOneWithoutManagedMunicipalAdminsNestedInput
  }

  export type DepartmentMunicipalAdminUncheckedUpdateWithoutManagedBySuperMunicipalInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    officialEmail?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    municipality?: StringFieldUpdateOperationsInput | string
    accessLevel?: StringFieldUpdateOperationsInput | string
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolutionRate?: FloatFieldUpdateOperationsInput | number
    slaComplianceRate?: NullableFloatFieldUpdateOperationsInput | number | null
    escalationCount?: IntFieldUpdateOperationsInput | number
    managedByStateAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    managedAgents?: AgentUncheckedUpdateManyWithoutManagedByMunicipalNestedInput
    managedComplaints?: ComplaintUncheckedUpdateManyWithoutManagedByMunicipalAdminNestedInput
    communityModeration?: ComplaintUncheckedUpdateManyWithoutModeratedByMunicipalAdminNestedInput
    newsUpdates?: NewsUpdateUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type DepartmentMunicipalAdminUncheckedUpdateManyWithoutManagedBySuperMunicipalInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    officialEmail?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    municipality?: StringFieldUpdateOperationsInput | string
    accessLevel?: StringFieldUpdateOperationsInput | string
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolutionRate?: FloatFieldUpdateOperationsInput | number
    slaComplianceRate?: NullableFloatFieldUpdateOperationsInput | number | null
    escalationCount?: IntFieldUpdateOperationsInput | number
    managedByStateAdminId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ComplaintUpdateWithoutCrossDeptIssueSuperMunicipalInput = {
    id?: StringFieldUpdateOperationsInput | string
    submissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    subCategory?: StringFieldUpdateOperationsInput | string
    standardizedSubCategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    urgency?: EnumComplaintUrgencyFieldUpdateOperationsInput | $Enums.ComplaintUrgency
    attachmentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    assignedDepartment?: StringFieldUpdateOperationsInput | string
    status?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    sla?: NullableStringFieldUpdateOperationsInput | string | null
    upvoteCount?: IntFieldUpdateOperationsInput | number
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    escalationLevel?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    complainant?: UserUpdateOneRequiredWithoutComplaintsNestedInput
    category?: CategoryUpdateOneRequiredWithoutComplaintsNestedInput
    location?: ComplaintLocationUpdateOneWithoutComplaintNestedInput
    assignedAgent?: AgentUpdateOneWithoutAssignedComplaintsNestedInput
    coAssignedAgents?: AgentUpdateManyWithoutCoAssignedComplaintsNestedInput
    managedByMunicipalAdmin?: DepartmentMunicipalAdminUpdateOneWithoutManagedComplaintsNestedInput
    moderatedByMunicipalAdmin?: DepartmentMunicipalAdminUpdateOneWithoutCommunityModerationNestedInput
    escalatedToStateAdmin?: DepartmentStateAdminUpdateOneWithoutEscalatedComplaintsNestedInput
    escalatedToSuperStateAdmin?: SuperStateAdminUpdateOneWithoutEscalatedComplaintsNestedInput
    managedBySuperAdmin?: SuperAdminUpdateOneWithoutManagedComplaintsNestedInput
    upvotes?: UpvoteUpdateManyWithoutComplaintNestedInput
    auditLogs?: AuditLogUpdateManyWithoutComplaintNestedInput
  }

  export type ComplaintUncheckedUpdateWithoutCrossDeptIssueSuperMunicipalInput = {
    id?: StringFieldUpdateOperationsInput | string
    submissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    seq?: IntFieldUpdateOperationsInput | number
    complainantId?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    subCategory?: StringFieldUpdateOperationsInput | string
    standardizedSubCategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    urgency?: EnumComplaintUrgencyFieldUpdateOperationsInput | $Enums.ComplaintUrgency
    attachmentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    assignedDepartment?: StringFieldUpdateOperationsInput | string
    status?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    sla?: NullableStringFieldUpdateOperationsInput | string | null
    upvoteCount?: IntFieldUpdateOperationsInput | number
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    escalationLevel?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignedAgentId?: NullableStringFieldUpdateOperationsInput | string | null
    managedByMunicipalAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    moderatedByMunicipalAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    escalatedToStateAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    escalatedToSuperStateAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    managedBySuperAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    location?: ComplaintLocationUncheckedUpdateOneWithoutComplaintNestedInput
    coAssignedAgents?: AgentUncheckedUpdateManyWithoutCoAssignedComplaintsNestedInput
    upvotes?: UpvoteUncheckedUpdateManyWithoutComplaintNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutComplaintNestedInput
  }

  export type ComplaintUncheckedUpdateManyWithoutCrossDeptIssueSuperMunicipalInput = {
    id?: StringFieldUpdateOperationsInput | string
    submissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    seq?: IntFieldUpdateOperationsInput | number
    complainantId?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    subCategory?: StringFieldUpdateOperationsInput | string
    standardizedSubCategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    urgency?: EnumComplaintUrgencyFieldUpdateOperationsInput | $Enums.ComplaintUrgency
    attachmentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    assignedDepartment?: StringFieldUpdateOperationsInput | string
    status?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    sla?: NullableStringFieldUpdateOperationsInput | string | null
    upvoteCount?: IntFieldUpdateOperationsInput | number
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    escalationLevel?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignedAgentId?: NullableStringFieldUpdateOperationsInput | string | null
    managedByMunicipalAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    moderatedByMunicipalAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    escalatedToStateAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    escalatedToSuperStateAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    managedBySuperAdminId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DepartmentMunicipalAdminCreateManyManagedByStateAdminInput = {
    id?: string
    fullName: string
    adminId: string
    officialEmail: string
    phoneNumber: string
    password: string
    department: string
    municipality: string
    accessLevel: string
    dateOfCreation?: Date | string
    lastUpdated?: Date | string
    status?: string
    lastLogin?: Date | string | null
    resolutionRate?: number
    slaComplianceRate?: number | null
    escalationCount?: number
    managedBySuperMunicipalId?: string | null
  }

  export type ComplaintCreateManyEscalatedToStateAdminInput = {
    id?: string
    submissionDate?: Date | string
    seq?: number
    complainantId: string
    categoryId: string
    subCategory: string
    standardizedSubCategory?: string | null
    description: string
    urgency?: $Enums.ComplaintUrgency
    attachmentUrl?: string | null
    assignedDepartment: string
    status?: $Enums.ComplaintStatus
    sla?: string | null
    upvoteCount?: number
    isPublic?: boolean
    escalationLevel?: string | null
    dateOfResolution?: Date | string | null
    assignedAgentId?: string | null
    managedByMunicipalAdminId?: string | null
    moderatedByMunicipalAdminId?: string | null
    crossDeptIssueSuperMunicipalId?: string | null
    escalatedToSuperStateAdminId?: string | null
    managedBySuperAdminId?: string | null
  }

  export type RegionalWorkflowCreateManyCreatedByInput = {
    id?: string
    state: string
    municipality?: string | null
    category: string
    sla: string
  }

  export type CategoryCreateManyManagedByDeptStateAdminInput = {
    id?: string
    name: string
    subCategories?: CategoryCreatesubCategoriesInput | string[]
    learnedSubCategories?: CategoryCreatelearnedSubCategoriesInput | string[]
    assignedDepartment: string
    creationDate?: Date | string
    lastUpdated?: Date | string
    createdBySuperAdminId?: string | null
  }

  export type DepartmentMunicipalAdminUpdateWithoutManagedByStateAdminInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    officialEmail?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    municipality?: StringFieldUpdateOperationsInput | string
    accessLevel?: StringFieldUpdateOperationsInput | string
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolutionRate?: FloatFieldUpdateOperationsInput | number
    slaComplianceRate?: NullableFloatFieldUpdateOperationsInput | number | null
    escalationCount?: IntFieldUpdateOperationsInput | number
    managedAgents?: AgentUpdateManyWithoutManagedByMunicipalNestedInput
    managedComplaints?: ComplaintUpdateManyWithoutManagedByMunicipalAdminNestedInput
    communityModeration?: ComplaintUpdateManyWithoutModeratedByMunicipalAdminNestedInput
    newsUpdates?: NewsUpdateUpdateManyWithoutCreatedByNestedInput
    managedBySuperMunicipal?: SuperMunicipalAdminUpdateOneWithoutManagedDepartmentAdminsNestedInput
  }

  export type DepartmentMunicipalAdminUncheckedUpdateWithoutManagedByStateAdminInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    officialEmail?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    municipality?: StringFieldUpdateOperationsInput | string
    accessLevel?: StringFieldUpdateOperationsInput | string
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolutionRate?: FloatFieldUpdateOperationsInput | number
    slaComplianceRate?: NullableFloatFieldUpdateOperationsInput | number | null
    escalationCount?: IntFieldUpdateOperationsInput | number
    managedBySuperMunicipalId?: NullableStringFieldUpdateOperationsInput | string | null
    managedAgents?: AgentUncheckedUpdateManyWithoutManagedByMunicipalNestedInput
    managedComplaints?: ComplaintUncheckedUpdateManyWithoutManagedByMunicipalAdminNestedInput
    communityModeration?: ComplaintUncheckedUpdateManyWithoutModeratedByMunicipalAdminNestedInput
    newsUpdates?: NewsUpdateUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type DepartmentMunicipalAdminUncheckedUpdateManyWithoutManagedByStateAdminInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    officialEmail?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    municipality?: StringFieldUpdateOperationsInput | string
    accessLevel?: StringFieldUpdateOperationsInput | string
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolutionRate?: FloatFieldUpdateOperationsInput | number
    slaComplianceRate?: NullableFloatFieldUpdateOperationsInput | number | null
    escalationCount?: IntFieldUpdateOperationsInput | number
    managedBySuperMunicipalId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ComplaintUpdateWithoutEscalatedToStateAdminInput = {
    id?: StringFieldUpdateOperationsInput | string
    submissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    subCategory?: StringFieldUpdateOperationsInput | string
    standardizedSubCategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    urgency?: EnumComplaintUrgencyFieldUpdateOperationsInput | $Enums.ComplaintUrgency
    attachmentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    assignedDepartment?: StringFieldUpdateOperationsInput | string
    status?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    sla?: NullableStringFieldUpdateOperationsInput | string | null
    upvoteCount?: IntFieldUpdateOperationsInput | number
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    escalationLevel?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    complainant?: UserUpdateOneRequiredWithoutComplaintsNestedInput
    category?: CategoryUpdateOneRequiredWithoutComplaintsNestedInput
    location?: ComplaintLocationUpdateOneWithoutComplaintNestedInput
    assignedAgent?: AgentUpdateOneWithoutAssignedComplaintsNestedInput
    coAssignedAgents?: AgentUpdateManyWithoutCoAssignedComplaintsNestedInput
    managedByMunicipalAdmin?: DepartmentMunicipalAdminUpdateOneWithoutManagedComplaintsNestedInput
    moderatedByMunicipalAdmin?: DepartmentMunicipalAdminUpdateOneWithoutCommunityModerationNestedInput
    crossDeptIssueSuperMunicipal?: SuperMunicipalAdminUpdateOneWithoutCrossDepartmentIssuesNestedInput
    escalatedToSuperStateAdmin?: SuperStateAdminUpdateOneWithoutEscalatedComplaintsNestedInput
    managedBySuperAdmin?: SuperAdminUpdateOneWithoutManagedComplaintsNestedInput
    upvotes?: UpvoteUpdateManyWithoutComplaintNestedInput
    auditLogs?: AuditLogUpdateManyWithoutComplaintNestedInput
  }

  export type ComplaintUncheckedUpdateWithoutEscalatedToStateAdminInput = {
    id?: StringFieldUpdateOperationsInput | string
    submissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    seq?: IntFieldUpdateOperationsInput | number
    complainantId?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    subCategory?: StringFieldUpdateOperationsInput | string
    standardizedSubCategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    urgency?: EnumComplaintUrgencyFieldUpdateOperationsInput | $Enums.ComplaintUrgency
    attachmentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    assignedDepartment?: StringFieldUpdateOperationsInput | string
    status?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    sla?: NullableStringFieldUpdateOperationsInput | string | null
    upvoteCount?: IntFieldUpdateOperationsInput | number
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    escalationLevel?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignedAgentId?: NullableStringFieldUpdateOperationsInput | string | null
    managedByMunicipalAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    moderatedByMunicipalAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    crossDeptIssueSuperMunicipalId?: NullableStringFieldUpdateOperationsInput | string | null
    escalatedToSuperStateAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    managedBySuperAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    location?: ComplaintLocationUncheckedUpdateOneWithoutComplaintNestedInput
    coAssignedAgents?: AgentUncheckedUpdateManyWithoutCoAssignedComplaintsNestedInput
    upvotes?: UpvoteUncheckedUpdateManyWithoutComplaintNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutComplaintNestedInput
  }

  export type ComplaintUncheckedUpdateManyWithoutEscalatedToStateAdminInput = {
    id?: StringFieldUpdateOperationsInput | string
    submissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    seq?: IntFieldUpdateOperationsInput | number
    complainantId?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    subCategory?: StringFieldUpdateOperationsInput | string
    standardizedSubCategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    urgency?: EnumComplaintUrgencyFieldUpdateOperationsInput | $Enums.ComplaintUrgency
    attachmentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    assignedDepartment?: StringFieldUpdateOperationsInput | string
    status?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    sla?: NullableStringFieldUpdateOperationsInput | string | null
    upvoteCount?: IntFieldUpdateOperationsInput | number
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    escalationLevel?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignedAgentId?: NullableStringFieldUpdateOperationsInput | string | null
    managedByMunicipalAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    moderatedByMunicipalAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    crossDeptIssueSuperMunicipalId?: NullableStringFieldUpdateOperationsInput | string | null
    escalatedToSuperStateAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    managedBySuperAdminId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RegionalWorkflowUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    municipality?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    sla?: StringFieldUpdateOperationsInput | string
  }

  export type RegionalWorkflowUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    municipality?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    sla?: StringFieldUpdateOperationsInput | string
  }

  export type RegionalWorkflowUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    municipality?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    sla?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryUpdateWithoutManagedByDeptStateAdminInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subCategories?: CategoryUpdatesubCategoriesInput | string[]
    learnedSubCategories?: CategoryUpdatelearnedSubCategoriesInput | string[]
    assignedDepartment?: StringFieldUpdateOperationsInput | string
    creationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    complaints?: ComplaintUpdateManyWithoutCategoryNestedInput
    createdBySuperAdmin?: SuperAdminUpdateOneWithoutManagedCategoriesNestedInput
  }

  export type CategoryUncheckedUpdateWithoutManagedByDeptStateAdminInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subCategories?: CategoryUpdatesubCategoriesInput | string[]
    learnedSubCategories?: CategoryUpdatelearnedSubCategoriesInput | string[]
    assignedDepartment?: StringFieldUpdateOperationsInput | string
    creationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBySuperAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    complaints?: ComplaintUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateManyWithoutManagedByDeptStateAdminInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subCategories?: CategoryUpdatesubCategoriesInput | string[]
    learnedSubCategories?: CategoryUpdatelearnedSubCategoriesInput | string[]
    assignedDepartment?: StringFieldUpdateOperationsInput | string
    creationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBySuperAdminId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DepartmentStateAdminCreateManyManagedBySuperStateInput = {
    id?: string
    fullName: string
    adminId: string
    officialEmail: string
    password: string
    phoneNumber?: string | null
    department: string
    state: string
    accessLevel: string
    dateOfCreation?: Date | string
    lastUpdated?: Date | string
    status?: string
    lastLogin?: Date | string | null
    stateResolutionRate?: number
    systemicIssuesIdentified?: number
    managedMunicipalities?: DepartmentStateAdminCreatemanagedMunicipalitiesInput | string[]
  }

  export type SuperMunicipalAdminCreateManyManagedBySuperStateInput = {
    id?: string
    fullName: string
    adminId: string
    officialEmail: string
    password: string
    phoneNumber?: string | null
    municipality: string
    accessLevel: string
    dateOfCreation?: Date | string
    lastUpdated?: Date | string
    status?: string
    lastLogin?: Date | string | null
    municipalityResolutionRate?: number
    crossDepartmentSuccess?: number
  }

  export type ComplaintCreateManyEscalatedToSuperStateAdminInput = {
    id?: string
    submissionDate?: Date | string
    seq?: number
    complainantId: string
    categoryId: string
    subCategory: string
    standardizedSubCategory?: string | null
    description: string
    urgency?: $Enums.ComplaintUrgency
    attachmentUrl?: string | null
    assignedDepartment: string
    status?: $Enums.ComplaintStatus
    sla?: string | null
    upvoteCount?: number
    isPublic?: boolean
    escalationLevel?: string | null
    dateOfResolution?: Date | string | null
    assignedAgentId?: string | null
    managedByMunicipalAdminId?: string | null
    moderatedByMunicipalAdminId?: string | null
    crossDeptIssueSuperMunicipalId?: string | null
    escalatedToStateAdminId?: string | null
    managedBySuperAdminId?: string | null
  }

  export type DepartmentStateAdminUpdateWithoutManagedBySuperStateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    officialEmail?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    department?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    accessLevel?: StringFieldUpdateOperationsInput | string
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stateResolutionRate?: FloatFieldUpdateOperationsInput | number
    systemicIssuesIdentified?: IntFieldUpdateOperationsInput | number
    managedMunicipalities?: DepartmentStateAdminUpdatemanagedMunicipalitiesInput | string[]
    managedMunicipalAdmins?: DepartmentMunicipalAdminUpdateManyWithoutManagedByStateAdminNestedInput
    escalatedComplaints?: ComplaintUpdateManyWithoutEscalatedToStateAdminNestedInput
    regionalWorkflows?: RegionalWorkflowUpdateManyWithoutCreatedByNestedInput
    managedCategories?: CategoryUpdateManyWithoutManagedByDeptStateAdminNestedInput
  }

  export type DepartmentStateAdminUncheckedUpdateWithoutManagedBySuperStateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    officialEmail?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    department?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    accessLevel?: StringFieldUpdateOperationsInput | string
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stateResolutionRate?: FloatFieldUpdateOperationsInput | number
    systemicIssuesIdentified?: IntFieldUpdateOperationsInput | number
    managedMunicipalities?: DepartmentStateAdminUpdatemanagedMunicipalitiesInput | string[]
    managedMunicipalAdmins?: DepartmentMunicipalAdminUncheckedUpdateManyWithoutManagedByStateAdminNestedInput
    escalatedComplaints?: ComplaintUncheckedUpdateManyWithoutEscalatedToStateAdminNestedInput
    regionalWorkflows?: RegionalWorkflowUncheckedUpdateManyWithoutCreatedByNestedInput
    managedCategories?: CategoryUncheckedUpdateManyWithoutManagedByDeptStateAdminNestedInput
  }

  export type DepartmentStateAdminUncheckedUpdateManyWithoutManagedBySuperStateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    officialEmail?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    department?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    accessLevel?: StringFieldUpdateOperationsInput | string
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stateResolutionRate?: FloatFieldUpdateOperationsInput | number
    systemicIssuesIdentified?: IntFieldUpdateOperationsInput | number
    managedMunicipalities?: DepartmentStateAdminUpdatemanagedMunicipalitiesInput | string[]
  }

  export type SuperMunicipalAdminUpdateWithoutManagedBySuperStateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    officialEmail?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    municipality?: StringFieldUpdateOperationsInput | string
    accessLevel?: StringFieldUpdateOperationsInput | string
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    municipalityResolutionRate?: FloatFieldUpdateOperationsInput | number
    crossDepartmentSuccess?: IntFieldUpdateOperationsInput | number
    managedDepartmentAdmins?: DepartmentMunicipalAdminUpdateManyWithoutManagedBySuperMunicipalNestedInput
    crossDepartmentIssues?: ComplaintUpdateManyWithoutCrossDeptIssueSuperMunicipalNestedInput
  }

  export type SuperMunicipalAdminUncheckedUpdateWithoutManagedBySuperStateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    officialEmail?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    municipality?: StringFieldUpdateOperationsInput | string
    accessLevel?: StringFieldUpdateOperationsInput | string
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    municipalityResolutionRate?: FloatFieldUpdateOperationsInput | number
    crossDepartmentSuccess?: IntFieldUpdateOperationsInput | number
    managedDepartmentAdmins?: DepartmentMunicipalAdminUncheckedUpdateManyWithoutManagedBySuperMunicipalNestedInput
    crossDepartmentIssues?: ComplaintUncheckedUpdateManyWithoutCrossDeptIssueSuperMunicipalNestedInput
  }

  export type SuperMunicipalAdminUncheckedUpdateManyWithoutManagedBySuperStateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    officialEmail?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    municipality?: StringFieldUpdateOperationsInput | string
    accessLevel?: StringFieldUpdateOperationsInput | string
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    municipalityResolutionRate?: FloatFieldUpdateOperationsInput | number
    crossDepartmentSuccess?: IntFieldUpdateOperationsInput | number
  }

  export type ComplaintUpdateWithoutEscalatedToSuperStateAdminInput = {
    id?: StringFieldUpdateOperationsInput | string
    submissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    subCategory?: StringFieldUpdateOperationsInput | string
    standardizedSubCategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    urgency?: EnumComplaintUrgencyFieldUpdateOperationsInput | $Enums.ComplaintUrgency
    attachmentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    assignedDepartment?: StringFieldUpdateOperationsInput | string
    status?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    sla?: NullableStringFieldUpdateOperationsInput | string | null
    upvoteCount?: IntFieldUpdateOperationsInput | number
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    escalationLevel?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    complainant?: UserUpdateOneRequiredWithoutComplaintsNestedInput
    category?: CategoryUpdateOneRequiredWithoutComplaintsNestedInput
    location?: ComplaintLocationUpdateOneWithoutComplaintNestedInput
    assignedAgent?: AgentUpdateOneWithoutAssignedComplaintsNestedInput
    coAssignedAgents?: AgentUpdateManyWithoutCoAssignedComplaintsNestedInput
    managedByMunicipalAdmin?: DepartmentMunicipalAdminUpdateOneWithoutManagedComplaintsNestedInput
    moderatedByMunicipalAdmin?: DepartmentMunicipalAdminUpdateOneWithoutCommunityModerationNestedInput
    crossDeptIssueSuperMunicipal?: SuperMunicipalAdminUpdateOneWithoutCrossDepartmentIssuesNestedInput
    escalatedToStateAdmin?: DepartmentStateAdminUpdateOneWithoutEscalatedComplaintsNestedInput
    managedBySuperAdmin?: SuperAdminUpdateOneWithoutManagedComplaintsNestedInput
    upvotes?: UpvoteUpdateManyWithoutComplaintNestedInput
    auditLogs?: AuditLogUpdateManyWithoutComplaintNestedInput
  }

  export type ComplaintUncheckedUpdateWithoutEscalatedToSuperStateAdminInput = {
    id?: StringFieldUpdateOperationsInput | string
    submissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    seq?: IntFieldUpdateOperationsInput | number
    complainantId?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    subCategory?: StringFieldUpdateOperationsInput | string
    standardizedSubCategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    urgency?: EnumComplaintUrgencyFieldUpdateOperationsInput | $Enums.ComplaintUrgency
    attachmentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    assignedDepartment?: StringFieldUpdateOperationsInput | string
    status?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    sla?: NullableStringFieldUpdateOperationsInput | string | null
    upvoteCount?: IntFieldUpdateOperationsInput | number
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    escalationLevel?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignedAgentId?: NullableStringFieldUpdateOperationsInput | string | null
    managedByMunicipalAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    moderatedByMunicipalAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    crossDeptIssueSuperMunicipalId?: NullableStringFieldUpdateOperationsInput | string | null
    escalatedToStateAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    managedBySuperAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    location?: ComplaintLocationUncheckedUpdateOneWithoutComplaintNestedInput
    coAssignedAgents?: AgentUncheckedUpdateManyWithoutCoAssignedComplaintsNestedInput
    upvotes?: UpvoteUncheckedUpdateManyWithoutComplaintNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutComplaintNestedInput
  }

  export type ComplaintUncheckedUpdateManyWithoutEscalatedToSuperStateAdminInput = {
    id?: StringFieldUpdateOperationsInput | string
    submissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    seq?: IntFieldUpdateOperationsInput | number
    complainantId?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    subCategory?: StringFieldUpdateOperationsInput | string
    standardizedSubCategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    urgency?: EnumComplaintUrgencyFieldUpdateOperationsInput | $Enums.ComplaintUrgency
    attachmentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    assignedDepartment?: StringFieldUpdateOperationsInput | string
    status?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    sla?: NullableStringFieldUpdateOperationsInput | string | null
    upvoteCount?: IntFieldUpdateOperationsInput | number
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    escalationLevel?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignedAgentId?: NullableStringFieldUpdateOperationsInput | string | null
    managedByMunicipalAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    moderatedByMunicipalAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    crossDeptIssueSuperMunicipalId?: NullableStringFieldUpdateOperationsInput | string | null
    escalatedToStateAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    managedBySuperAdminId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CategoryCreateManyCreatedBySuperAdminInput = {
    id?: string
    name: string
    subCategories?: CategoryCreatesubCategoriesInput | string[]
    learnedSubCategories?: CategoryCreatelearnedSubCategoriesInput | string[]
    assignedDepartment: string
    creationDate?: Date | string
    lastUpdated?: Date | string
    managedByDeptStateAdminId?: string | null
  }

  export type SuperStateAdminCreateManyManagedBySuperAdminInput = {
    id?: string
    fullName: string
    adminId: string
    officialEmail: string
    phoneNumber?: string | null
    password: string
    state: string
    accessLevel: string
    dateOfCreation?: Date | string
    lastUpdated?: Date | string
    status?: string
    lastLogin?: Date | string | null
    stateResolutionRate?: number
    crossDepartmentSuccess?: number
  }

  export type ComplaintCreateManyManagedBySuperAdminInput = {
    id?: string
    submissionDate?: Date | string
    seq?: number
    complainantId: string
    categoryId: string
    subCategory: string
    standardizedSubCategory?: string | null
    description: string
    urgency?: $Enums.ComplaintUrgency
    attachmentUrl?: string | null
    assignedDepartment: string
    status?: $Enums.ComplaintStatus
    sla?: string | null
    upvoteCount?: number
    isPublic?: boolean
    escalationLevel?: string | null
    dateOfResolution?: Date | string | null
    assignedAgentId?: string | null
    managedByMunicipalAdminId?: string | null
    moderatedByMunicipalAdminId?: string | null
    crossDeptIssueSuperMunicipalId?: string | null
    escalatedToStateAdminId?: string | null
    escalatedToSuperStateAdminId?: string | null
  }

  export type CategoryUpdateWithoutCreatedBySuperAdminInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subCategories?: CategoryUpdatesubCategoriesInput | string[]
    learnedSubCategories?: CategoryUpdatelearnedSubCategoriesInput | string[]
    assignedDepartment?: StringFieldUpdateOperationsInput | string
    creationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    complaints?: ComplaintUpdateManyWithoutCategoryNestedInput
    managedByDeptStateAdmin?: DepartmentStateAdminUpdateOneWithoutManagedCategoriesNestedInput
  }

  export type CategoryUncheckedUpdateWithoutCreatedBySuperAdminInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subCategories?: CategoryUpdatesubCategoriesInput | string[]
    learnedSubCategories?: CategoryUpdatelearnedSubCategoriesInput | string[]
    assignedDepartment?: StringFieldUpdateOperationsInput | string
    creationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    managedByDeptStateAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    complaints?: ComplaintUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateManyWithoutCreatedBySuperAdminInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subCategories?: CategoryUpdatesubCategoriesInput | string[]
    learnedSubCategories?: CategoryUpdatelearnedSubCategoriesInput | string[]
    assignedDepartment?: StringFieldUpdateOperationsInput | string
    creationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    managedByDeptStateAdminId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SuperStateAdminUpdateWithoutManagedBySuperAdminInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    officialEmail?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    accessLevel?: StringFieldUpdateOperationsInput | string
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stateResolutionRate?: FloatFieldUpdateOperationsInput | number
    crossDepartmentSuccess?: IntFieldUpdateOperationsInput | number
    managedDepartmentAdmins?: DepartmentStateAdminUpdateManyWithoutManagedBySuperStateNestedInput
    managedSuperMunicipalAdmins?: SuperMunicipalAdminUpdateManyWithoutManagedBySuperStateNestedInput
    escalatedComplaints?: ComplaintUpdateManyWithoutEscalatedToSuperStateAdminNestedInput
  }

  export type SuperStateAdminUncheckedUpdateWithoutManagedBySuperAdminInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    officialEmail?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    accessLevel?: StringFieldUpdateOperationsInput | string
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stateResolutionRate?: FloatFieldUpdateOperationsInput | number
    crossDepartmentSuccess?: IntFieldUpdateOperationsInput | number
    managedDepartmentAdmins?: DepartmentStateAdminUncheckedUpdateManyWithoutManagedBySuperStateNestedInput
    managedSuperMunicipalAdmins?: SuperMunicipalAdminUncheckedUpdateManyWithoutManagedBySuperStateNestedInput
    escalatedComplaints?: ComplaintUncheckedUpdateManyWithoutEscalatedToSuperStateAdminNestedInput
  }

  export type SuperStateAdminUncheckedUpdateManyWithoutManagedBySuperAdminInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    officialEmail?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    accessLevel?: StringFieldUpdateOperationsInput | string
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stateResolutionRate?: FloatFieldUpdateOperationsInput | number
    crossDepartmentSuccess?: IntFieldUpdateOperationsInput | number
  }

  export type ComplaintUpdateWithoutManagedBySuperAdminInput = {
    id?: StringFieldUpdateOperationsInput | string
    submissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    subCategory?: StringFieldUpdateOperationsInput | string
    standardizedSubCategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    urgency?: EnumComplaintUrgencyFieldUpdateOperationsInput | $Enums.ComplaintUrgency
    attachmentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    assignedDepartment?: StringFieldUpdateOperationsInput | string
    status?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    sla?: NullableStringFieldUpdateOperationsInput | string | null
    upvoteCount?: IntFieldUpdateOperationsInput | number
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    escalationLevel?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    complainant?: UserUpdateOneRequiredWithoutComplaintsNestedInput
    category?: CategoryUpdateOneRequiredWithoutComplaintsNestedInput
    location?: ComplaintLocationUpdateOneWithoutComplaintNestedInput
    assignedAgent?: AgentUpdateOneWithoutAssignedComplaintsNestedInput
    coAssignedAgents?: AgentUpdateManyWithoutCoAssignedComplaintsNestedInput
    managedByMunicipalAdmin?: DepartmentMunicipalAdminUpdateOneWithoutManagedComplaintsNestedInput
    moderatedByMunicipalAdmin?: DepartmentMunicipalAdminUpdateOneWithoutCommunityModerationNestedInput
    crossDeptIssueSuperMunicipal?: SuperMunicipalAdminUpdateOneWithoutCrossDepartmentIssuesNestedInput
    escalatedToStateAdmin?: DepartmentStateAdminUpdateOneWithoutEscalatedComplaintsNestedInput
    escalatedToSuperStateAdmin?: SuperStateAdminUpdateOneWithoutEscalatedComplaintsNestedInput
    upvotes?: UpvoteUpdateManyWithoutComplaintNestedInput
    auditLogs?: AuditLogUpdateManyWithoutComplaintNestedInput
  }

  export type ComplaintUncheckedUpdateWithoutManagedBySuperAdminInput = {
    id?: StringFieldUpdateOperationsInput | string
    submissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    seq?: IntFieldUpdateOperationsInput | number
    complainantId?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    subCategory?: StringFieldUpdateOperationsInput | string
    standardizedSubCategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    urgency?: EnumComplaintUrgencyFieldUpdateOperationsInput | $Enums.ComplaintUrgency
    attachmentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    assignedDepartment?: StringFieldUpdateOperationsInput | string
    status?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    sla?: NullableStringFieldUpdateOperationsInput | string | null
    upvoteCount?: IntFieldUpdateOperationsInput | number
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    escalationLevel?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignedAgentId?: NullableStringFieldUpdateOperationsInput | string | null
    managedByMunicipalAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    moderatedByMunicipalAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    crossDeptIssueSuperMunicipalId?: NullableStringFieldUpdateOperationsInput | string | null
    escalatedToStateAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    escalatedToSuperStateAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    location?: ComplaintLocationUncheckedUpdateOneWithoutComplaintNestedInput
    coAssignedAgents?: AgentUncheckedUpdateManyWithoutCoAssignedComplaintsNestedInput
    upvotes?: UpvoteUncheckedUpdateManyWithoutComplaintNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutComplaintNestedInput
  }

  export type ComplaintUncheckedUpdateManyWithoutManagedBySuperAdminInput = {
    id?: StringFieldUpdateOperationsInput | string
    submissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    seq?: IntFieldUpdateOperationsInput | number
    complainantId?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    subCategory?: StringFieldUpdateOperationsInput | string
    standardizedSubCategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    urgency?: EnumComplaintUrgencyFieldUpdateOperationsInput | $Enums.ComplaintUrgency
    attachmentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    assignedDepartment?: StringFieldUpdateOperationsInput | string
    status?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    sla?: NullableStringFieldUpdateOperationsInput | string | null
    upvoteCount?: IntFieldUpdateOperationsInput | number
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    escalationLevel?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignedAgentId?: NullableStringFieldUpdateOperationsInput | string | null
    managedByMunicipalAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    moderatedByMunicipalAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    crossDeptIssueSuperMunicipalId?: NullableStringFieldUpdateOperationsInput | string | null
    escalatedToStateAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    escalatedToSuperStateAdminId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ComplaintCreateManyCategoryInput = {
    id?: string
    submissionDate?: Date | string
    seq?: number
    complainantId: string
    subCategory: string
    standardizedSubCategory?: string | null
    description: string
    urgency?: $Enums.ComplaintUrgency
    attachmentUrl?: string | null
    assignedDepartment: string
    status?: $Enums.ComplaintStatus
    sla?: string | null
    upvoteCount?: number
    isPublic?: boolean
    escalationLevel?: string | null
    dateOfResolution?: Date | string | null
    assignedAgentId?: string | null
    managedByMunicipalAdminId?: string | null
    moderatedByMunicipalAdminId?: string | null
    crossDeptIssueSuperMunicipalId?: string | null
    escalatedToStateAdminId?: string | null
    escalatedToSuperStateAdminId?: string | null
    managedBySuperAdminId?: string | null
  }

  export type ComplaintUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    submissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    subCategory?: StringFieldUpdateOperationsInput | string
    standardizedSubCategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    urgency?: EnumComplaintUrgencyFieldUpdateOperationsInput | $Enums.ComplaintUrgency
    attachmentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    assignedDepartment?: StringFieldUpdateOperationsInput | string
    status?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    sla?: NullableStringFieldUpdateOperationsInput | string | null
    upvoteCount?: IntFieldUpdateOperationsInput | number
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    escalationLevel?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    complainant?: UserUpdateOneRequiredWithoutComplaintsNestedInput
    location?: ComplaintLocationUpdateOneWithoutComplaintNestedInput
    assignedAgent?: AgentUpdateOneWithoutAssignedComplaintsNestedInput
    coAssignedAgents?: AgentUpdateManyWithoutCoAssignedComplaintsNestedInput
    managedByMunicipalAdmin?: DepartmentMunicipalAdminUpdateOneWithoutManagedComplaintsNestedInput
    moderatedByMunicipalAdmin?: DepartmentMunicipalAdminUpdateOneWithoutCommunityModerationNestedInput
    crossDeptIssueSuperMunicipal?: SuperMunicipalAdminUpdateOneWithoutCrossDepartmentIssuesNestedInput
    escalatedToStateAdmin?: DepartmentStateAdminUpdateOneWithoutEscalatedComplaintsNestedInput
    escalatedToSuperStateAdmin?: SuperStateAdminUpdateOneWithoutEscalatedComplaintsNestedInput
    managedBySuperAdmin?: SuperAdminUpdateOneWithoutManagedComplaintsNestedInput
    upvotes?: UpvoteUpdateManyWithoutComplaintNestedInput
    auditLogs?: AuditLogUpdateManyWithoutComplaintNestedInput
  }

  export type ComplaintUncheckedUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    submissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    seq?: IntFieldUpdateOperationsInput | number
    complainantId?: StringFieldUpdateOperationsInput | string
    subCategory?: StringFieldUpdateOperationsInput | string
    standardizedSubCategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    urgency?: EnumComplaintUrgencyFieldUpdateOperationsInput | $Enums.ComplaintUrgency
    attachmentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    assignedDepartment?: StringFieldUpdateOperationsInput | string
    status?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    sla?: NullableStringFieldUpdateOperationsInput | string | null
    upvoteCount?: IntFieldUpdateOperationsInput | number
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    escalationLevel?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignedAgentId?: NullableStringFieldUpdateOperationsInput | string | null
    managedByMunicipalAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    moderatedByMunicipalAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    crossDeptIssueSuperMunicipalId?: NullableStringFieldUpdateOperationsInput | string | null
    escalatedToStateAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    escalatedToSuperStateAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    managedBySuperAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    location?: ComplaintLocationUncheckedUpdateOneWithoutComplaintNestedInput
    coAssignedAgents?: AgentUncheckedUpdateManyWithoutCoAssignedComplaintsNestedInput
    upvotes?: UpvoteUncheckedUpdateManyWithoutComplaintNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutComplaintNestedInput
  }

  export type ComplaintUncheckedUpdateManyWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    submissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    seq?: IntFieldUpdateOperationsInput | number
    complainantId?: StringFieldUpdateOperationsInput | string
    subCategory?: StringFieldUpdateOperationsInput | string
    standardizedSubCategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    urgency?: EnumComplaintUrgencyFieldUpdateOperationsInput | $Enums.ComplaintUrgency
    attachmentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    assignedDepartment?: StringFieldUpdateOperationsInput | string
    status?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    sla?: NullableStringFieldUpdateOperationsInput | string | null
    upvoteCount?: IntFieldUpdateOperationsInput | number
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    escalationLevel?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfResolution?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignedAgentId?: NullableStringFieldUpdateOperationsInput | string | null
    managedByMunicipalAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    moderatedByMunicipalAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    crossDeptIssueSuperMunicipalId?: NullableStringFieldUpdateOperationsInput | string | null
    escalatedToStateAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    escalatedToSuperStateAdminId?: NullableStringFieldUpdateOperationsInput | string | null
    managedBySuperAdminId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UpvoteCreateManyComplaintInput = {
    id?: string
    userId: string
    timestamp?: Date | string
  }

  export type AuditLogCreateManyComplaintInput = {
    id?: string
    action: string
    userId: string
    timestamp?: Date | string
    details?: string | null
  }

  export type AgentUpdateWithoutCoAssignedComplaintsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    officialEmail?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    municipality?: StringFieldUpdateOperationsInput | string
    autonomyLevel?: StringFieldUpdateOperationsInput | string
    accessLevel?: StringFieldUpdateOperationsInput | string
    workloadLimit?: IntFieldUpdateOperationsInput | number
    currentWorkload?: IntFieldUpdateOperationsInput | number
    availabilityStatus?: StringFieldUpdateOperationsInput | string
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolutionRate?: FloatFieldUpdateOperationsInput | number
    avgResolutionTime?: NullableStringFieldUpdateOperationsInput | string | null
    collaborationMetric?: IntFieldUpdateOperationsInput | number
    assignedComplaints?: ComplaintUpdateManyWithoutAssignedAgentNestedInput
    managedByMunicipal?: DepartmentMunicipalAdminUpdateOneWithoutManagedAgentsNestedInput
  }

  export type AgentUncheckedUpdateWithoutCoAssignedComplaintsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    officialEmail?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    municipality?: StringFieldUpdateOperationsInput | string
    autonomyLevel?: StringFieldUpdateOperationsInput | string
    accessLevel?: StringFieldUpdateOperationsInput | string
    workloadLimit?: IntFieldUpdateOperationsInput | number
    currentWorkload?: IntFieldUpdateOperationsInput | number
    availabilityStatus?: StringFieldUpdateOperationsInput | string
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolutionRate?: FloatFieldUpdateOperationsInput | number
    avgResolutionTime?: NullableStringFieldUpdateOperationsInput | string | null
    collaborationMetric?: IntFieldUpdateOperationsInput | number
    managedByMunicipalId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedComplaints?: ComplaintUncheckedUpdateManyWithoutAssignedAgentNestedInput
  }

  export type AgentUncheckedUpdateManyWithoutCoAssignedComplaintsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    officialEmail?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    municipality?: StringFieldUpdateOperationsInput | string
    autonomyLevel?: StringFieldUpdateOperationsInput | string
    accessLevel?: StringFieldUpdateOperationsInput | string
    workloadLimit?: IntFieldUpdateOperationsInput | number
    currentWorkload?: IntFieldUpdateOperationsInput | number
    availabilityStatus?: StringFieldUpdateOperationsInput | string
    dateOfCreation?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolutionRate?: FloatFieldUpdateOperationsInput | number
    avgResolutionTime?: NullableStringFieldUpdateOperationsInput | string | null
    collaborationMetric?: IntFieldUpdateOperationsInput | number
    managedByMunicipalId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UpvoteUpdateWithoutComplaintInput = {
    id?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutUpvotesNestedInput
  }

  export type UpvoteUncheckedUpdateWithoutComplaintInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UpvoteUncheckedUpdateManyWithoutComplaintInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUpdateWithoutComplaintInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutAuditLogsCreatedNestedInput
  }

  export type AuditLogUncheckedUpdateWithoutComplaintInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AuditLogUncheckedUpdateManyWithoutComplaintInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}