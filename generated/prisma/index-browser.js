
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.8.2
 * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
 */
Prisma.prismaVersion = {
  client: "6.8.2",
  engine: "2060c79ba17c6bb9f5823312b6f6b7f4a845738e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  phoneNumber: 'phoneNumber',
  dateOfBirth: 'dateOfBirth',
  password: 'password',
  aadhaarId: 'aadhaarId',
  preferredLanguage: 'preferredLanguage',
  disability: 'disability',
  consentDataCollection: 'consentDataCollection',
  dateOfCreation: 'dateOfCreation',
  lastUpdated: 'lastUpdated',
  status: 'status'
};

exports.Prisma.UserLocationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  pin: 'pin',
  district: 'district',
  city: 'city',
  locality: 'locality',
  street: 'street',
  municipal: 'municipal'
};

exports.Prisma.AgentScalarFieldEnum = {
  id: 'id',
  email: 'email',
  fullName: 'fullName',
  employeeId: 'employeeId',
  password: 'password',
  phoneNumber: 'phoneNumber',
  officialEmail: 'officialEmail',
  department: 'department',
  municipality: 'municipality',
  accessLevel: 'accessLevel',
  workloadLimit: 'workloadLimit',
  currentWorkload: 'currentWorkload',
  availabilityStatus: 'availabilityStatus',
  dateOfCreation: 'dateOfCreation',
  lastUpdated: 'lastUpdated',
  status: 'status',
  lastLogin: 'lastLogin',
  resolutionRate: 'resolutionRate',
  avgResolutionTime: 'avgResolutionTime',
  collaborationMetric: 'collaborationMetric',
  managedByMunicipalId: 'managedByMunicipalId'
};

exports.Prisma.DepartmentMunicipalAdminScalarFieldEnum = {
  id: 'id',
  fullName: 'fullName',
  adminId: 'adminId',
  officialEmail: 'officialEmail',
  phoneNumber: 'phoneNumber',
  password: 'password',
  department: 'department',
  municipality: 'municipality',
  accessLevel: 'accessLevel',
  dateOfCreation: 'dateOfCreation',
  lastUpdated: 'lastUpdated',
  status: 'status',
  lastLogin: 'lastLogin',
  workloadLimit: 'workloadLimit',
  currentWorkload: 'currentWorkload',
  resolutionRate: 'resolutionRate',
  slaComplianceRate: 'slaComplianceRate',
  escalationCount: 'escalationCount',
  managedByStateAdminId: 'managedByStateAdminId',
  managedBySuperMunicipalId: 'managedBySuperMunicipalId'
};

exports.Prisma.SuperMunicipalAdminScalarFieldEnum = {
  id: 'id',
  fullName: 'fullName',
  adminId: 'adminId',
  officialEmail: 'officialEmail',
  password: 'password',
  phoneNumber: 'phoneNumber',
  municipality: 'municipality',
  accessLevel: 'accessLevel',
  dateOfCreation: 'dateOfCreation',
  lastUpdated: 'lastUpdated',
  status: 'status',
  lastLogin: 'lastLogin',
  municipalityResolutionRate: 'municipalityResolutionRate',
  crossDepartmentSuccess: 'crossDepartmentSuccess',
  managedBySuperStateId: 'managedBySuperStateId'
};

exports.Prisma.DepartmentStateAdminScalarFieldEnum = {
  id: 'id',
  fullName: 'fullName',
  adminId: 'adminId',
  officialEmail: 'officialEmail',
  password: 'password',
  phoneNumber: 'phoneNumber',
  department: 'department',
  state: 'state',
  accessLevel: 'accessLevel',
  dateOfCreation: 'dateOfCreation',
  lastUpdated: 'lastUpdated',
  status: 'status',
  lastLogin: 'lastLogin',
  stateResolutionRate: 'stateResolutionRate',
  escalationCount: 'escalationCount',
  managedMunicipalities: 'managedMunicipalities',
  managedBySuperStateId: 'managedBySuperStateId'
};

exports.Prisma.SuperStateAdminScalarFieldEnum = {
  id: 'id',
  fullName: 'fullName',
  adminId: 'adminId',
  officialEmail: 'officialEmail',
  phoneNumber: 'phoneNumber',
  password: 'password',
  state: 'state',
  accessLevel: 'accessLevel',
  dateOfCreation: 'dateOfCreation',
  lastUpdated: 'lastUpdated',
  status: 'status',
  lastLogin: 'lastLogin',
  stateResolutionRate: 'stateResolutionRate',
  crossDepartmentSuccess: 'crossDepartmentSuccess',
  managedBySuperAdminId: 'managedBySuperAdminId'
};

exports.Prisma.SuperAdminScalarFieldEnum = {
  id: 'id',
  fullName: 'fullName',
  adminId: 'adminId',
  officialEmail: 'officialEmail',
  phoneNumber: 'phoneNumber',
  password: 'password',
  accessLevel: 'accessLevel',
  dateOfCreation: 'dateOfCreation',
  lastUpdated: 'lastUpdated',
  status: 'status',
  lastLogin: 'lastLogin'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  subCategories: 'subCategories',
  learnedSubCategories: 'learnedSubCategories',
  assignedDepartment: 'assignedDepartment',
  creationDate: 'creationDate',
  lastUpdated: 'lastUpdated',
  createdBySuperAdminId: 'createdBySuperAdminId',
  managedByDeptStateAdminId: 'managedByDeptStateAdminId'
};

exports.Prisma.ComplaintScalarFieldEnum = {
  id: 'id',
  submissionDate: 'submissionDate',
  seq: 'seq',
  complainantId: 'complainantId',
  categoryId: 'categoryId',
  subCategory: 'subCategory',
  standardizedSubCategory: 'standardizedSubCategory',
  description: 'description',
  urgency: 'urgency',
  attachmentUrl: 'attachmentUrl',
  assignedDepartment: 'assignedDepartment',
  status: 'status',
  sla: 'sla',
  upvoteCount: 'upvoteCount',
  isPublic: 'isPublic',
  escalationLevel: 'escalationLevel',
  dateOfResolution: 'dateOfResolution',
  assignedAgentId: 'assignedAgentId',
  managedByMunicipalAdminId: 'managedByMunicipalAdminId',
  moderatedByMunicipalAdminId: 'moderatedByMunicipalAdminId',
  crossDeptIssueSuperMunicipalId: 'crossDeptIssueSuperMunicipalId',
  escalatedToStateAdminId: 'escalatedToStateAdminId',
  escalatedToSuperStateAdminId: 'escalatedToSuperStateAdminId',
  managedBySuperAdminId: 'managedBySuperAdminId'
};

exports.Prisma.ComplaintLocationScalarFieldEnum = {
  id: 'id',
  complaintId: 'complaintId',
  pin: 'pin',
  district: 'district',
  city: 'city',
  locality: 'locality',
  street: 'street',
  latitude: 'latitude',
  longitude: 'longitude'
};

exports.Prisma.UpvoteScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  complaintId: 'complaintId',
  timestamp: 'timestamp'
};

exports.Prisma.NewsUpdateScalarFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  date: 'date',
  createdById: 'createdById'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  action: 'action',
  userId: 'userId',
  complaintId: 'complaintId',
  timestamp: 'timestamp',
  details: 'details'
};

exports.Prisma.RegionalWorkflowScalarFieldEnum = {
  id: 'id',
  state: 'state',
  municipality: 'municipality',
  category: 'category',
  sla: 'sla',
  createdById: 'createdById'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.userStatus = exports.$Enums.userStatus = {
  ACTIVE: 'ACTIVE',
  DELETED: 'DELETED',
  SUSPENDED: 'SUSPENDED'
};

exports.Department = exports.$Enums.Department = {
  INFRASTRUCTURE: 'INFRASTRUCTURE',
  EDUCATION: 'EDUCATION',
  REVENUE: 'REVENUE',
  HEALTH: 'HEALTH',
  WATER_SUPPLY_SANITATION: 'WATER_SUPPLY_SANITATION',
  ELECTRICITY_POWER: 'ELECTRICITY_POWER',
  TRANSPORTATION: 'TRANSPORTATION',
  MUNICIPAL_SERVICES: 'MUNICIPAL_SERVICES',
  POLICE_SERVICES: 'POLICE_SERVICES',
  ENVIRONMENT: 'ENVIRONMENT',
  HOUSING_URBAN_DEVELOPMENT: 'HOUSING_URBAN_DEVELOPMENT',
  SOCIAL_WELFARE: 'SOCIAL_WELFARE',
  PUBLIC_GRIEVANCES: 'PUBLIC_GRIEVANCES'
};

exports.AccessLevel = exports.$Enums.AccessLevel = {
  SUPER_ADMIN: 'SUPER_ADMIN',
  SUPER_MUNICIPAL_ADMIN: 'SUPER_MUNICIPAL_ADMIN',
  SUPER_STATE_ADMIN: 'SUPER_STATE_ADMIN',
  DEPT_MUNICIPAL_ADMIN: 'DEPT_MUNICIPAL_ADMIN',
  DEPT_STATE_ADMIN: 'DEPT_STATE_ADMIN',
  AGENT: 'AGENT'
};

exports.Status = exports.$Enums.Status = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  SUSPENDED: 'SUSPENDED'
};

exports.ComplaintUrgency = exports.$Enums.ComplaintUrgency = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  CRITICAL: 'CRITICAL'
};

exports.ComplaintStatus = exports.$Enums.ComplaintStatus = {
  REGISTERED: 'REGISTERED',
  UNDER_PROCESSING: 'UNDER_PROCESSING',
  FORWARDED: 'FORWARDED',
  ON_HOLD: 'ON_HOLD',
  COMPLETED: 'COMPLETED',
  REJECTED: 'REJECTED',
  ESCALATED_TO_MUNICIPAL_LEVEL: 'ESCALATED_TO_MUNICIPAL_LEVEL',
  ESCALATED_TO_STATE_LEVEL: 'ESCALATED_TO_STATE_LEVEL'
};

exports.Prisma.ModelName = {
  User: 'User',
  UserLocation: 'UserLocation',
  Agent: 'Agent',
  DepartmentMunicipalAdmin: 'DepartmentMunicipalAdmin',
  SuperMunicipalAdmin: 'SuperMunicipalAdmin',
  DepartmentStateAdmin: 'DepartmentStateAdmin',
  SuperStateAdmin: 'SuperStateAdmin',
  SuperAdmin: 'SuperAdmin',
  Category: 'Category',
  Complaint: 'Complaint',
  ComplaintLocation: 'ComplaintLocation',
  Upvote: 'Upvote',
  NewsUpdate: 'NewsUpdate',
  AuditLog: 'AuditLog',
  RegionalWorkflow: 'RegionalWorkflow'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
